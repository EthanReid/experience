].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 54
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 55
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 56
    //MAD
    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 57
    //MOV
    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
    //Instruction 58
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_DynamicLightmap;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_7;
highp float t12;
mediump float t16_13;
void main()
{
    //Instruction 0
    //ADD
    t0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 1
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 2
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 3
    //MAD
    t16_1.xyz = t0.xyz * vec3(t12) + _WorldSpaceLightPos0.xyz;
    //Instruction 4
    //DP3
    t16_13 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 5
    //RSQ
    t16_13 = inversesqrt(t16_13);
    //Instruction 6
    //MUL
    t16_1.xyz = vec3(t16_13) * t16_1.xyz;
    //Instruction 7
    //DP3
    t16_1.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 8
    //MAX
    t16_1.x = max(t16_1.x, 0.0);
    //Instruction 9
    //LOG
    t16_0.x = log2(t16_1.x);
    //Instruction 10
    //MUL
    t16_1.x = _Shininess * 128.000000;
    //Instruction 11
    //MUL
    t16_0.x = t16_0.x * t16_1.x;
    //Instruction 12
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 13
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 14
    //MUL
    t16_0.x = t16_0.x * t10_1.w;
    //Instruction 15
    //MUL
    t10_2.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 16
    //MUL
    t16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
    //Instruction 17
    //MUL
    t16_0.xyz = t16_0.xxx * t16_3.xyz;
    //Instruction 18
    //DP3
    t16_3.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 19
    //MAX
    t16_3.x = max(t16_3.x, 0.0);
    //Instruction 20
    //MUL
    t16_7.xyz = t10_2.xyz * _LightColor0.xyz;
    //Instruction 21
    //MAD
    t16_0.xyz = t16_7.xyz * t16_3.xxx + t16_0.xyz;
    //Instruction 22
    //SAMPLE
    t10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
    //Instruction 23
    //MUL
    t16_3.x = t10_1.w * unity_DynamicLightmap_HDR.x;
    //Instruction 24
    //MUL
    t16_3.xyz = t10_1.xyz * t16_3.xxx;
    //Instruction 25
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 26
    //MUL
    t16_3.xyz = t16_3.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 27
    //EXP
    t16_3.xyz = exp2(t16_3.xyz);
    //Instruction 28
    //MAD
    t16_3.xyz = t10_2.xyz * t16_3.xyz + t16_0.xyz;
    //Instruction 29
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 30
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 31
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 v_4;
  v_4.x = _World2Object[0].x;
  v_4.y = _World2Object[1].x;
  v_4.z = _World2Object[2].x;
  v_4.w = _World2Object[3].x;
  highp vec4 v_5;
  v_5.x = _World2Object[0].y;
  v_5.y = _World2Object[1].y;
  v_5.z = _World2Object[2].y;
  v_5.w = _World2Object[3].y;
  highp vec4 v_6;
  v_6.x = _World2Object[0].z;
  v_6.y = _World2Object[1].z;
  v_6.z = _World2Object[2].z;
  v_6.w = _World2Object[3].z;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(((
    (v_4.xyz * _glesNormal.x)
   + 
    (v_5.xyz * _glesNormal.y)
  ) + (v_6.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = worldNormal_1;
  mediump vec4 normal_9;
  normal_9 = tmpvar_8;
  mediump vec3 x2_10;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, normal_9);
  x1_11.y = dot (unity_SHAg, normal_9);
  x1_11.z = dot (unity_SHAb, normal_9);
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_9.xyzz * normal_9.yzzx);
  x2_10.x = dot (unity_SHBr, tmpvar_12);
  x2_10.y = dot (unity_SHBg, tmpvar_12);
  x2_10.z = dot (unity_SHBb, tmpvar_12);
  highp vec4 tmpvar_13;
  tmpvar_13 = (_Object2World * _glesVertex);
  tmpvar_3 = (unity_World2Shadow[0] * tmpvar_13);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_13.xyz;
  xlv_TEXCOORD3 = ((x2_10 + (unity_SHC.xyz * 
    ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y))
  )) + x1_11);
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 worldViewDir_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  worldViewDir_6 = tmpvar_9;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
  tmpvar_10 = (tmpvar_11.xyz * _Color.xyz);
  lowp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x > 
    (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w)
  )), _LightShadowData.x);
  tmpvar_12 = tmpvar_13;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_12;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_14;
  mediump vec3 viewDir_15;
  viewDir_15 = worldViewDir_6;
  lowp vec4 c_16;
  lowp vec4 c_17;
  highp float nh_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_5, normalize(
    (tmpvar_3 + viewDir_15)
  )));
  nh_18 = tmpvar_21;
  mediump float y_22;
  y_22 = (_Shininess * 128.0);
  highp float tmpvar_23;
  tmpvar_23 = (pow (nh_18, y_22) * tmpvar_11.w);
  c_17.xyz = (((tmpvar_10 * tmpvar_14) * diff_19) + ((tmpvar_14 * _SpecColor.xyz) * tmpvar_23));
  c_17.w = (tmpvar_11.w * _Color.w);
  c_16.w = c_17.w;
  c_16.xyz = (c_17.xyz + (tmpvar_10 * xlv_TEXCOORD3));
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 v_5;
  v_5.x = _World2Object[0].x;
  v_5.y = _World2Object[1].x;
  v_5.z = _World2Object[2].x;
  v_5.w = _World2Object[3].x;
  highp vec4 v_6;
  v_6.x = _World2Object[0].y;
  v_6.y = _World2Object[1].y;
  v_6.z = _World2Object[2].y;
  v_6.w = _World2Object[3].y;
  highp vec4 v_7;
  v_7.x = _World2Object[0].z;
  v_7.y = _World2Object[1].z;
  v_7.z = _World2Object[2].z;
  v_7.w = _World2Object[3].z;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(((
    (v_5.xyz * _glesNormal.x)
   + 
    (v_6.xyz * _glesNormal.y)
  ) + (v_7.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_8;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_3 = (unity_World2Shadow[0] * tmpvar_9);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_9.xyz;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 worldViewDir_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  worldViewDir_6 = tmpvar_9;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
  tmpvar_10 = (tmpvar_11.xyz * _Color.xyz);
  lowp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x > 
    (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w)
  )), _LightShadowData.x);
  tmpvar_12 = tmpvar_13;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_12;
  mediump vec3 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_14 = (tmpvar_2 * tmpvar_1);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_15 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_16.w) * tmpvar_16.xyz), unity_DynamicLightmap_HDR.yyy);
  tmpvar_2 = tmpvar_14;
  mediump vec3 viewDir_17;
  viewDir_17 = worldViewDir_6;
  lowp vec4 c_18;
  lowp vec4 c_19;
  highp float nh_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_21 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, normalize(
    (tmpvar_3 + viewDir_17)
  )));
  nh_20 = tmpvar_23;
  mediump float y_24;
  y_24 = (_Shininess * 128.0);
  highp float tmpvar_25;
  tmpvar_25 = (pow (nh_20, y_24) * tmpvar_11.w);
  c_19.xyz = (((tmpvar_10 * tmpvar_14) * diff_21) + ((tmpvar_14 * _SpecColor.xyz) * tmpvar_25));
  c_19.w = (tmpvar_11.w * _Color.w);
  c_18.w = c_19.w;
  c_18.xyz = (c_19.xyz + (tmpvar_10 * tmpvar_15));
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex).xyz;
  highp vec4 v_5;
  v_5.x = _World2Object[0].x;
  v_5.y = _World2Object[1].x;
  v_5.z = _World2Object[2].x;
  v_5.w = _World2Object[3].x;
  highp vec4 v_6;
  v_6.x = _World2Object[0].y;
  v_6.y = _World2Object[1].y;
  v_6.z = _World2Object[2].y;
  v_6.w = _World2Object[3].y;
  highp vec4 v_7;
  v_7.x = _World2Object[0].z;
  v_7.y = _World2Object[1].z;
  v_7.z = _World2Object[2].z;
  v_7.w = _World2Object[3].z;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(((
    (v_5.xyz * _glesNormal.x)
   + 
    (v_6.xyz * _glesNormal.y)
  ) + (v_7.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_8;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_1;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  x1_12.x = dot (unity_SHAr, normal_10);
  x1_12.y = dot (unity_SHAg, normal_10);
  x1_12.z = dot (unity_SHAb, normal_10);
  mediump vec4 tmpvar_13;
  tmpvar_13 = (normal_10.xyzz * normal_10.yzzx);
  x2_11.x = dot (unity_SHBr, tmpvar_13);
  x2_11.y = dot (unity_SHBg, tmpvar_13);
  x2_11.z = dot (unity_SHBb, tmpvar_13);
  highp vec3 lightColor0_14;
  lightColor0_14 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_15;
  lightColor1_15 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_16;
  lightColor2_16 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_17;
  lightColor3_17 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_18;
  lightAttenSq_18 = unity_4LightAtten0;
  highp vec3 normal_19;
  normal_19 = worldNormal_1;
  highp vec3 col_20;
  highp vec4 ndotl_21;
  highp vec4 lengthSq_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_4.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_4.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_4.z);
  lengthSq_22 = (tmpvar_23 * tmpvar_23);
  lengthSq_22 = (lengthSq_22 + (tmpvar_24 * tmpvar_24));
  lengthSq_22 = (lengthSq_22 + (tmpvar_25 * tmpvar_25));
  ndotl_21 = (tmpvar_23 * normal_19.x);
  ndotl_21 = (ndotl_21 + (tmpvar_24 * normal_19.y));
  ndotl_21 = (ndotl_21 + (tmpvar_25 * normal_19.z));
  highp vec4 tmpvar_26;
  tmpvar_26 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_21 * inversesqrt(lengthSq_22)));
  ndotl_21 = tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (1.0/((1.0 + 
    (lengthSq_22 * lightAttenSq_18)
  ))));
  col_20 = (lightColor0_14 * tmpvar_27.x);
  col_20 = (col_20 + (lightColor1_15 * tmpvar_27.y));
  col_20 = (col_20 + (lightColor2_16 * tmpvar_27.z));
  col_20 = (col_20 + (lightColor3_17 * tmpvar_27.w));
  tmpvar_3 = (((x2_11 + 
    (unity_SHC.xyz * ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y)))
  ) + x1_12) + col_20);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 worldViewDir_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  worldViewDir_5 = tmpvar_8;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
  tmpvar_9 = (tmpvar_10.xyz * _Color.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  mediump vec3 viewDir_11;
  viewDir_11 = worldViewDir_5;
  lowp vec4 c_12;
  lowp vec4 c_13;
  highp float nh_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_4, normalize(
    (tmpvar_2 + viewDir_11)
  )));
  nh_14 = tmpvar_17;
  mediump float y_18;
  y_18 = (_Shininess * 128.0);
  highp float tmpvar_19;
  tmpvar_19 = (pow (nh_14, y_18) * tmpvar_10.w);
  c_13.xyz = (((tmpvar_9 * tmpvar_1) * diff_15) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_19));
  c_13.w = (tmpvar_10.w * _Color.w);
  c_12.w = c_13.w;
  c_12.xyz = (c_13.xyz + (tmpvar_9 * xlv_TEXCOORD3));
  c_3.xyz = c_12.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 85
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 86
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 87
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 88
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 89
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 90
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 91
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 92
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 93
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 94
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 95
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 96
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 97
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 98
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 99
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 100
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 101
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 102
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 103
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 104
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 105
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 106
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 107
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 108
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 109
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 110
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 111
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 112
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 113
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 114
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 115
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 116
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 117
    //MOV
    t0.w = 1.0;
    //Instruction 118
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 119
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 120
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 121
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 122
    //ADD
    t3 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 123
    //MUL
    t4 = t0.yyyy * t3;
    //Instruction 124
    //MUL
    t3 = t3 * t3;
    //Instruction 125
    //ADD
    t5 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 126
    //ADD
    t1 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 127
    //MAD
    t4 = t5 * t0.xxxx + t4;
    //Instruction 128
    //MAD
    t0 = t1 * t0.zzzz + t4;
    //Instruction 129
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 130
    //MAD
    t1 = t1 * t1 + t3;
    //Instruction 131
    //RSQ
    t3 = inversesqrt(t1);
    //Instruction 132
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 133
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 134
    //MUL
    t0 = t0 * t3;
    //Instruction 135
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 136
    //MUL
    t0 = t1 * t0;
    //Instruction 137
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 138
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 139
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 140
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 141
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 142
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 143
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_7;
highp float t12;
mediump float t16_13;
void main()
{
    //Instruction 59
    //ADD
    t0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 60
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 61
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 62
    //MAD
    t16_1.xyz = t0.xyz * vec3(t12) + _WorldSpaceLightPos0.xyz;
    //Instruction 63
    //DP3
    t16_13 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 64
    //RSQ
    t16_13 = inversesqrt(t16_13);
    //Instruction 65
    //MUL
    t16_1.xyz = vec3(t16_13) * t16_1.xyz;
    //Instruction 66
    //DP3
    t16_1.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 67
    //MAX
    t16_1.x = max(t16_1.x, 0.0);
    //Instruction 68
    //LOG
    t16_0.x = log2(t16_1.x);
    //Instruction 69
    //MUL
    t16_1.x = _Shininess * 128.000000;
    //Instruction 70
    //MUL
    t16_0.x = t16_0.x * t16_1.x;
    //Instruction 71
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 72
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 73
    //MUL
    t16_0.x = t16_0.x * t10_1.w;
    //Instruction 74
    //MUL
    t10_2.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 75
    //MUL
    t16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
    //Instruction 76
    //MUL
    t16_0.xyz = t16_0.xxx * t16_3.xyz;
    //Instruction 77
    //DP3
    t16_3.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 78
    //MAX
    t16_3.x = max(t16_3.x, 0.0);
    //Instruction 79
    //MUL
    t16_7.xyz = t10_2.xyz * _LightColor0.xyz;
    //Instruction 80
    //MAD
    t16_0.xyz = t16_7.xyz * t16_3.xxx + t16_0.xyz;
    //Instruction 81
    //MAD
    t16_3.xyz = t10_2.xyz * vs_TEXCOORD3.xyz + t16_0.xyz;
    //Instruction 82
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 83
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 84
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 v_4;
  v_4.x = _World2Object[0].x;
  v_4.y = _World2Object[1].x;
  v_4.z = _World2Object[2].x;
  v_4.w = _World2Object[3].x;
  highp vec4 v_5;
  v_5.x = _World2Object[0].y;
  v_5.y = _World2Object[1].y;
  v_5.z = _World2Object[2].y;
  v_5.w = _World2Object[3].y;
  highp vec4 v_6;
  v_6.x = _World2Object[0].z;
  v_6.y = _World2Object[1].z;
  v_6.z = _World2Object[2].z;
  v_6.w = _World2Object[3].z;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(((
    (v_4.xyz * _glesNormal.x)
   + 
    (v_5.xyz * _glesNormal.y)
  ) + (v_6.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD6 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 worldViewDir_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  worldViewDir_5 = tmpvar_8;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD0);
  tmpvar_9 = (tmpvar_10.xyz * _Color.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  mediump vec3 tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_11 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_12.w) * tmpvar_12.xyz), unity_DynamicLightmap_HDR.yyy);
  mediump vec3 viewDir_13;
  viewDir_13 = worldViewDir_5;
  lowp vec4 c_14;
  lowp vec4 c_15;
  highp float nh_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, normalize(
    (tmpvar_2 + viewDir_13)
  )));
  nh_16 = tmpvar_19;
  mediump float y_20;
  y_20 = (_Shininess * 128.0);
  highp float tmpvar_21;
  tmpvar_21 = (pow (nh_16, y_20) * tmpvar_10.w);
  c_15.xyz = (((tmpvar_9 * tmpvar_1) * diff_17) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_21));
  c_15.w = (tmpvar_10.w * _Color.w);
  c_14.w = c_15.w;
  c_14.xyz = (c_15.xyz + (tmpvar_9 * tmpvar_11));
  c_3.xyz = c_14.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 176
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 177
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 178
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 179
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 180
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 181
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 182
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 183
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 184
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 185
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 186
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 187
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 188
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 189
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 190
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 191
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 192
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 193
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 194
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 195
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 196
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 197
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 198
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 199
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 200
    //MAD
    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 201
    //MOV
    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
    //Instruction 202
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_DynamicLightmap;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_7;
highp float t12;
mediump float t16_13;
void main()
{
    //Instruction 144
    //ADD
    t0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 145
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 146
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 147
    //MAD
    t16_1.xyz = t0.xyz * vec3(t12) + _WorldSpaceLightPos0.xyz;
    //Instruction 148
    //DP3
    t16_13 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 149
    //RSQ
    t16_13 = inversesqrt(t16_13);
    //Instruction 150
    //MUL
    t16_1.xyz = vec3(t16_13) * t16_1.xyz;
    //Instruction 151
    //DP3
    t16_1.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 152
    //MAX
    t16_1.x = max(t16_1.x, 0.0);
    //Instruction 153
    //LOG
    t16_0.x = log2(t16_1.x);
    //Instruction 154
    //MUL
    t16_1.x = _Shininess * 128.000000;
    //Instruction 155
    //MUL
    t16_0.x = t16_0.x * t16_1.x;
    //Instruction 156
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 157
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 158
    //MUL
    t16_0.x = t16_0.x * t10_1.w;
    //Instruction 159
    //MUL
    t10_2.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 160
    //MUL
    t16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
    //Instruction 161
    //MUL
    t16_0.xyz = t16_0.xxx * t16_3.xyz;
    //Instruction 162
    //DP3
    t16_3.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 163
    //MAX
    t16_3.x = max(t16_3.x, 0.0);
    //Instruction 164
    //MUL
    t16_7.xyz = t10_2.xyz * _LightColor0.xyz;
    //Instruction 165
    //MAD
    t16_0.xyz = t16_7.xyz * t16_3.xxx + t16_0.xyz;
    //Instruction 166
    //SAMPLE
    t10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
    //Instruction 167
    //MUL
    t16_3.x = t10_1.w * unity_DynamicLightmap_HDR.x;
    //Instruction 168
    //MUL
    t16_3.xyz = t10_1.xyz * t16_3.xxx;
    //Instruction 169
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 170
    //MUL
    t16_3.xyz = t16_3.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 171
    //EXP
    t16_3.xyz = exp2(t16_3.xyz);
    //Instruction 172
    //MAD
    t16_3.xyz = t10_2.xyz * t16_3.xyz + t16_0.xyz;
    //Instruction 173
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 174
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 175
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex);
  highp vec4 v_6;
  v_6.x = _World2Object[0].x;
  v_6.y = _World2Object[1].x;
  v_6.z = _World2Object[2].x;
  v_6.w = _World2Object[3].x;
  highp vec4 v_7;
  v_7.x = _World2Object[0].y;
  v_7.y = _World2Object[1].y;
  v_7.z = _World2Object[2].y;
  v_7.w = _World2Object[3].y;
  highp vec4 v_8;
  v_8.x = _World2Object[0].z;
  v_8.y = _World2Object[1].z;
  v_8.z = _World2Object[2].z;
  v_8.w = _World2Object[3].z;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(((
    (v_6.xyz * _glesNormal.x)
   + 
    (v_7.xyz * _glesNormal.y)
  ) + (v_8.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_9;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = worldNormal_1;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, normal_11);
  x1_13.y = dot (unity_SHAg, normal_11);
  x1_13.z = dot (unity_SHAb, normal_11);
  mediump vec4 tmpvar_14;
  tmpvar_14 = (normal_11.xyzz * normal_11.yzzx);
  x2_12.x = dot (unity_SHBr, tmpvar_14);
  x2_12.y = dot (unity_SHBg, tmpvar_14);
  x2_12.z = dot (unity_SHBb, tmpvar_14);
  highp vec3 lightColor0_15;
  lightColor0_15 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_16;
  lightColor1_16 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_17;
  lightColor2_17 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_18;
  lightColor3_18 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_19;
  lightAttenSq_19 = unity_4LightAtten0;
  highp vec3 normal_20;
  normal_20 = worldNormal_1;
  highp vec3 col_21;
  highp vec4 ndotl_22;
  highp vec4 lengthSq_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_23 = (tmpvar_24 * tmpvar_24);
  lengthSq_23 = (lengthSq_23 + (tmpvar_25 * tmpvar_25));
  lengthSq_23 = (lengthSq_23 + (tmpvar_26 * tmpvar_26));
  ndotl_22 = (tmpvar_24 * normal_20.x);
  ndotl_22 = (ndotl_22 + (tmpvar_25 * normal_20.y));
  ndotl_22 = (ndotl_22 + (tmpvar_26 * normal_20.z));
  highp vec4 tmpvar_27;
  tmpvar_27 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_22 * inversesqrt(lengthSq_23)));
  ndotl_22 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_27 * (1.0/((1.0 + 
    (lengthSq_23 * lightAttenSq_19)
  ))));
  col_21 = (lightColor0_15 * tmpvar_28.x);
  col_21 = (col_21 + (lightColor1_16 * tmpvar_28.y));
  col_21 = (col_21 + (lightColor2_17 * tmpvar_28.z));
  col_21 = (col_21 + (lightColor3_18 * tmpvar_28.w));
  tmpvar_3 = (((x2_12 + 
    (unity_SHC.xyz * ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y)))
  ) + x1_13) + col_21);
  tmpvar_4 = (unity_World2Shadow[0] * tmpvar_5);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_5.xyz;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 worldViewDir_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  worldViewDir_6 = tmpvar_9;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
  tmpvar_10 = (tmpvar_11.xyz * _Color.xyz);
  lowp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x > 
    (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w)
  )), _LightShadowData.x);
  tmpvar_12 = tmpvar_13;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_12;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_14;
  mediump vec3 viewDir_15;
  viewDir_15 = worldViewDir_6;
  lowp vec4 c_16;
  lowp vec4 c_17;
  highp float nh_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_5, normalize(
    (tmpvar_3 + viewDir_15)
  )));
  nh_18 = tmpvar_21;
  mediump float y_22;
  y_22 = (_Shininess * 128.0);
  highp float tmpvar_23;
  tmpvar_23 = (pow (nh_18, y_22) * tmpvar_11.w);
  c_17.xyz = (((tmpvar_10 * tmpvar_14) * diff_19) + ((tmpvar_14 * _SpecColor.xyz) * tmpvar_23));
  c_17.w = (tmpvar_11.w * _Color.w);
  c_16.w = c_17.w;
  c_16.xyz = (c_17.xyz + (tmpvar_10 * xlv_TEXCOORD3));
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 v_5;
  v_5.x = _World2Object[0].x;
  v_5.y = _World2Object[1].x;
  v_5.z = _World2Object[2].x;
  v_5.w = _World2Object[3].x;
  highp vec4 v_6;
  v_6.x = _World2Object[0].y;
  v_6.y = _World2Object[1].y;
  v_6.z = _World2Object[2].y;
  v_6.w = _World2Object[3].y;
  highp vec4 v_7;
  v_7.x = _World2Object[0].z;
  v_7.y = _World2Object[1].z;
  v_7.z = _World2Object[2].z;
  v_7.w = _World2Object[3].z;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(((
    (v_5.xyz * _glesNormal.x)
   + 
    (v_6.xyz * _glesNormal.y)
  ) + (v_7.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_8;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_3 = (unity_World2Shadow[0] * tmpvar_9);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_9.xyz;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 worldViewDir_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  worldViewDir_6 = tmpvar_9;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
  tmpvar_10 = (tmpvar_11.xyz * _Color.xyz);
  lowp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x > 
    (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w)
  )), _LightShadowData.x);
  tmpvar_12 = tmpvar_13;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = tmpvar_12;
  mediump vec3 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_14 = (tmpvar_2 * tmpvar_1);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_15 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_16.w) * tmpvar_16.xyz), unity_DynamicLightmap_HDR.yyy);
  tmpvar_2 = tmpvar_14;
  mediump vec3 viewDir_17;
  viewDir_17 = worldViewDir_6;
  lowp vec4 c_18;
  lowp vec4 c_19;
  highp float nh_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_21 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, normalize(
    (tmpvar_3 + viewDir_17)
  )));
  nh_20 = tmpvar_23;
  mediump float y_24;
  y_24 = (_Shininess * 128.0);
  highp float tmpvar_25;
  tmpvar_25 = (pow (nh_20, y_24) * tmpvar_11.w);
  c_19.xyz = (((tmpvar_10 * tmpvar_14) * diff_21) + ((tmpvar_14 * _SpecColor.xyz) * tmpvar_25));
  c_19.w = (tmpvar_11.w * _Color.w);
  c_18.w = c_19.w;
  c_18.xyz = (c_19.xyz + (tmpvar_10 * tmpvar_15));
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 v_4;
  v_4.x = _World2Object[0].x;
  v_4.y = _World2Object[1].x;
  v_4.z = _World2Object[2].x;
  v_4.w = _World2Object[3].x;
  highp vec4 v_5;
  v_5.x = _World2Object[0].y;
  v_5.y = _World2Object[1].y;
  v_5.z = _World2Object[2].y;
  v_5.w = _World2Object[3].y;
  highp vec4 v_6;
  v_6.x = _World2Object[0].z;
  v_6.y = _World2Object[1].z;
  v_6.z = _World2Object[2].z;
  v_6.w = _World2Object[3].z;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(((
    (v_4.xyz * _glesNormal.x)
   + 
    (v_5.xyz * _glesNormal.y)
  ) + (v_6.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = worldNormal_1;
  mediump vec4 normal_9;
  normal_9 = tmpvar_8;
  mediump vec3 x2_10;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, normal_9);
  x1_11.y = dot (unity_SHAg, normal_9);
  x1_11.z = dot (unity_SHAb, normal_9);
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_9.xyzz * normal_9.yzzx);
  x2_10.x = dot (unity_SHBr, tmpvar_12);
  x2_10.y = dot (unity_SHBg, tmpvar_12);
  x2_10.z = dot (unity_SHBb, tmpvar_12);
  highp vec4 tmpvar_13;
  tmpvar_13 = (_Object2World * _glesVertex);
  tmpvar_3 = (unity_World2Shadow[0] * tmpvar_13);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_13.xyz;
  xlv_TEXCOORD3 = ((x2_10 + (unity_SHC.xyz * 
    ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y))
  )) + x1_11);
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 worldViewDir_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  worldViewDir_6 = tmpvar_9;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
  tmpvar_10 = (tmpvar_11.xyz * _Color.xyz);
  lowp float shadow_12;
  shadow_12 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = shadow_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_13;
  mediump vec3 viewDir_14;
  viewDir_14 = worldViewDir_6;
  lowp vec4 c_15;
  lowp vec4 c_16;
  highp float nh_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_5, normalize(
    (tmpvar_3 + viewDir_14)
  )));
  nh_17 = tmpvar_20;
  mediump float y_21;
  y_21 = (_Shininess * 128.0);
  highp float tmpvar_22;
  tmpvar_22 = (pow (nh_17, y_21) * tmpvar_11.w);
  c_16.xyz = (((tmpvar_10 * tmpvar_13) * diff_18) + ((tmpvar_13 * _SpecColor.xyz) * tmpvar_22));
  c_16.w = (tmpvar_11.w * _Color.w);
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_10 * xlv_TEXCOORD3));
  c_4.xyz = c_15.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 233
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 234
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 235
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 236
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 237
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 238
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 239
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 240
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 241
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 242
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 243
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 244
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 245
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 246
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 247
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 248
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 249
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 250
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 251
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 252
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 253
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 254
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 255
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 256
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 257
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 258
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 259
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 260
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 261
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 262
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 263
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 264
    //MOV
    t0.w = 1.0;
    //Instruction 265
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 266
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 267
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 268
    //ADD
    vs_TEXCOORD3.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 269
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 270
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 271
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 272
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 273
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 274
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 275
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 276
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 277
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 278
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_8;
highp float t15;
mediump float t16_16;
mediump float t16_18;
void main()
{
    //Instruction 203
    //ADD
    t0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 204
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 205
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 206
    //MAD
    t16_1.xyz = t0.xyz * vec3(t15) + _WorldSpaceLightPos0.xyz;
    //Instruction 207
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 208
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 209
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 210
    //DP3
    t16_1.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 211
    //MAX
    t16_1.x = max(t16_1.x, 0.0);
    //Instruction 212
    //LOG
    t16_0.x = log2(t16_1.x);
    //Instruction 213
    //MUL
    t16_1.x = _Shininess * 128.000000;
    //Instruction 214
    //MUL
    t16_0.x = t16_0.x * t16_1.x;
    //Instruction 215
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 216
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 217
    //MUL
    t16_0.x = t16_0.x * t10_1.w;
    //Instruction 218
    //MUL
    t10_2.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 219
    //SAMPLE_C_LZ
    vec3 txVec0 = vec3(vs_TEXCOORD4.xy,vs_TEXCOORD4.z);
    t16_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    //Instruction 220
    //ADD
    t16_8 = (-_LightShadowData.x) + 1.0;
    //Instruction 221
    //MAD
    t16_3.x = t16_3.x * t16_8 + _LightShadowData.x;
    //Instruction 222
    //MUL
    t16_3.xyz = t16_3.xxx * _LightColor0.xyz;
    //Instruction 223
    //MUL
    t16_4.xyz = t16_3.xyz * _SpecColor.xyz;
    //Instruction 224
    //MUL
    t16_3.xyz = t10_2.xyz * t16_3.xyz;
    //Instruction 225
    //MUL
    t16_0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 226
    //DP3
    t16_18 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 227
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 228
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 229
    //MAD
    t16_3.xyz = t10_2.xyz * vs_TEXCOORD3.xyz + t16_0.xyz;
    //Instruction 230
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 231
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 232
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 v_5;
  v_5.x = _World2Object[0].x;
  v_5.y = _World2Object[1].x;
  v_5.z = _World2Object[2].x;
  v_5.w = _World2Object[3].x;
  highp vec4 v_6;
  v_6.x = _World2Object[0].y;
  v_6.y = _World2Object[1].y;
  v_6.z = _World2Object[2].y;
  v_6.w = _World2Object[3].y;
  highp vec4 v_7;
  v_7.x = _World2Object[0].z;
  v_7.y = _World2Object[1].z;
  v_7.z = _World2Object[2].z;
  v_7.w = _World2Object[3].z;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(((
    (v_5.xyz * _glesNormal.x)
   + 
    (v_6.xyz * _glesNormal.y)
  ) + (v_7.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_8;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_3 = (unity_World2Shadow[0] * tmpvar_9);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_9.xyz;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 worldViewDir_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  worldViewDir_6 = tmpvar_9;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
  tmpvar_10 = (tmpvar_11.xyz * _Color.xyz);
  lowp float shadow_12;
  shadow_12 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = shadow_12;
  mediump vec3 tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_13 = (tmpvar_2 * tmpvar_1);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_14 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_15.w) * tmpvar_15.xyz), unity_DynamicLightmap_HDR.yyy);
  tmpvar_2 = tmpvar_13;
  mediump vec3 viewDir_16;
  viewDir_16 = worldViewDir_6;
  lowp vec4 c_17;
  lowp vec4 c_18;
  highp float nh_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_5, normalize(
    (tmpvar_3 + viewDir_16)
  )));
  nh_19 = tmpvar_22;
  mediump float y_23;
  y_23 = (_Shininess * 128.0);
  highp float tmpvar_24;
  tmpvar_24 = (pow (nh_19, y_23) * tmpvar_11.w);
  c_18.xyz = (((tmpvar_10 * tmpvar_13) * diff_20) + ((tmpvar_13 * _SpecColor.xyz) * tmpvar_24));
  c_18.w = (tmpvar_11.w * _Color.w);
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_10 * tmpvar_14));
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp float t6;
void main()
{
    //Instruction 315
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 316
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 317
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 318
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 319
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 320
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 321
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 322
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 323
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 324
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 325
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 326
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 327
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 328
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 329
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 330
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 331
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 332
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 333
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 334
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 335
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 336
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 337
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 338
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 339
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 340
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 341
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 342
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 343
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 344
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 345
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 346
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 347
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 348
    //MAD
    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 349
    //MOV
    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
    //Instruction 350
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_8;
highp float t15;
mediump float t16_16;
mediump float t16_18;
void main()
{
    //Instruction 279
    //ADD
    t0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 280
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 281
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 282
    //MAD
    t16_1.xyz = t0.xyz * vec3(t15) + _WorldSpaceLightPos0.xyz;
    //Instruction 283
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 284
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 285
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 286
    //DP3
    t16_1.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 287
    //MAX
    t16_1.x = max(t16_1.x, 0.0);
    //Instruction 288
    //LOG
    t16_0.x = log2(t16_1.x);
    //Instruction 289
    //MUL
    t16_1.x = _Shininess * 128.000000;
    //Instruction 290
    //MUL
    t16_0.x = t16_0.x * t16_1.x;
    //Instruction 291
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 292
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 293
    //MUL
    t16_0.x = t16_0.x * t10_1.w;
    //Instruction 294
    //MUL
    t10_2.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 295
    //SAMPLE_C_LZ
    vec3 txVec1 = vec3(vs_TEXCOORD4.xy,vs_TEXCOORD4.z);
    t16_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    //Instruction 296
    //ADD
    t16_8 = (-_LightShadowData.x) + 1.0;
    //Instruction 297
    //MAD
    t16_3.x = t16_3.x * t16_8 + _LightShadowData.x;
    //Instruction 298
    //MUL
    t16_3.xyz = t16_3.xxx * _LightColor0.xyz;
    //Instruction 299
    //MUL
    t16_4.xyz = t16_3.xyz * _SpecColor.xyz;
    //Instruction 300
    //MUL
    t16_3.xyz = t10_2.xyz * t16_3.xyz;
    //Instruction 301
    //MUL
    t16_0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 302
    //DP3
    t16_18 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 303
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 304
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 305
    //SAMPLE
    t10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
    //Instruction 306
    //MUL
    t16_3.x = t10_1.w * unity_DynamicLightmap_HDR.x;
    //Instruction 307
    //MUL
    t16_3.xyz = t10_1.xyz * t16_3.xxx;
    //Instruction 308
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 309
    //MUL
    t16_3.xyz = t16_3.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 310
    //EXP
    t16_3.xyz = exp2(t16_3.xyz);
    //Instruction 311
    //MAD
    t16_3.xyz = t10_2.xyz * t16_3.xyz + t16_0.xyz;
    //Instruction 312
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 313
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 314
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex);
  highp vec4 v_6;
  v_6.x = _World2Object[0].x;
  v_6.y = _World2Object[1].x;
  v_6.z = _World2Object[2].x;
  v_6.w = _World2Object[3].x;
  highp vec4 v_7;
  v_7.x = _World2Object[0].y;
  v_7.y = _World2Object[1].y;
  v_7.z = _World2Object[2].y;
  v_7.w = _World2Object[3].y;
  highp vec4 v_8;
  v_8.x = _World2Object[0].z;
  v_8.y = _World2Object[1].z;
  v_8.z = _World2Object[2].z;
  v_8.w = _World2Object[3].z;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(((
    (v_6.xyz * _glesNormal.x)
   + 
    (v_7.xyz * _glesNormal.y)
  ) + (v_8.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_9;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = worldNormal_1;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, normal_11);
  x1_13.y = dot (unity_SHAg, normal_11);
  x1_13.z = dot (unity_SHAb, normal_11);
  mediump vec4 tmpvar_14;
  tmpvar_14 = (normal_11.xyzz * normal_11.yzzx);
  x2_12.x = dot (unity_SHBr, tmpvar_14);
  x2_12.y = dot (unity_SHBg, tmpvar_14);
  x2_12.z = dot (unity_SHBb, tmpvar_14);
  highp vec3 lightColor0_15;
  lightColor0_15 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_16;
  lightColor1_16 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_17;
  lightColor2_17 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_18;
  lightColor3_18 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_19;
  lightAttenSq_19 = unity_4LightAtten0;
  highp vec3 normal_20;
  normal_20 = worldNormal_1;
  highp vec3 col_21;
  highp vec4 ndotl_22;
  highp vec4 lengthSq_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_23 = (tmpvar_24 * tmpvar_24);
  lengthSq_23 = (lengthSq_23 + (tmpvar_25 * tmpvar_25));
  lengthSq_23 = (lengthSq_23 + (tmpvar_26 * tmpvar_26));
  ndotl_22 = (tmpvar_24 * normal_20.x);
  ndotl_22 = (ndotl_22 + (tmpvar_25 * normal_20.y));
  ndotl_22 = (ndotl_22 + (tmpvar_26 * normal_20.z));
  highp vec4 tmpvar_27;
  tmpvar_27 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_22 * inversesqrt(lengthSq_23)));
  ndotl_22 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_27 * (1.0/((1.0 + 
    (lengthSq_23 * lightAttenSq_19)
  ))));
  col_21 = (lightColor0_15 * tmpvar_28.x);
  col_21 = (col_21 + (lightColor1_16 * tmpvar_28.y));
  col_21 = (col_21 + (lightColor2_17 * tmpvar_28.z));
  col_21 = (col_21 + (lightColor3_18 * tmpvar_28.w));
  tmpvar_3 = (((x2_12 + 
    (unity_SHC.xyz * ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y)))
  ) + x1_13) + col_21);
  tmpvar_4 = (unity_World2Shadow[0] * tmpvar_5);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_5.xyz;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 worldViewDir_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  worldViewDir_6 = tmpvar_9;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
  tmpvar_10 = (tmpvar_11.xyz * _Color.xyz);
  lowp float shadow_12;
  shadow_12 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = shadow_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_13;
  mediump vec3 viewDir_14;
  viewDir_14 = worldViewDir_6;
  lowp vec4 c_15;
  lowp vec4 c_16;
  highp float nh_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_5, normalize(
    (tmpvar_3 + viewDir_14)
  )));
  nh_17 = tmpvar_20;
  mediump float y_21;
  y_21 = (_Shininess * 128.0);
  highp float tmpvar_22;
  tmpvar_22 = (pow (nh_17, y_21) * tmpvar_11.w);
  c_16.xyz = (((tmpvar_10 * tmpvar_13) * diff_18) + ((tmpvar_13 * _SpecColor.xyz) * tmpvar_22));
  c_16.w = (tmpvar_11.w * _Color.w);
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_10 * xlv_TEXCOORD3));
  c_4.xyz = c_15.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 381
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 382
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 383
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 384
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 385
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 386
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 387
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 388
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 389
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 390
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 391
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 392
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 393
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 394
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 395
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 396
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 397
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 398
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 399
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 400
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 401
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 402
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 403
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 404
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 405
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 406
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 407
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 408
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 409
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 410
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 411
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 412
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 413
    //MOV
    t0.w = 1.0;
    //Instruction 414
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 415
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 416
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 417
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 418
    //ADD
    t3 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 419
    //MUL
    t4 = t0.yyyy * t3;
    //Instruction 420
    //MUL
    t3 = t3 * t3;
    //Instruction 421
    //ADD
    t5 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 422
    //ADD
    t1 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 423
    //MAD
    t4 = t5 * t0.xxxx + t4;
    //Instruction 424
    //MAD
    t0 = t1 * t0.zzzz + t4;
    //Instruction 425
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 426
    //MAD
    t1 = t1 * t1 + t3;
    //Instruction 427
    //RSQ
    t3 = inversesqrt(t1);
    //Instruction 428
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 429
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 430
    //MUL
    t0 = t0 * t3;
    //Instruction 431
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 432
    //MUL
    t0 = t1 * t0;
    //Instruction 433
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 434
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 435
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 436
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 437
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 438
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 439
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 440
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 441
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 442
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 443
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 444
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 445
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 446
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 447
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 448
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_8;
highp float t15;
mediump float t16_16;
mediump float t16_18;
void main()
{
    //Instruction 351
    //ADD
    t0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 352
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 353
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 354
    //MAD
    t16_1.xyz = t0.xyz * vec3(t15) + _WorldSpaceLightPos0.xyz;
    //Instruction 355
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 356
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 357
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 358
    //DP3
    t16_1.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 359
    //MAX
    t16_1.x = max(t16_1.x, 0.0);
    //Instruction 360
    //LOG
    t16_0.x = log2(t16_1.x);
    //Instruction 361
    //MUL
    t16_1.x = _Shininess * 128.000000;
    //Instruction 362
    //MUL
    t16_0.x = t16_0.x * t16_1.x;
    //Instruction 363
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 364
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 365
    //MUL
    t16_0.x = t16_0.x * t10_1.w;
    //Instruction 366
    //MUL
    t10_2.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 367
    //SAMPLE_C_LZ
    vec3 txVec2 = vec3(vs_TEXCOORD4.xy,vs_TEXCOORD4.z);
    t16_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    //Instruction 368
    //ADD
    t16_8 = (-_LightShadowData.x) + 1.0;
    //Instruction 369
    //MAD
    t16_3.x = t16_3.x * t16_8 + _LightShadowData.x;
    //Instruction 370
    //MUL
    t16_3.xyz = t16_3.xxx * _LightColor0.xyz;
    //Instruction 371
    //MUL
    t16_4.xyz = t16_3.xyz * _SpecColor.xyz;
    //Instruction 372
    //MUL
    t16_3.xyz = t10_2.xyz * t16_3.xyz;
    //Instruction 373
    //MUL
    t16_0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 374
    //DP3
    t16_18 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 375
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 376
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 377
    //MAD
    t16_3.xyz = t10_2.xyz * vs_TEXCOORD3.xyz + t16_0.xyz;
    //Instruction 378
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 379
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 380
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 v_5;
  v_5.x = _World2Object[0].x;
  v_5.y = _World2Object[1].x;
  v_5.z = _World2Object[2].x;
  v_5.w = _World2Object[3].x;
  highp vec4 v_6;
  v_6.x = _World2Object[0].y;
  v_6.y = _World2Object[1].y;
  v_6.z = _World2Object[2].y;
  v_6.w = _World2Object[3].y;
  highp vec4 v_7;
  v_7.x = _World2Object[0].z;
  v_7.y = _World2Object[1].z;
  v_7.z = _World2Object[2].z;
  v_7.w = _World2Object[3].z;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(((
    (v_5.xyz * _glesNormal.x)
   + 
    (v_6.xyz * _glesNormal.y)
  ) + (v_7.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_8;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_3 = (unity_World2Shadow[0] * tmpvar_9);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_9.xyz;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 worldViewDir_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  worldViewDir_6 = tmpvar_9;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
  tmpvar_10 = (tmpvar_11.xyz * _Color.xyz);
  lowp float shadow_12;
  shadow_12 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = shadow_12;
  mediump vec3 tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_13 = (tmpvar_2 * tmpvar_1);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_14 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_15.w) * tmpvar_15.xyz), unity_DynamicLightmap_HDR.yyy);
  tmpvar_2 = tmpvar_13;
  mediump vec3 viewDir_16;
  viewDir_16 = worldViewDir_6;
  lowp vec4 c_17;
  lowp vec4 c_18;
  highp float nh_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_5, normalize(
    (tmpvar_3 + viewDir_16)
  )));
  nh_19 = tmpvar_22;
  mediump float y_23;
  y_23 = (_Shininess * 128.0);
  highp float tmpvar_24;
  tmpvar_24 = (pow (nh_19, y_23) * tmpvar_11.w);
  c_18.xyz = (((tmpvar_10 * tmpvar_13) * diff_20) + ((tmpvar_13 * _SpecColor.xyz) * tmpvar_24));
  c_18.w = (tmpvar_11.w * _Color.w);
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_10 * tmpvar_14));
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp float t6;
void main()
{
    //Instruction 485
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 486
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 487
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 488
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 489
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 490
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 491
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 492
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 493
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 494
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 495
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 496
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 497
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 498
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 499
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 500
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 501
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 502
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 503
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 504
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 505
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 506
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 507
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 508
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 509
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 510
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 511
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 512
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 513
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 514
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 515
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 516
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 517
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 518
    //MAD
    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 519
    //MOV
    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
    //Instruction 520
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_8;
highp float t15;
mediump float t16_16;
mediump float t16_18;
void main()
{
    //Instruction 449
    //ADD
    t0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 450
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 451
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 452
    //MAD
    t16_1.xyz = t0.xyz * vec3(t15) + _WorldSpaceLightPos0.xyz;
    //Instruction 453
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 454
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 455
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 456
    //DP3
    t16_1.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 457
    //MAX
    t16_1.x = max(t16_1.x, 0.0);
    //Instruction 458
    //LOG
    t16_0.x = log2(t16_1.x);
    //Instruction 459
    //MUL
    t16_1.x = _Shininess * 128.000000;
    //Instruction 460
    //MUL
    t16_0.x = t16_0.x * t16_1.x;
    //Instruction 461
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 462
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 463
    //MUL
    t16_0.x = t16_0.x * t10_1.w;
    //Instruction 464
    //MUL
    t10_2.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 465
    //SAMPLE_C_LZ
    vec3 txVec3 = vec3(vs_TEXCOORD4.xy,vs_TEXCOORD4.z);
    t16_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    //Instruction 466
    //ADD
    t16_8 = (-_LightShadowData.x) + 1.0;
    //Instruction 467
    //MAD
    t16_3.x = t16_3.x * t16_8 + _LightShadowData.x;
    //Instruction 468
    //MUL
    t16_3.xyz = t16_3.xxx * _LightColor0.xyz;
    //Instruction 469
    //MUL
    t16_4.xyz = t16_3.xyz * _SpecColor.xyz;
    //Instruction 470
    //MUL
    t16_3.xyz = t10_2.xyz * t16_3.xyz;
    //Instruction 471
    //MUL
    t16_0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 472
    //DP3
    t16_18 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 473
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 474
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 475
    //SAMPLE
    t10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
    //Instruction 476
    //MUL
    t16_3.x = t10_1.w * unity_DynamicLightmap_HDR.x;
    //Instruction 477
    //MUL
    t16_3.xyz = t10_1.xyz * t16_3.xxx;
    //Instruction 478
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 479
    //MUL
    t16_3.xyz = t16_3.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 480
    //EXP
    t16_3.xyz = exp2(t16_3.xyz);
    //Instruction 481
    //MAD
    t16_3.xyz = t10_2.xyz * t16_3.xyz + t16_0.xyz;
    //Instruction 482
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 483
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 484
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "RenderType"="Opaque" }
  ZWrite Off
  Blend One One
  GpuProgramID 85758
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 v_3;
  v_3.x = _World2Object[0].x;
  v_3.y = _World2Object[1].x;
  v_3.z = _World2Object[2].x;
  v_3.w = _World2Object[3].x;
  highp vec4 v_4;
  v_4.x = _World2Object[0].y;
  v_4.y = _World2Object[1].y;
  v_4.z = _World2Object[2].y;
  v_4.w = _World2Object[3].y;
  highp vec4 v_5;
  v_5.x = _World2Object[0].z;
  v_5.y = _World2Object[1].z;
  v_5.z = _World2Object[2].z;
  v_5.w = _World2Object[3].z;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(((
    (v_3.xyz * _glesNormal.x)
   + 
    (v_4.xyz * _glesNormal.y)
  ) + (v_5.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 worldViewDir_5;
  lowp vec3 lightDir_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
  lightDir_6 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  worldViewDir_5 = tmpvar_8;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_LightMatrix0 * tmpvar_10).xyz;
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_11, tmpvar_11);
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_LightTexture0, vec2(tmpvar_12)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_13);
  mediump vec3 viewDir_14;
  viewDir_14 = worldViewDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  highp float nh_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, normalize(
    (tmpvar_2 + viewDir_14)
  )));
  nh_17 = tmpvar_20;
  mediump float y_21;
  y_21 = (_Shininess * 128.0);
  highp float tmpvar_22;
  tmpvar_22 = (pow (nh_17, y_21) * tmpvar_9.w);
  c_16.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_18)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_22));
  c_16.w = (tmpvar_9.w * _Color.w);
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 98
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 99
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 100
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 101
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 102
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 103
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 104
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 105
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 106
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 107
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 108
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 109
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 110
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 111
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 112
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 113
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 114
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 115
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 116
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 117
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 118
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 119
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 120
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 121
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 122
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
highp vec3 t1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump float t16_5;
lowp float t10_5;
highp float t15;
void main()
{
    //Instruction 63
    //ADD
    t0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 64
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 65
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 66
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 67
    //ADD
    t1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 68
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 69
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 70
    //MAD
    t16_2.xyz = t1.xyz * vec3(t15) + t0.xyz;
    //Instruction 71
    //DP3
    t16_2.w = dot(vs_TEXCOORD1.xyz, t0.xyz);
    //Instruction 72
    //DP3
    t16_3.x = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 73
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 74
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xxx;
    //Instruction 75
    //DP3
    t16_2.x = dot(vs_TEXCOORD1.xyz, t16_2.xyz);
    //Instruction 76
    //MAX
    t16_2.xw = max(t16_2.xw, vec2(0.0, 0.0));
    //Instruction 77
    //LOG
    t16_0.x = log2(t16_2.x);
    //Instruction 78
    //MUL
    t16_2.x = _Shininess * 128.000000;
    //Instruction 79
    //MUL
    t16_0.x = t16_0.x * t16_2.x;
    //Instruction 80
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 81
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 82
    //MUL
    t16_0.x = t16_0.x * t10_1.w;
    //Instruction 83
    //MUL
    t10_4.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 84
    //MUL
    t16_2.xyz = vs_TEXCOORD2.yyy * _LightMatrix0[1].xyz;
    //Instruction 85
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD2.xxx + t16_2.xyz;
    //Instruction 86
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD2.zzz + t16_2.xyz;
    //Instruction 87
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 88
    //DP3
    t16_5 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 89
    //SAMPLE
    t10_5 = texture(_LightTexture0, vec2(t16_5)).w;
    //Instruction 90
    //MUL
    t16_2.xyz = vec3(t10_5) * _LightColor0.xyz;
    //Instruction 91
    //MUL
    t16_3.xyz = t16_2.xyz * _SpecColor.xyz;
    //Instruction 92
    //MUL
    t16_2.xyz = t16_2.xyz * t10_4.xyz;
    //Instruction 93
    //MUL
    t16_0.xyz = t16_0.xxx * t16_3.xyz;
    //Instruction 94
    //MAD
    t16_0.xyz = t16_2.xyz * t16_2.www + t16_0.xyz;
    //Instruction 95
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 96
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 97
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 v_3;
  v_3.x = _World2Object[0].x;
  v_3.y = _World2Object[1].x;
  v_3.z = _World2Object[2].x;
  v_3.w = _World2Object[3].x;
  highp vec4 v_4;
  v_4.x = _World2Object[0].y;
  v_4.y = _World2Object[1].y;
  v_4.z = _World2Object[2].y;
  v_4.w = _World2Object[3].y;
  highp vec4 v_5;
  v_5.x = _World2Object[0].z;
  v_5.y = _World2Object[1].z;
  v_5.z = _World2Object[2].z;
  v_5.w = _World2Object[3].z;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(((
    (v_3.xyz * _glesNormal.x)
   + 
    (v_4.xyz * _glesNormal.y)
  ) + (v_5.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 worldViewDir_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  worldViewDir_5 = tmpvar_8;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  mediump vec3 viewDir_10;
  viewDir_10 = worldViewDir_5;
  lowp vec4 c_11;
  lowp vec4 c_12;
  highp float nh_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, normalize(
    (tmpvar_2 + viewDir_10)
  )));
  nh_13 = tmpvar_16;
  mediump float y_17;
  y_17 = (_Shininess * 128.0);
  highp float tmpvar_18;
  tmpvar_18 = (pow (nh_13, y_17) * tmpvar_9.w);
  c_12.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_14)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_18));
  c_12.w = (tmpvar_9.w * _Color.w);
  c_11.w = c_12.w;
  c_11.xyz = c_12.xyz;
  c_3.xyz = c_11.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 546
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 547
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 548
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 549
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 550
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 551
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 552
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 553
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 554
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 555
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 556
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 557
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 558
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 559
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 560
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 561
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 562
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 563
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 564
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 565
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 566
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 567
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 568
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 569
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 570
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp float t15;
mediump float t16_16;
mediump float t16_18;
void main()
{
    //Instruction 521
    //ADD
    t0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 522
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 523
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 524
    //MAD
    t16_1.xyz = t0.xyz * vec3(t15) + _WorldSpaceLightPos0.xyz;
    //Instruction 525
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 526
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 527
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 528
    //DP3
    t16_1.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 529
    //MAX
    t16_1.x = max(t16_1.x, 0.0);
    //Instruction 530
    //LOG
    t16_0.x = log2(t16_1.x);
    //Instruction 531
    //MUL
    t16_1.x = _Shininess * 128.000000;
    //Instruction 532
    //MUL
    t16_0.x = t16_0.x * t16_1.x;
    //Instruction 533
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 534
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 535
    //MUL
    t16_0.x = t16_0.x * t10_1.w;
    //Instruction 536
    //MUL
    t10_2.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 537
    //MUL
    t16_3.xyz = t10_2.xyz * _LightColor0.xyz;
    //Instruction 538
    //MUL
    t16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
    //Instruction 539
    //MUL
    t16_0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 540
    //DP3
    t16_18 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 541
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 542
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 543
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 544
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 545
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 v_3;
  v_3.x = _World2Object[0].x;
  v_3.y = _World2Object[1].x;
  v_3.z = _World2Object[2].x;
  v_3.w = _World2Object[3].x;
  highp vec4 v_4;
  v_4.x = _World2Object[0].y;
  v_4.y = _World2Object[1].y;
  v_4.z = _World2Object[2].y;
  v_4.w = _World2Object[3].y;
  highp vec4 v_5;
  v_5.x = _World2Object[0].z;
  v_5.y = _World2Object[1].z;
  v_5.z = _World2Object[2].z;
  v_5.w = _World2Object[3].z;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(((
    (v_3.xyz * _glesNormal.x)
   + 
    (v_4.xyz * _glesNormal.y)
  ) + (v_5.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 worldViewDir_7;
  lowp vec3 lightDir_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
  lightDir_8 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  worldViewDir_7 = tmpvar_10;
  tmpvar_6 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD2;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12);
  lightCoord_5 = tmpvar_13;
  lowp vec4 tmpvar_14;
  mediump vec2 P_15;
  P_15 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_14 = texture2D (_LightTexture0, P_15);
  highp vec3 LightCoord_16;
  LightCoord_16 = lightCoord_5.xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (LightCoord_16, LightCoord_16);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_LightTextureB0, vec2(tmpvar_17));
  mediump float tmpvar_19;
  tmpvar_19 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_14.w) * tmpvar_18.w);
  atten_4 = tmpvar_19;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_8;
  tmpvar_1 = (tmpvar_1 * atten_4);
  mediump vec3 viewDir_20;
  viewDir_20 = worldViewDir_7;
  lowp vec4 c_21;
  lowp vec4 c_22;
  highp float nh_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_24 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_6, normalize(
    (tmpvar_2 + viewDir_20)
  )));
  nh_23 = tmpvar_26;
  mediump float y_27;
  y_27 = (_Shininess * 128.0);
  highp float tmpvar_28;
  tmpvar_28 = (pow (nh_23, y_27) * tmpvar_11.w);
  c_22.xyz = (((tmpvar_11.xyz * _Color.xyz) * (tmpvar_1 * diff_24)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_28));
  c_22.w = (tmpvar_11.w * _Color.w);
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 166
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 167
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 168
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 169
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 170
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 171
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 172
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 173
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 174
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 175
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 176
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 177
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 178
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 179
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 180
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 181
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 182
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 183
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 184
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 185
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 186
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 187
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 188
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 189
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 190
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec3 t16_2;
lowp float t10_2;
lowp vec4 t10_3;
highp vec3 t4;
mediump vec3 t16_5;
lowp vec3 t10_6;
bool tb9;
mediump float t16_16;
lowp float t10_16;
mediump float t16_21;
mediump float t16_22;
highp float t23;
void main()
{
    //Instruction 123
    //MUL
    t16_0 = vs_TEXCOORD2.yyyy * _LightMatrix0[1];
    //Instruction 124
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD2.xxxx + t16_0;
    //Instruction 125
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD2.zzzz + t16_0;
    //Instruction 126
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 127
    //DIV
    t16_1.xy = t16_0.xy / t16_0.ww;
    //Instruction 128
    //ADD
    t16_1.xy = t16_1.xy + vec2(0.500000, 0.500000);
    //Instruction 129
    //SAMPLE
    t10_2 = texture(_LightTexture0, t16_1.xy).w;
    //Instruction 130
    //LT
    tb9 = 0.0<t16_0.z;
    //Instruction 131
    //DP3
    t16_16 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 132
    //SAMPLE
    t10_16 = texture(_LightTextureB0, vec2(t16_16)).w;
    //Instruction 133
    //MOVC
    t10_3.x = (tb9) ? 1.0 : 0.0;
    //Instruction 134
    //MUL
    t10_3.x = t10_2 * t10_3.x;
    //Instruction 135
    //MUL
    t10_3.x = t10_16 * t10_3.x;
    //Instruction 136
    //MUL
    t16_0.xyz = t10_3.xxx * _LightColor0.xyz;
    //Instruction 137
    //MUL
    t16_1.xyz = t16_0.xyz * _SpecColor.xyz;
    //Instruction 138
    //ADD
    t2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 139
    //DP3
    t23 = dot(t2.xyz, t2.xyz);
    //Instruction 140
    //RSQ
    t23 = inversesqrt(t23);
    //Instruction 141
    //MUL
    t2.xyz = vec3(t23) * t2.xyz;
    //Instruction 142
    //ADD
    t4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 143
    //DP3
    t23 = dot(t4.xyz, t4.xyz);
    //Instruction 144
    //RSQ
    t23 = inversesqrt(t23);
    //Instruction 145
    //MAD
    t16_5.xyz = t4.xyz * vec3(t23) + t2.xyz;
    //Instruction 146
    //DP3
    t16_21 = dot(vs_TEXCOORD1.xyz, t2.xyz);
    //Instruction 147
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 148
    //DP3
    t16_22 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 149
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 150
    //MUL
    t16_5.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 151
    //DP3
    t16_22 = dot(vs_TEXCOORD1.xyz, t16_5.xyz);
    //Instruction 152
    //MAX
    t16_22 = max(t16_22, 0.0);
    //Instruction 153
    //LOG
    t16_2.x = log2(t16_22);
    //Instruction 154
    //MUL
    t16_22 = _Shininess * 128.000000;
    //Instruction 155
    //MUL
    t16_2.x = t16_2.x * t16_22;
    //Instruction 156
    //EXP
    t16_2.x = exp2(t16_2.x);
    //Instruction 157
    //SAMPLE
    t10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 158
    //MUL
    t16_2.x = t16_2.x * t10_3.w;
    //Instruction 159
    //MUL
    t10_6.xyz = t10_3.xyz * _Color.xyz;
    //Instruction 160
    //MUL
    t16_0.xyz = t16_0.xyz * t10_6.xyz;
    //Instruction 161
    //MUL
    t16_2.xyz = t16_1.xyz * t16_2.xxx;
    //Instruction 162
    //MAD
    t16_2.xyz = t16_0.xyz * vec3(t16_21) + t16_2.xyz;
    //Instruction 163
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 164
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 165
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 v_3;
  v_3.x = _World2Object[0].x;
  v_3.y = _World2Object[1].x;
  v_3.z = _World2Object[2].x;
  v_3.w = _World2Object[3].x;
  highp vec4 v_4;
  v_4.x = _World2Object[0].y;
  v_4.y = _World2Object[1].y;
  v_4.z = _World2Object[2].y;
  v_4.w = _World2Object[3].y;
  highp vec4 v_5;
  v_5.x = _World2Object[0].z;
  v_5.y = _World2Object[1].z;
  v_5.z = _World2Object[2].z;
  v_5.w = _World2Object[3].z;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(((
    (v_3.xyz * _glesNormal.x)
   + 
    (v_4.xyz * _glesNormal.y)
  ) + (v_5.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 worldViewDir_5;
  lowp vec3 lightDir_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
  lightDir_6 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  worldViewDir_5 = tmpvar_8;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_LightMatrix0 * tmpvar_10).xyz;
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_11, tmpvar_11);
  lowp float tmpvar_13;
  tmpvar_13 = (texture2D (_LightTextureB0, vec2(tmpvar_12)).w * textureCube (_LightTexture0, tmpvar_11).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_13);
  mediump vec3 viewDir_14;
  viewDir_14 = worldViewDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  highp float nh_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, normalize(
    (tmpvar_2 + viewDir_14)
  )));
  nh_17 = tmpvar_20;
  mediump float y_21;
  y_21 = (_Shininess * 128.0);
  highp float tmpvar_22;
  tmpvar_22 = (pow (nh_17, y_21) * tmpvar_9.w);
  c_16.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_18)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_22));
  c_16.w = (tmpvar_9.w * _Color.w);
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 228
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 229
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 230
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 231
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 232
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 233
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 234
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 235
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 236
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 237
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 238
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 239
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 240
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 241
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 242
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 243
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 244
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 245
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 246
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 247
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 248
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 249
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 250
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 251
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 252
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
highp vec3 t1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump float t16_5;
lowp float t10_5;
lowp float t10_10;
highp float t15;
void main()
{
    //Instruction 191
    //ADD
    t0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 192
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 193
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 194
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 195
    //ADD
    t1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 196
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 197
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 198
    //MAD
    t16_2.xyz = t1.xyz * vec3(t15) + t0.xyz;
    //Instruction 199
    //DP3
    t16_2.w = dot(vs_TEXCOORD1.xyz, t0.xyz);
    //Instruction 200
    //DP3
    t16_3.x = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 201
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 202
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xxx;
    //Instruction 203
    //DP3
    t16_2.x = dot(vs_TEXCOORD1.xyz, t16_2.xyz);
    //Instruction 204
    //MAX
    t16_2.xw = max(t16_2.xw, vec2(0.0, 0.0));
    //Instruction 205
    //LOG
    t16_0.x = log2(t16_2.x);
    //Instruction 206
    //MUL
    t16_2.x = _Shininess * 128.000000;
    //Instruction 207
    //MUL
    t16_0.x = t16_0.x * t16_2.x;
    //Instruction 208
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 209
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 210
    //MUL
    t16_0.x = t16_0.x * t10_1.w;
    //Instruction 211
    //MUL
    t10_4.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 212
    //MUL
    t16_2.xyz = vs_TEXCOORD2.yyy * _LightMatrix0[1].xyz;
    //Instruction 213
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD2.xxx + t16_2.xyz;
    //Instruction 214
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD2.zzz + t16_2.xyz;
    //Instruction 215
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 216
    //DP3
    t16_5 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 217
    //SAMPLE
    t10_10 = texture(_LightTexture0, t16_2.xyz).w;
    //Instruction 218
    //SAMPLE
    t10_5 = texture(_LightTextureB0, vec2(t16_5)).w;
    //Instruction 219
    //MUL
    t16_5 = t10_10 * t10_5;
    //Instruction 220
    //MUL
    t16_2.xyz = vec3(t16_5) * _LightColor0.xyz;
    //Instruction 221
    //MUL
    t16_3.xyz = t16_2.xyz * _SpecColor.xyz;
    //Instruction 222
    //MUL
    t16_2.xyz = t16_2.xyz * t10_4.xyz;
    //Instruction 223
    //MUL
    t16_0.xyz = t16_0.xxx * t16_3.xyz;
    //Instruction 224
    //MAD
    t16_0.xyz = t16_2.xyz * t16_2.www + t16_0.xyz;
    //Instruction 225
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 226
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 227
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 v_3;
  v_3.x = _World2Object[0].x;
  v_3.y = _World2Object[1].x;
  v_3.z = _World2Object[2].x;
  v_3.w = _World2Object[3].x;
  highp vec4 v_4;
  v_4.x = _World2Object[0].y;
  v_4.y = _World2Object[1].y;
  v_4.z = _World2Object[2].y;
  v_4.w = _World2Object[3].y;
  highp vec4 v_5;
  v_5.x = _World2Object[0].z;
  v_5.y = _World2Object[1].z;
  v_5.z = _World2Object[2].z;
  v_5.w = _World2Object[3].z;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(((
    (v_3.xyz * _glesNormal.x)
   + 
    (v_4.xyz * _glesNormal.y)
  ) + (v_5.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 worldViewDir_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  worldViewDir_5 = tmpvar_8;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD2;
  highp vec2 tmpvar_11;
  tmpvar_11 = (_LightMatrix0 * tmpvar_10).xy;
  lowp float tmpvar_12;
  tmpvar_12 = texture2D (_LightTexture0, tmpvar_11).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_12);
  mediump vec3 viewDir_13;
  viewDir_13 = worldViewDir_5;
  lowp vec4 c_14;
  lowp vec4 c_15;
  highp float nh_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, normalize(
    (tmpvar_2 + viewDir_13)
  )));
  nh_16 = tmpvar_19;
  mediump float y_20;
  y_20 = (_Shininess * 128.0);
  highp float tmpvar_21;
  tmpvar_21 = (pow (nh_16, y_20) * tmpvar_9.w);
  c_15.xyz = (((tmpvar_9.xyz * _Color.xyz) * (tmpvar_1 * diff_17)) + ((tmpvar_1 * _SpecColor.xyz) * tmpvar_21));
  c_15.w = (tmpvar_9.w * _Color.w);
  c_14.w = c_15.w;
  c_14.xyz = c_15.xyz;
  c_3.xyz = c_14.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 602
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 603
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 604
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 605
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 606
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 607
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 608
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 609
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 610
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 611
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 612
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 613
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 614
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 615
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 616
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 617
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 618
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 619
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 620
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 621
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 622
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 623
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 624
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 625
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 626
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp float t10_5;
highp float t15;
mediump float t16_16;
mediump float t16_18;
void main()
{
    //Instruction 571
    //ADD
    t0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 572
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 573
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 574
    //MAD
    t16_1.xyz = t0.xyz * vec3(t15) + _WorldSpaceLightPos0.xyz;
    //Instruction 575
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 576
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 577
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 578
    //DP3
    t16_1.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 579
    //MAX
    t16_1.x = max(t16_1.x, 0.0);
    //Instruction 580
    //LOG
    t16_0.x = log2(t16_1.x);
    //Instruction 581
    //MUL
    t16_1.x = _Shininess * 128.000000;
    //Instruction 582
    //MUL
    t16_0.x = t16_0.x * t16_1.x;
    //Instruction 583
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 584
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 585
    //MUL
    t16_0.x = t16_0.x * t10_1.w;
    //Instruction 586
    //MUL
    t10_2.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 587
    //MUL
    t16_3.xy = vs_TEXCOORD2.yy * _LightMatrix0[1].xy;
    //Instruction 588
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD2.xx + t16_3.xy;
    //Instruction 589
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD2.zz + t16_3.xy;
    //Instruction 590
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 591
    //SAMPLE
    t10_5 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 592
    //MUL
    t16_3.xyz = vec3(t10_5) * _LightColor0.xyz;
    //Instruction 593
    //MUL
    t16_4.xyz = t16_3.xyz * _SpecColor.xyz;
    //Instruction 594
    //MUL
    t16_3.xyz = t10_2.xyz * t16_3.xyz;
    //Instruction 595
    //MUL
    t16_0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 596
    //DP3
    t16_18 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 597
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 598
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 599
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 600
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 601
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "RenderType"="Opaque" }
  GpuProgramID 164884
Program "vp" {
SubProgram "gles " {
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 v_3;
  v_3.x = _World2Object[0].x;
  v_3.y = _World2Object[1].x;
  v_3.z = _World2Object[2].x;
  v_3.w = _World2Object[3].x;
  highp vec4 v_4;
  v_4.x = _World2Object[0].y;
  v_4.y = _World2Object[1].y;
  v_4.z = _World2Object[2].y;
  v_4.w = _World2Object[3].y;
  highp vec4 v_5;
  v_5.x = _World2Object[0].z;
  v_5.y = _World2Object[1].z;
  v_5.z = _World2Object[2].z;
  v_5.w = _World2Object[3].z;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(((
    (v_3.xyz * _glesNormal.x)
   + 
    (v_4.xyz * _glesNormal.y)
  ) + (v_5.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 256
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 257
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 258
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 259
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 260
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 261
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 262
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 263
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 264
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 265
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 266
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 267
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 268
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 269
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 270
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 271
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 272
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 273
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 274
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 275
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 276
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 277
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 278
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 279
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in mediump vec3 vs_TEXCOORD0;
layout(location = 0) out lowp vec4 SV_Target0;
void main()
{
    //Instruction 253
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 254
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 255
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "RenderType"="Opaque" }
  ZWrite Off
  GpuProgramID 242677
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = vec2(0.0, 0.0);
  highp vec4 v_7;
  v_7.x = _World2Object[0].x;
  v_7.y = _World2Object[1].x;
  v_7.z = _World2Object[2].x;
  v_7.w = _World2Object[3].x;
  highp vec4 v_8;
  v_8.x = _World2Object[0].y;
  v_8.y = _World2Object[1].y;
  v_8.z = _World2Object[2].y;
  v_8.w = _World2Object[3].y;
  highp vec4 v_9;
  v_9.x = _World2Object[0].z;
  v_9.y = _World2Object[1].z;
  v_9.z = _World2Object[2].z;
  v_9.w = _World2Object[3].z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalize(((
    (v_7.xyz * _glesNormal.x)
   + 
    (v_8.xyz * _glesNormal.y)
  ) + (v_9.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_11;
  mediump vec4 normal_12;
  normal_12 = tmpvar_10;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, normal_12);
  x1_14.y = dot (unity_SHAg, normal_12);
  x1_14.z = dot (unity_SHAb, normal_12);
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_12.xyzz * normal_12.yzzx);
  x2_13.x = dot (unity_SHBr, tmpvar_15);
  x2_13.y = dot (unity_SHBg, tmpvar_15);
  x2_13.z = dot (unity_SHBb, tmpvar_15);
  tmpvar_11 = ((x2_13 + (unity_SHC.xyz * 
    ((normal_12.x * normal_12.x) - (normal_12.y * normal_12.y))
  )) + x1_14);
  tmpvar_3 = tmpvar_11;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_5;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_6;
  lowp float spec_7;
  mediump float tmpvar_8;
  tmpvar_8 = (light_3.w * tmpvar_4.w);
  spec_7 = tmpvar_8;
  c_6.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_7));
  c_6.w = (tmpvar_4.w * _Color.w);
  c_2.xyz = c_6.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 294
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 295
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 296
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 297
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 298
    //MOV
    gl_Position = t0;
    //Instruction 299
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 300
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 301
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 302
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 303
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 304
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 305
    //MUL
    t1.xzw = t0.xwy * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 306
    //MOV
    vs_TEXCOORD2.zw = t0.zw;
    //Instruction 307
    //ADD
    vs_TEXCOORD2.xy = t1.zz + t1.xw;
    //Instruction 308
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 309
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 310
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 311
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 312
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 313
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 314
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 315
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 316
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 317
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 318
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 319
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 320
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 321
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 322
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 323
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 324
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 325
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 326
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 327
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 328
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 329
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 330
    //MOV
    t0.w = 1.0;
    //Instruction 331
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 332
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 333
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 334
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 335
    //MOV
    vs_TEXCOORD4.xyz = t16_2.xyz;
    //Instruction 336
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec2 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec4 t10_1;
mediump vec3 t16_2;
highp vec3 t3;
lowp vec3 t10_4;
mediump vec3 t16_7;
void main()
{
    //Instruction 280
    //DIV
    t0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    //Instruction 281
    //SAMPLE
    t10_0 = texture(_LightBuffer, t0.xy);
    //Instruction 282
    //MAX
    t16_0 = max(t10_0, vec4(0.001000, 0.001000, 0.001000, 0.001000));
    //Instruction 283
    //LOG
    t16_0 = log2(t16_0);
    //Instruction 284
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 285
    //MUL
    t16_2.x = (-t16_0.w) * t10_1.w;
    //Instruction 286
    //ADD
    t3.xyz = (-t16_0.xyz) + vs_TEXCOORD4.xyz;
    //Instruction 287
    //MUL
    t10_4.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 288
    //MUL
    t16_7.xyz = t3.xyz * _SpecColor.xyz;
    //Instruction 289
    //MUL
    t16_2.xyz = t16_2.xxx * t16_7.xyz;
    //Instruction 290
    //MAD
    t16_2.xyz = t10_4.xyz * t3.xyz + t16_2.xyz;
    //Instruction 291
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 292
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 293
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  tmpvar_2.xy = vec2(0.0, 0.0);
  highp vec4 v_7;
  v_7.x = _World2Object[0].x;
  v_7.y = _World2Object[1].x;
  v_7.z = _World2Object[2].x;
  v_7.w = _World2Object[3].x;
  highp vec4 v_8;
  v_8.x = _World2Object[0].y;
  v_8.y = _World2Object[1].y;
  v_8.z = _World2Object[2].y;
  v_8.w = _World2Object[3].y;
  highp vec4 v_9;
  v_9.x = _World2Object[0].z;
  v_9.y = _World2Object[1].z;
  v_9.z = _World2Object[2].z;
  v_9.w = _World2Object[3].z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalize(((
    (v_7.xyz * _glesNormal.x)
   + 
    (v_8.xyz * _glesNormal.y)
  ) + (v_9.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_11;
  mediump vec4 normal_12;
  normal_12 = tmpvar_10;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, normal_12);
  x1_14.y = dot (unity_SHAg, normal_12);
  x1_14.z = dot (unity_SHAb, normal_12);
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_12.xyzz * normal_12.yzzx);
  x2_13.x = dot (unity_SHBr, tmpvar_15);
  x2_13.y = dot (unity_SHBg, tmpvar_15);
  x2_13.z = dot (unity_SHBb, tmpvar_15);
  tmpvar_11 = ((x2_13 + (unity_SHC.xyz * 
    ((normal_12.x * normal_12.x) - (normal_12.y * normal_12.y))
  )) + x1_14);
  tmpvar_3 = tmpvar_11;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_5;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
  light_3.xyz = (light_3.xyz + pow ((
    (unity_DynamicLightmap_HDR.x * tmpvar_6.w)
   * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy));
  lowp vec4 c_7;
  lowp float spec_8;
  mediump float tmpvar_9;
  tmpvar_9 = (light_3.w * tmpvar_4.w);
  spec_8 = tmpvar_9;
  c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
  c_7.w = (tmpvar_4.w * _Color.w);
  c_2.xyz = c_7.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 648
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 649
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 650
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 651
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 652
    //MOV
    gl_Position = t0;
    //Instruction 653
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 654
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 655
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 656
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 657
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 658
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 659
    //MUL
    t1.xzw = t0.xwy * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 660
    //MOV
    vs_TEXCOORD2.zw = t0.zw;
    //Instruction 661
    //ADD
    vs_TEXCOORD2.xy = t1.zz + t1.xw;
    //Instruction 662
    //MAD
    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 663
    //MOV
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    //Instruction 664
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 665
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 666
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 667
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 668
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 669
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 670
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 671
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 672
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 673
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 674
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 675
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 676
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 677
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 678
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 679
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 680
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 681
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 682
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 683
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 684
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 685
    //MOV
    t0.w = 1.0;
    //Instruction 686
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 687
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 688
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 689
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 690
    //MOV
    vs_TEXCOORD4.xyz = t16_2.xyz;
    //Instruction 691
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
uniform lowp sampler2D unity_DynamicLightmap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec2 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
highp vec3 t2;
lowp vec4 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump float t16_16;
void main()
{
    //Instruction 627
    //SAMPLE
    t10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
    //Instruction 628
    //MUL
    t16_1.x = t10_0.w * unity_DynamicLightmap_HDR.x;
    //Instruction 629
    //MUL
    t16_1.xyz = t10_0.xyz * t16_1.xxx;
    //Instruction 630
    //LOG
    t16_1.xyz = log2(t16_1.xyz);
    //Instruction 631
    //MUL
    t16_1.xyz = t16_1.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 632
    //EXP
    t16_1.xyz = exp2(t16_1.xyz);
    //Instruction 633
    //DIV
    t0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    //Instruction 634
    //SAMPLE
    t10_0 = texture(_LightBuffer, t0.xy);
    //Instruction 635
    //MAX
    t16_0 = max(t10_0, vec4(0.001000, 0.001000, 0.001000, 0.001000));
    //Instruction 636
    //LOG
    t16_0 = log2(t16_0);
    //Instruction 637
    //ADD
    t2.xyz = (-t16_0.xyz) + vs_TEXCOORD4.xyz;
    //Instruction 638
    //ADD
    t16_1.xyz = t16_1.xyz + t2.xyz;
    //Instruction 639
    //MUL
    t16_3.xyz = t16_1.xyz * _SpecColor.xyz;
    //Instruction 640
    //SAMPLE
    t10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 641
    //MUL
    t16_16 = (-t16_0.w) * t10_2.w;
    //Instruction 642
    //MUL
    t10_4.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 643
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 644
    //MAD
    t16_1.xyz = t10_4.xyz * t16_1.xyz + t16_3.xyz;
    //Instruction 645
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 646
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 647
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = vec2(0.0, 0.0);
  highp vec4 v_7;
  v_7.x = _World2Object[0].x;
  v_7.y = _World2Object[1].x;
  v_7.z = _World2Object[2].x;
  v_7.w = _World2Object[3].x;
  highp vec4 v_8;
  v_8.x = _World2Object[0].y;
  v_8.y = _World2Object[1].y;
  v_8.z = _World2Object[2].y;
  v_8.w = _World2Object[3].y;
  highp vec4 v_9;
  v_9.x = _World2Object[0].z;
  v_9.y = _World2Object[1].z;
  v_9.z = _World2Object[2].z;
  v_9.w = _World2Object[3].z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalize(((
    (v_7.xyz * _glesNormal.x)
   + 
    (v_8.xyz * _glesNormal.y)
  ) + (v_9.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_11;
  mediump vec4 normal_12;
  normal_12 = tmpvar_10;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, normal_12);
  x1_14.y = dot (unity_SHAg, normal_12);
  x1_14.z = dot (unity_SHAb, normal_12);
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_12.xyzz * normal_12.yzzx);
  x2_13.x = dot (unity_SHBr, tmpvar_15);
  x2_13.y = dot (unity_SHBg, tmpvar_15);
  x2_13.z = dot (unity_SHBb, tmpvar_15);
  tmpvar_11 = ((x2_13 + (unity_SHC.xyz * 
    ((normal_12.x * normal_12.x) - (normal_12.y * normal_12.y))
  )) + x1_14);
  tmpvar_3 = tmpvar_11;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_6.w;
  light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
  lowp vec4 c_7;
  lowp float spec_8;
  mediump float tmpvar_9;
  tmpvar_9 = (tmpvar_6.w * tmpvar_4.w);
  spec_8 = tmpvar_9;
  c_7.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_8));
  c_7.w = (tmpvar_4.w * _Color.w);
  c_2.xyz = c_7.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 705
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 706
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 707
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 708
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 709
    //MOV
    gl_Position = t0;
    //Instruction 710
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 711
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 712
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 713
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 714
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 715
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 716
    //MUL
    t1.xzw = t0.xwy * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 717
    //MOV
    vs_TEXCOORD2.zw = t0.zw;
    //Instruction 718
    //ADD
    vs_TEXCOORD2.xy = t1.zz + t1.xw;
    //Instruction 719
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 720
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 721
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 722
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 723
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 724
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 725
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 726
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 727
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 728
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 729
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 730
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 731
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 732
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 733
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 734
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 735
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 736
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 737
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 738
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 739
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 740
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 741
    //MOV
    t0.w = 1.0;
    //Instruction 742
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 743
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 744
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 745
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 746
    //MOV
    vs_TEXCOORD4.xyz = t16_2.xyz;
    //Instruction 747
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec2 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec4 t10_1;
mediump vec3 t16_2;
highp vec3 t3;
lowp vec3 t10_4;
mediump vec3 t16_7;
void main()
{
    //Instruction 692
    //DIV
    t0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    //Instruction 693
    //SAMPLE
    t10_0 = texture(_LightBuffer, t0.xy);
    //Instruction 694
    //MAX
    t16_0 = max(t10_0, vec4(0.001000, 0.001000, 0.001000, 0.001000));
    //Instruction 695
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 696
    //MUL
    t16_2.x = t16_0.w * t10_1.w;
    //Instruction 697
    //ADD
    t3.xyz = t16_0.xyz + vs_TEXCOORD4.xyz;
    //Instruction 698
    //MUL
    t10_4.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 699
    //MUL
    t16_7.xyz = t3.xyz * _SpecColor.xyz;
    //Instruction 700
    //MUL
    t16_2.xyz = t16_2.xxx * t16_7.xyz;
    //Instruction 701
    //MAD
    t16_2.xyz = t10_4.xyz * t3.xyz + t16_2.xyz;
    //Instruction 702
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 703
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 704
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  tmpvar_2.xy = vec2(0.0, 0.0);
  highp vec4 v_7;
  v_7.x = _World2Object[0].x;
  v_7.y = _World2Object[1].x;
  v_7.z = _World2Object[2].x;
  v_7.w = _World2Object[3].x;
  highp vec4 v_8;
  v_8.x = _World2Object[0].y;
  v_8.y = _World2Object[1].y;
  v_8.z = _World2Object[2].y;
  v_8.w = _World2Object[3].y;
  highp vec4 v_9;
  v_9.x = _World2Object[0].z;
  v_9.y = _World2Object[1].z;
  v_9.z = _World2Object[2].z;
  v_9.w = _World2Object[3].z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalize(((
    (v_7.xyz * _glesNormal.x)
   + 
    (v_8.xyz * _glesNormal.y)
  ) + (v_9.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_11;
  mediump vec4 normal_12;
  normal_12 = tmpvar_10;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, normal_12);
  x1_14.y = dot (unity_SHAg, normal_12);
  x1_14.z = dot (unity_SHAb, normal_12);
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_12.xyzz * normal_12.yzzx);
  x2_13.x = dot (unity_SHBr, tmpvar_15);
  x2_13.y = dot (unity_SHBg, tmpvar_15);
  x2_13.z = dot (unity_SHBb, tmpvar_15);
  tmpvar_11 = ((x2_13 + (unity_SHC.xyz * 
    ((normal_12.x * normal_12.x) - (normal_12.y * normal_12.y))
  )) + x1_14);
  tmpvar_3 = tmpvar_11;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_6.w;
  light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
  light_3.xyz = (light_3.xyz + pow ((
    (unity_DynamicLightmap_HDR.x * tmpvar_7.w)
   * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy));
  lowp vec4 c_8;
  lowp float spec_9;
  mediump float tmpvar_10;
  tmpvar_10 = (tmpvar_6.w * tmpvar_4.w);
  spec_9 = tmpvar_10;
  c_8.xyz = (((tmpvar_4.xyz * _Color.xyz) * light_3.xyz) + ((light_3.xyz * _SpecColor.xyz) * spec_9));
  c_8.w = (tmpvar_4.w * _Color.w);
  c_2.xyz = c_8.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 357
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 358
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 359
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 360
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 361
    //MOV
    gl_Position = t0;
    //Instruction 362
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 363
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 364
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 365
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 366
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 367
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 368
    //MUL
    t1.xzw = t0.xwy * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 369
    //MOV
    vs_TEXCOORD2.zw = t0.zw;
    //Instruction 370
    //ADD
    vs_TEXCOORD2.xy = t1.zz + t1.xw;
    //Instruction 371
    //MAD
    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 372
    //MOV
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    //Instruction 373
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 374
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 375
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 376
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 377
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 378
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 379
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 380
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 381
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 382
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 383
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 384
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 385
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 386
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 387
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 388
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 389
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 390
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 391
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 392
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 393
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 394
    //MOV
    t0.w = 1.0;
    //Instruction 395
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 396
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 397
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 398
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 399
    //MOV
    vs_TEXCOORD4.xyz = t16_2.xyz;
    //Instruction 400
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
uniform lowp sampler2D unity_DynamicLightmap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec2 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
highp vec3 t2;
lowp vec4 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump float t16_16;
void main()
{
    //Instruction 337
    //SAMPLE
    t10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
    //Instruction 338
    //MUL
    t16_1.x = t10_0.w * unity_DynamicLightmap_HDR.x;
    //Instruction 339
    //MUL
    t16_1.xyz = t10_0.xyz * t16_1.xxx;
    //Instruction 340
    //LOG
    t16_1.xyz = log2(t16_1.xyz);
    //Instruction 341
    //MUL
    t16_1.xyz = t16_1.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 342
    //EXP
    t16_1.xyz = exp2(t16_1.xyz);
    //Instruction 343
    //DIV
    t0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    //Instruction 344
    //SAMPLE
    t10_0 = texture(_LightBuffer, t0.xy);
    //Instruction 345
    //MAX
    t16_0 = max(t10_0, vec4(0.001000, 0.001000, 0.001000, 0.001000));
    //Instruction 346
    //ADD
    t2.xyz = t16_0.xyz + vs_TEXCOORD4.xyz;
    //Instruction 347
    //ADD
    t16_1.xyz = t16_1.xyz + t2.xyz;
    //Instruction 348
    //MUL
    t16_3.xyz = t16_1.xyz * _SpecColor.xyz;
    //Instruction 349
    //SAMPLE
    t10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 350
    //MUL
    t16_16 = t16_0.w * t10_2.w;
    //Instruction 351
    //MUL
    t10_4.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 352
    //MUL
    t16_3.xyz = vec3(t16_16) * t16_3.xyz;
    //Instruction 353
    //MAD
    t16_1.xyz = t10_4.xyz * t16_1.xyz + t16_3.xyz;
    //Instruction 354
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 355
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 356
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="Deferred" "RenderType"="Opaque" }
  GpuProgramID 313145
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 v_4;
  v_4.x = _World2Object[0].x;
  v_4.y = _World2Object[1].x;
  v_4.z = _World2Object[2].x;
  v_4.w = _World2Object[3].x;
  highp vec4 v_5;
  v_5.x = _World2Object[0].y;
  v_5.y = _World2Object[1].y;
  v_5.z = _World2Object[2].y;
  v_5.w = _World2Object[3].y;
  highp vec4 v_6;
  v_6.x = _World2Object[0].z;
  v_6.y = _World2Object[1].z;
  v_6.z = _World2Object[2].z;
  v_6.w = _World2Object[3].z;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(((
    (v_4.xyz * _glesNormal.x)
   + 
    (v_5.xyz * _glesNormal.y)
  ) + (v_6.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = worldNormal_1;
  mediump vec4 normal_9;
  normal_9 = tmpvar_8;
  mediump vec3 x2_10;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, normal_9);
  x1_11.y = dot (unity_SHAg, normal_9);
  x1_11.z = dot (unity_SHAb, normal_9);
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_9.xyzz * normal_9.yzzx);
  x2_10.x = dot (unity_SHBr, tmpvar_12);
  x2_10.y = dot (unity_SHBg, tmpvar_12);
  x2_10.z = dot (unity_SHBb, tmpvar_12);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((x2_10 + (unity_SHC.xyz * 
    ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y))
  )) + x1_11);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0).xyz * _Color.xyz);
  mediump vec4 outDiffuseOcclusion_5;
  mediump vec4 outNormal_6;
  mediump vec4 emission_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_4;
  outDiffuseOcclusion_5 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.xyz = _SpecColor.xyz;
  tmpvar_9.w = _Shininess;
  lowp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_6 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = vec3(0.0, 0.0, 0.0);
  emission_7 = tmpvar_11;
  emission_7.xyz = (emission_7.xyz + (tmpvar_4 * xlv_TEXCOORD5));
  outDiffuse_1.xyz = outDiffuseOcclusion_5.xyz;
  outEmission_2.w = emission_7.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_7.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = tmpvar_9;
  gl_FragData[2] = outNormal_6;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 414
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 415
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 416
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 417
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 418
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 419
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 420
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 421
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 422
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 423
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 424
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 425
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 426
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 427
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 428
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 429
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 430
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 431
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 432
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 433
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 434
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 435
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 436
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 437
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 438
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 439
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 440
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 441
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 442
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 443
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 444
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 445
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 446
    //MOV
    t0.w = 1.0;
    //Instruction 447
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 448
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 449
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 450
    //ADD
    vs_TEXCOORD5.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 451
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
lowp vec3 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
void main()
{
    //Instruction 401
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 402
    //MUL
    t10_1.xyz = t10_0.xyz * _Color.xyz;
    //Instruction 403
    //MOV
    SV_Target0.xyz = t10_1.xyz;
    //Instruction 404
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD5.xyz;
    //Instruction 405
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 406
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 407
    //MOV
    SV_Target1.xyz = _SpecColor.xyz;
    //Instruction 408
    //MOV
    SV_Target1.w = _Shininess;
    //Instruction 409
    //MAD
    t10_1.xyz = vs_TEXCOORD1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 410
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 411
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 412
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 413
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 v_4;
  v_4.x = _World2Object[0].x;
  v_4.y = _World2Object[1].x;
  v_4.z = _World2Object[2].x;
  v_4.w = _World2Object[3].x;
  highp vec4 v_5;
  v_5.x = _World2Object[0].y;
  v_5.y = _World2Object[1].y;
  v_5.z = _World2Object[2].y;
  v_5.w = _World2Object[3].y;
  highp vec4 v_6;
  v_6.x = _World2Object[0].z;
  v_6.y = _World2Object[1].z;
  v_6.z = _World2Object[2].z;
  v_6.w = _World2Object[3].z;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(((
    (v_4.xyz * _glesNormal.x)
   + 
    (v_5.xyz * _glesNormal.y)
  ) + (v_6.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  tmpvar_3.xy = vec2(0.0, 0.0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0).xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
  mediump vec4 outDiffuseOcclusion_6;
  mediump vec4 outNormal_7;
  mediump vec4 emission_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_4;
  outDiffuseOcclusion_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10.xyz = _SpecColor.xyz;
  tmpvar_10.w = _Shininess;
  lowp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_7 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = vec3(0.0, 0.0, 0.0);
  emission_8 = tmpvar_12;
  emission_8.xyz = (emission_8.xyz + (tmpvar_4 * pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_5.w) * tmpvar_5.xyz)
  , unity_DynamicLightmap_HDR.yyy)));
  outDiffuse_1.xyz = outDiffuseOcclusion_6.xyz;
  outEmission_2.w = emission_8.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_8.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = tmpvar_10;
  gl_FragData[2] = outNormal_7;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 767
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 768
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 769
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 770
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 771
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 772
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 773
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 774
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 775
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 776
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 777
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 778
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 779
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 780
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 781
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 782
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 783
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 784
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 785
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 786
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 787
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 788
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 789
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 790
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 791
    //MAD
    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 792
    //MOV
    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
    //Instruction 793
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_DynamicLightmap;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
lowp vec4 t10_0;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 748
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 749
    //MUL
    t10_1.xyz = t10_0.xyz * _Color.xyz;
    //Instruction 750
    //MOV
    SV_Target0.xyz = t10_1.xyz;
    //Instruction 751
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 752
    //MOV
    SV_Target1.xyz = _SpecColor.xyz;
    //Instruction 753
    //MOV
    SV_Target1.w = _Shininess;
    //Instruction 754
    //MAD
    t10_2.xyz = vs_TEXCOORD1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 755
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 756
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 757
    //SAMPLE
    t10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
    //Instruction 758
    //MUL
    t16_3.x = t10_0.w * unity_DynamicLightmap_HDR.x;
    //Instruction 759
    //MUL
    t16_3.xyz = t10_0.xyz * t16_3.xxx;
    //Instruction 760
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 761
    //MUL
    t16_3.xyz = t16_3.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 762
    //EXP
    t16_3.xyz = exp2(t16_3.xyz);
    //Instruction 763
    //MUL
    t16_3.xyz = t10_1.xyz * t16_3.xyz;
    //Instruction 764
    //EXP
    SV_Target3.xyz = exp2((-t16_3.xyz));
    //Instruction 765
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 766
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 v_4;
  v_4.x = _World2Object[0].x;
  v_4.y = _World2Object[1].x;
  v_4.z = _World2Object[2].x;
  v_4.w = _World2Object[3].x;
  highp vec4 v_5;
  v_5.x = _World2Object[0].y;
  v_5.y = _World2Object[1].y;
  v_5.z = _World2Object[2].y;
  v_5.w = _World2Object[3].y;
  highp vec4 v_6;
  v_6.x = _World2Object[0].z;
  v_6.y = _World2Object[1].z;
  v_6.z = _World2Object[2].z;
  v_6.w = _World2Object[3].z;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(((
    (v_4.xyz * _glesNormal.x)
   + 
    (v_5.xyz * _glesNormal.y)
  ) + (v_6.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = worldNormal_1;
  mediump vec4 normal_9;
  normal_9 = tmpvar_8;
  mediump vec3 x2_10;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, normal_9);
  x1_11.y = dot (unity_SHAg, normal_9);
  x1_11.z = dot (unity_SHAb, normal_9);
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_9.xyzz * normal_9.yzzx);
  x2_10.x = dot (unity_SHBr, tmpvar_12);
  x2_10.y = dot (unity_SHBg, tmpvar_12);
  x2_10.z = dot (unity_SHBb, tmpvar_12);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((x2_10 + (unity_SHC.xyz * 
    ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y))
  )) + x1_11);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0).xyz * _Color.xyz);
  mediump vec4 outDiffuseOcclusion_4;
  mediump vec4 outNormal_5;
  mediump vec4 emission_6;
  lowp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_3;
  outDiffuseOcclusion_4 = tmpvar_7;
  mediump vec4 tmpvar_8;
  tmpvar_8.xyz = _SpecColor.xyz;
  tmpvar_8.w = _Shininess;
  lowp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = vec3(0.0, 0.0, 0.0);
  emission_6 = tmpvar_10;
  emission_6.xyz = (emission_6.xyz + (tmpvar_3 * xlv_TEXCOORD5));
  outDiffuse_1.xyz = outDiffuseOcclusion_4.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = tmpvar_8;
  gl_FragData[2] = outNormal_5;
  gl_FragData[3] = emission_6;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 806
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 807
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 808
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 809
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 810
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 811
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 812
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 813
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 814
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 815
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 816
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 817
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 818
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 819
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 820
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 821
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 822
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 823
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 824
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 825
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 826
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 827
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 828
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 829
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 830
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 831
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 832
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 833
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 834
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 835
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 836
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 837
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 838
    //MOV
    t0.w = 1.0;
    //Instruction 839
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 840
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 841
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 842
    //ADD
    vs_TEXCOORD5.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 843
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
lowp vec3 t10_0;
lowp vec3 t10_1;
void main()
{
    //Instruction 794
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 795
    //MUL
    t10_1.xyz = t10_0.xyz * _Color.xyz;
    //Instruction 796
    //MOV
    SV_Target0.xyz = t10_1.xyz;
    //Instruction 797
    //MUL
    SV_Target3.xyz = t10_1.xyz * vs_TEXCOORD5.xyz;
    //Instruction 798
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 799
    //MOV
    SV_Target1.xyz = _SpecColor.xyz;
    //Instruction 800
    //MOV
    SV_Target1.w = _Shininess;
    //Instruction 801
    //MAD
    t10_1.xyz = vs_TEXCOORD1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 802
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 803
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 804
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 805
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 v_4;
  v_4.x = _World2Object[0].x;
  v_4.y = _World2Object[1].x;
  v_4.z = _World2Object[2].x;
  v_4.w = _World2Object[3].x;
  highp vec4 v_5;
  v_5.x = _World2Object[0].y;
  v_5.y = _World2Object[1].y;
  v_5.z = _World2Object[2].y;
  v_5.w = _World2Object[3].y;
  highp vec4 v_6;
  v_6.x = _World2Object[0].z;
  v_6.y = _World2Object[1].z;
  v_6.z = _World2Object[2].z;
  v_6.w = _World2Object[3].z;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(((
    (v_4.xyz * _glesNormal.x)
   + 
    (v_5.xyz * _glesNormal.y)
  ) + (v_6.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  tmpvar_3.xy = vec2(0.0, 0.0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _SpecColor;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0).xyz * _Color.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
  mediump vec4 outDiffuseOcclusion_5;
  mediump vec4 outNormal_6;
  mediump vec4 emission_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_3;
  outDiffuseOcclusion_5 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.xyz = _SpecColor.xyz;
  tmpvar_9.w = _Shininess;
  lowp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_6 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = vec3(0.0, 0.0, 0.0);
  emission_7 = tmpvar_11;
  emission_7.xyz = (emission_7.xyz + (tmpvar_3 * pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_4.w) * tmpvar_4.xyz)
  , unity_DynamicLightmap_HDR.yyy)));
  outDiffuse_1.xyz = outDiffuseOcclusion_5.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = tmpvar_9;
  gl_FragData[2] = outNormal_6;
  gl_FragData[3] = emission_7;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 470
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 471
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 472
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 473
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 474
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 475
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 476
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 477
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 478
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 479
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 480
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 481
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 482
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 483
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 484
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 485
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 486
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 487
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 488
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 489
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 490
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 491
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 492
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 493
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 494
    //MAD
    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 495
    //MOV
    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
    //Instruction 496
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_DynamicLightmap;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
lowp vec4 t10_0;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 452
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 453
    //MUL
    t10_1.xyz = t10_0.xyz * _Color.xyz;
    //Instruction 454
    //MOV
    SV_Target0.xyz = t10_1.xyz;
    //Instruction 455
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 456
    //MOV
    SV_Target1.xyz = _SpecColor.xyz;
    //Instruction 457
    //MOV
    SV_Target1.w = _Shininess;
    //Instruction 458
    //MAD
    t10_2.xyz = vs_TEXCOORD1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 459
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 460
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 461
    //SAMPLE
    t10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
    //Instruction 462
    //MUL
    t16_3.x = t10_0.w * unity_DynamicLightmap_HDR.x;
    //Instruction 463
    //MUL
    t16_3.xyz = t10_0.xyz * t16_3.xxx;
    //Instruction 464
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 465
    //MUL
    t16_3.xyz = t16_3.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 466
    //EXP
    t16_3.xyz = exp2(t16_3.xyz);
    //Instruction 467
    //MUL
    SV_Target3.xyz = t10_1.xyz * t16_3.xyz;
    //Instruction 468
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 469
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "META"
  Tags { "LIGHTMODE"="Meta" "RenderType"="Opaque" }
  Cull Off
  GpuProgramID 343251
Program "vp" {
SubProgram "gles " {
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform bvec4 unity_MetaVertexControl;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  highp vec4 vertex_1;
  vertex_1 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_1.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_2;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_2 = 0.0001;
    } else {
      tmpvar_2 = 0.0;
    };
    vertex_1.z = tmpvar_2;
  };
  if (unity_MetaVertexControl.y) {
    vertex_1.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_3;
    if ((vertex_1.z > 0.0)) {
      tmpvar_3 = 0.0001;
    } else {
      tmpvar_3 = 0.0;
    };
    vertex_1.z = tmpvar_3;
  };
  gl_Position = (glstate_matrix_mvp * vertex_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0).xyz * _Color.xyz);
  tmpvar_2 = tmpvar_3;
  mediump vec4 res_4;
  res_4 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_5;
    tmpvar_5.w = 1.0;
    tmpvar_5.xyz = tmpvar_2;
    res_4.w = tmpvar_5.w;
    highp vec3 tmpvar_6;
    tmpvar_6 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_4.xyz = tmpvar_6;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_7;
    if (bool(unity_UseLinearSpace)) {
      emission_7 = vec3(0.0, 0.0, 0.0);
    } else {
      emission_7 = vec3(0.0, 0.0, 0.0);
    };
    mediump vec4 tmpvar_8;
    highp vec4 rgbm_9;
    highp vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = (emission_7 * 0.01030928);
    rgbm_9.xyz = tmpvar_10.xyz;
    rgbm_9.w = max (max (tmpvar_10.x, tmpvar_10.y), max (tmpvar_10.z, 0.02));
    rgbm_9.w = (ceil((rgbm_9.w * 255.0)) / 255.0);
    rgbm_9.w = max (rgbm_9.w, 0.02);
    rgbm_9.xyz = (tmpvar_10.xyz / rgbm_9.w);
    tmpvar_8 = rgbm_9;
    res_4 = tmpvar_8;
  };
  tmpvar_1 = res_4;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float unity_UseLinearSpace;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
bool tb0;
highp vec4 t1;
bool tb6;
void main()
{
    //Instruction 509
    //LT
    tb0 = 0.0<in_POSITION0.z;
    //Instruction 510
    //AND
    t0.z = tb0 ? 0.000100 : float(0.0);
    //Instruction 511
    //MAD
    t0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    //Instruction 512
    //MOVC
    t0.xyz = (unity_MetaVertexControl.x) ? t0.xyz : in_POSITION0.xyz;
    //Instruction 513
    //LT
    tb6 = 0.0<t0.z;
    //Instruction 514
    //AND
    t1.z = tb6 ? 0.000100 : float(0.0);
    //Instruction 515
    //MAD
    t1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 516
    //MOVC
    t0.xyz = (unity_MetaVertexControl.y) ? t1.xyz : t0.xyz;
    //Instruction 517
    //MUL
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 518
    //MAD
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    //Instruction 519
    //MAD
    t0 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    //Instruction 520
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 521
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 522
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 523
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 524
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 525
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 526
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float unity_UseLinearSpace;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec3 t10_0;
lowp vec3 t10_1;
highp float t6;
void main()
{
    //Instruction 497
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 498
    //MUL
    t10_1.xyz = t10_0.xyz * _Color.xyz;
    //Instruction 499
    //LOG
    t16_0.xyz = log2(t10_1.xyz);
    //Instruction 500
    //MOV
    t6 = unity_OneOverOutputBoost;
    t6 = clamp(t6, 0.0, 1.0);
    //Instruction 501
    //MUL
    t0.xyz = t16_0.xyz * vec3(t6);
    //Instruction 502
    //EXP
    t0.xyz = exp2(t0.xyz);
    //Instruction 503
    //MIN
    t0.xyz = min(t0.xyz, vec3(unity_MaxOutputValue));
    //Instruction 504
    //MOVC
    t16_0.xyz = (unity_MetaFragmentControl.x) ? t0.xyz : vec3(0.0, 0.0, 0.0);
    //Instruction 505
    //MOVC
    t16_0.w = (unity_MetaFragmentControl.x) ? 1.0 : 0.0;
    //Instruction 506
    //MOVC
    t16_0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 0.023529) : t16_0;
    //Instruction 507
    //MOV
    SV_Target0 = t16_0;
    //Instruction 508
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
}
Fallback "Legacy Shaders/VertexLit"
}                          	   VertexLit   3 Shader "Hidden/TerrainEngine/Details/Vertexlit" {
Properties {
 _MainTex ("Main Texture", 2D) = "white" { }
}
SubShader { 
 LOD 200
 Tags { "RenderType"="Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
  GpuProgramID 13929
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 v_3;
  v_3.x = _World2Object[0].x;
  v_3.y = _World2Object[1].x;
  v_3.z = _World2Object[2].x;
  v_3.w = _World2Object[3].x;
  highp vec4 v_4;
  v_4.x = _World2Object[0].y;
  v_4.y = _World2Object[1].y;
  v_4.z = _World2Object[2].y;
  v_4.w = _World2Object[3].y;
  highp vec4 v_5;
  v_5.x = _World2Object[0].z;
  v_5.y = _World2Object[1].z;
  v_5.z = _World2Object[2].z;
  v_5.w = _World2Object[3].z;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(((
    (v_3.xyz * _glesNormal.x)
   + 
    (v_4.xyz * _glesNormal.y)
  ) + (v_5.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = worldNormal_1;
  mediump vec4 normal_8;
  normal_8 = tmpvar_7;
  mediump vec3 x2_9;
  mediump vec3 x1_10;
  x1_10.x = dot (unity_SHAr, normal_8);
  x1_10.y = dot (unity_SHAg, normal_8);
  x1_10.z = dot (unity_SHAb, normal_8);
  mediump vec4 tmpvar_11;
  tmpvar_11 = (normal_8.xyzz * normal_8.yzzx);
  x2_9.x = dot (unity_SHBr, tmpvar_11);
  x2_9.y = dot (unity_SHBg, tmpvar_11);
  x2_9.z = dot (unity_SHBb, tmpvar_11);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = ((x2_9 + (unity_SHC.xyz * 
    ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y))
  )) + x1_10);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_8;
  lowp vec4 c_9;
  lowp float diff_10;
  mediump float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_10 = tmpvar_11;
  c_9.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_10);
  c_9.w = tmpvar_7.w;
  c_8.w = c_9.w;
  c_8.xyz = (c_9.xyz + (tmpvar_7.xyz * xlv_TEXCOORD3));
  c_3.xyz = c_8.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp vec3 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 3906
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3907
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3908
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3909
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3910
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3911
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3912
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3913
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3914
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3915
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3916
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3917
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3918
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3919
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3920
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3921
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3922
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 3923
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 3924
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 3925
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 3926
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3927
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 3928
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 3929
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 3930
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 3931
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 3932
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 3933
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 3934
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 3935
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 3936
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 3937
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 3938
    //MOV
    t0.w = 1.0;
    //Instruction 3939
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 3940
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 3941
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 3942
    //ADD
    vs_TEXCOORD3.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 3943
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 3896
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 3897
    //MAX
    t16_0.x = max(t16_0.x, 0.0);
    //Instruction 3898
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3899
    //MUL
    t16_1.xyz = t10_1.xyz * vs_COLOR0.xyz;
    //Instruction 3900
    //MUL
    t16_3.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 3901
    //MUL
    t16_2.xyz = t16_1.xyz * vs_TEXCOORD3.xyz;
    //Instruction 3902
    //MAD
    t16_0.xyz = t16_3.xyz * t16_0.xxx + t16_2.xyz;
    //Instruction 3903
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 3904
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3905
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 v_4;
  v_4.x = _World2Object[0].x;
  v_4.y = _World2Object[1].x;
  v_4.z = _World2Object[2].x;
  v_4.w = _World2Object[3].x;
  highp vec4 v_5;
  v_5.x = _World2Object[0].y;
  v_5.y = _World2Object[1].y;
  v_5.z = _World2Object[2].y;
  v_5.w = _World2Object[3].y;
  highp vec4 v_6;
  v_6.x = _World2Object[0].z;
  v_6.y = _World2Object[1].z;
  v_6.z = _World2Object[2].z;
  v_6.w = _World2Object[3].z;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(((
    (v_4.xyz * _glesNormal.x)
   + 
    (v_5.xyz * _glesNormal.y)
  ) + (v_6.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_8 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_9.w) * tmpvar_9.xyz), unity_DynamicLightmap_HDR.yyy);
  lowp vec4 c_10;
  lowp vec4 c_11;
  lowp float diff_12;
  mediump float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_12 = tmpvar_13;
  c_11.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_12);
  c_11.w = tmpvar_7.w;
  c_10.w = c_11.w;
  c_10.xyz = (c_11.xyz + (tmpvar_7.xyz * tmpvar_8));
  c_3.xyz = c_10.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 2977
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2978
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2979
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2980
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2981
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2982
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2983
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2984
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2985
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2986
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2987
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2988
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2989
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2990
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2991
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2992
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2993
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 2994
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 2995
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 2996
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 2997
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2998
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2999
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3000
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3001
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 3002
    //MAD
    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 3003
    //MOV
    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
    //Instruction 3004
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_DynamicLightmap;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    //Instruction 2961
    //SAMPLE
    t10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
    //Instruction 2962
    //MUL
    t16_1.x = t10_0.w * unity_DynamicLightmap_HDR.x;
    //Instruction 2963
    //MUL
    t16_1.xyz = t10_0.xyz * t16_1.xxx;
    //Instruction 2964
    //LOG
    t16_1.xyz = log2(t16_1.xyz);
    //Instruction 2965
    //MUL
    t16_1.xyz = t16_1.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 2966
    //EXP
    t16_1.xyz = exp2(t16_1.xyz);
    //Instruction 2967
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2968
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 2969
    //MUL
    t16_1.xyz = t16_1.xyz * t16_0.xyz;
    //Instruction 2970
    //MUL
    t16_2.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 2971
    //DP3
    t16_10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2972
    //MAX
    t16_10 = max(t16_10, 0.0);
    //Instruction 2973
    //MAD
    t16_1.xyz = t16_2.xyz * vec3(t16_10) + t16_1.xyz;
    //Instruction 2974
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 2975
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2976
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 v_4;
  v_4.x = _World2Object[0].x;
  v_4.y = _World2Object[1].x;
  v_4.z = _World2Object[2].x;
  v_4.w = _World2Object[3].x;
  highp vec4 v_5;
  v_5.x = _World2Object[0].y;
  v_5.y = _World2Object[1].y;
  v_5.z = _World2Object[2].y;
  v_5.w = _World2Object[3].y;
  highp vec4 v_6;
  v_6.x = _World2Object[0].z;
  v_6.y = _World2Object[1].z;
  v_6.z = _World2Object[2].z;
  v_6.w = _World2Object[3].z;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(((
    (v_4.xyz * _glesNormal.x)
   + 
    (v_5.xyz * _glesNormal.y)
  ) + (v_6.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = worldNormal_1;
  mediump vec4 normal_9;
  normal_9 = tmpvar_8;
  mediump vec3 x2_10;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, normal_9);
  x1_11.y = dot (unity_SHAg, normal_9);
  x1_11.z = dot (unity_SHAb, normal_9);
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_9.xyzz * normal_9.yzzx);
  x2_10.x = dot (unity_SHBr, tmpvar_12);
  x2_10.y = dot (unity_SHBg, tmpvar_12);
  x2_10.z = dot (unity_SHBb, tmpvar_12);
  highp vec4 tmpvar_13;
  tmpvar_13 = (_Object2World * _glesVertex);
  tmpvar_3 = (unity_World2Shadow[0] * tmpvar_13);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_13.xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = ((x2_10 + (unity_SHC.xyz * 
    ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y))
  )) + x1_11);
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x > 
    (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w)
  )), _LightShadowData.x);
  tmpvar_9 = tmpvar_10;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_9;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_11;
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_8.xyz * tmpvar_11) * diff_14);
  c_13.w = tmpvar_8.w;
  c_12.w = c_13.w;
  c_12.xyz = (c_13.xyz + (tmpvar_8.xyz * xlv_TEXCOORD3));
  c_4.xyz = c_12.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 v_5;
  v_5.x = _World2Object[0].x;
  v_5.y = _World2Object[1].x;
  v_5.z = _World2Object[2].x;
  v_5.w = _World2Object[3].x;
  highp vec4 v_6;
  v_6.x = _World2Object[0].y;
  v_6.y = _World2Object[1].y;
  v_6.z = _World2Object[2].y;
  v_6.w = _World2Object[3].y;
  highp vec4 v_7;
  v_7.x = _World2Object[0].z;
  v_7.y = _World2Object[1].z;
  v_7.z = _World2Object[2].z;
  v_7.w = _World2Object[3].z;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(((
    (v_5.xyz * _glesNormal.x)
   + 
    (v_6.xyz * _glesNormal.y)
  ) + (v_7.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_8;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_3 = (unity_World2Shadow[0] * tmpvar_9);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_9.xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x > 
    (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w)
  )), _LightShadowData.x);
  tmpvar_9 = tmpvar_10;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_9;
  mediump vec3 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_11 = (tmpvar_2 * tmpvar_1);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_12 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz), unity_DynamicLightmap_HDR.yyy);
  tmpvar_2 = tmpvar_11;
  lowp vec4 c_14;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_8.xyz * tmpvar_11) * diff_16);
  c_15.w = tmpvar_8.w;
  c_14.w = c_15.w;
  c_14.xyz = (c_15.xyz + (tmpvar_8.xyz * tmpvar_12));
  c_4.xyz = c_14.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex).xyz;
  highp vec4 v_5;
  v_5.x = _World2Object[0].x;
  v_5.y = _World2Object[1].x;
  v_5.z = _World2Object[2].x;
  v_5.w = _World2Object[3].x;
  highp vec4 v_6;
  v_6.x = _World2Object[0].y;
  v_6.y = _World2Object[1].y;
  v_6.z = _World2Object[2].y;
  v_6.w = _World2Object[3].y;
  highp vec4 v_7;
  v_7.x = _World2Object[0].z;
  v_7.y = _World2Object[1].z;
  v_7.z = _World2Object[2].z;
  v_7.w = _World2Object[3].z;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(((
    (v_5.xyz * _glesNormal.x)
   + 
    (v_6.xyz * _glesNormal.y)
  ) + (v_7.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_8;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_1;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  x1_12.x = dot (unity_SHAr, normal_10);
  x1_12.y = dot (unity_SHAg, normal_10);
  x1_12.z = dot (unity_SHAb, normal_10);
  mediump vec4 tmpvar_13;
  tmpvar_13 = (normal_10.xyzz * normal_10.yzzx);
  x2_11.x = dot (unity_SHBr, tmpvar_13);
  x2_11.y = dot (unity_SHBg, tmpvar_13);
  x2_11.z = dot (unity_SHBb, tmpvar_13);
  highp vec3 lightColor0_14;
  lightColor0_14 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_15;
  lightColor1_15 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_16;
  lightColor2_16 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_17;
  lightColor3_17 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_18;
  lightAttenSq_18 = unity_4LightAtten0;
  highp vec3 normal_19;
  normal_19 = worldNormal_1;
  highp vec3 col_20;
  highp vec4 ndotl_21;
  highp vec4 lengthSq_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_4.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_4.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_4.z);
  lengthSq_22 = (tmpvar_23 * tmpvar_23);
  lengthSq_22 = (lengthSq_22 + (tmpvar_24 * tmpvar_24));
  lengthSq_22 = (lengthSq_22 + (tmpvar_25 * tmpvar_25));
  ndotl_21 = (tmpvar_23 * normal_19.x);
  ndotl_21 = (ndotl_21 + (tmpvar_24 * normal_19.y));
  ndotl_21 = (ndotl_21 + (tmpvar_25 * normal_19.z));
  highp vec4 tmpvar_26;
  tmpvar_26 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_21 * inversesqrt(lengthSq_22)));
  ndotl_21 = tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (1.0/((1.0 + 
    (lengthSq_22 * lightAttenSq_18)
  ))));
  col_20 = (lightColor0_14 * tmpvar_27.x);
  col_20 = (col_20 + (lightColor1_15 * tmpvar_27.y));
  col_20 = (col_20 + (lightColor2_16 * tmpvar_27.z));
  col_20 = (col_20 + (lightColor3_17 * tmpvar_27.w));
  tmpvar_3 = (((x2_11 + 
    (unity_SHC.xyz * ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y)))
  ) + x1_12) + col_20);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_8;
  lowp vec4 c_9;
  lowp float diff_10;
  mediump float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_10 = tmpvar_11;
  c_9.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_10);
  c_9.w = tmpvar_7.w;
  c_8.w = c_9.w;
  c_8.xyz = (c_9.xyz + (tmpvar_7.xyz * xlv_TEXCOORD3));
  c_3.xyz = c_8.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 3015
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3016
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3017
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3018
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3019
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3020
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3021
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3022
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3023
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3024
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3025
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3026
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3027
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3028
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3029
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3030
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3031
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 3032
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 3033
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 3034
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 3035
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3036
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 3037
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 3038
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 3039
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 3040
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 3041
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 3042
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 3043
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 3044
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 3045
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 3046
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 3047
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 3048
    //MOV
    t0.w = 1.0;
    //Instruction 3049
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 3050
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 3051
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 3052
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 3053
    //ADD
    t3 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 3054
    //MUL
    t4 = t0.yyyy * t3;
    //Instruction 3055
    //MUL
    t3 = t3 * t3;
    //Instruction 3056
    //ADD
    t5 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 3057
    //ADD
    t1 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 3058
    //MAD
    t4 = t5 * t0.xxxx + t4;
    //Instruction 3059
    //MAD
    t0 = t1 * t0.zzzz + t4;
    //Instruction 3060
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 3061
    //MAD
    t1 = t1 * t1 + t3;
    //Instruction 3062
    //RSQ
    t3 = inversesqrt(t1);
    //Instruction 3063
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 3064
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 3065
    //MUL
    t0 = t0 * t3;
    //Instruction 3066
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 3067
    //MUL
    t0 = t1 * t0;
    //Instruction 3068
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 3069
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 3070
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 3071
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 3072
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 3073
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 3074
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 3005
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 3006
    //MAX
    t16_0.x = max(t16_0.x, 0.0);
    //Instruction 3007
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3008
    //MUL
    t16_1.xyz = t10_1.xyz * vs_COLOR0.xyz;
    //Instruction 3009
    //MUL
    t16_3.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 3010
    //MUL
    t16_2.xyz = t16_1.xyz * vs_TEXCOORD3.xyz;
    //Instruction 3011
    //MAD
    t16_0.xyz = t16_3.xyz * t16_0.xxx + t16_2.xyz;
    //Instruction 3012
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 3013
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3014
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 v_4;
  v_4.x = _World2Object[0].x;
  v_4.y = _World2Object[1].x;
  v_4.z = _World2Object[2].x;
  v_4.w = _World2Object[3].x;
  highp vec4 v_5;
  v_5.x = _World2Object[0].y;
  v_5.y = _World2Object[1].y;
  v_5.z = _World2Object[2].y;
  v_5.w = _World2Object[3].y;
  highp vec4 v_6;
  v_6.x = _World2Object[0].z;
  v_6.y = _World2Object[1].z;
  v_6.z = _World2Object[2].z;
  v_6.w = _World2Object[3].z;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(((
    (v_4.xyz * _glesNormal.x)
   + 
    (v_5.xyz * _glesNormal.y)
  ) + (v_6.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_8 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_9.w) * tmpvar_9.xyz), unity_DynamicLightmap_HDR.yyy);
  lowp vec4 c_10;
  lowp vec4 c_11;
  lowp float diff_12;
  mediump float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_12 = tmpvar_13;
  c_11.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_12);
  c_11.w = tmpvar_7.w;
  c_10.w = c_11.w;
  c_10.xyz = (c_11.xyz + (tmpvar_7.xyz * tmpvar_8));
  c_3.xyz = c_10.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 3960
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3961
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3962
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3963
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3964
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3965
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3966
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3967
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3968
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3969
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3970
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3971
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3972
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3973
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3974
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3975
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3976
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 3977
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 3978
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 3979
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 3980
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3981
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3982
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3983
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3984
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 3985
    //MAD
    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 3986
    //MOV
    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
    //Instruction 3987
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_DynamicLightmap;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    //Instruction 3944
    //SAMPLE
    t10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
    //Instruction 3945
    //MUL
    t16_1.x = t10_0.w * unity_DynamicLightmap_HDR.x;
    //Instruction 3946
    //MUL
    t16_1.xyz = t10_0.xyz * t16_1.xxx;
    //Instruction 3947
    //LOG
    t16_1.xyz = log2(t16_1.xyz);
    //Instruction 3948
    //MUL
    t16_1.xyz = t16_1.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 3949
    //EXP
    t16_1.xyz = exp2(t16_1.xyz);
    //Instruction 3950
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3951
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 3952
    //MUL
    t16_1.xyz = t16_1.xyz * t16_0.xyz;
    //Instruction 3953
    //MUL
    t16_2.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 3954
    //DP3
    t16_10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 3955
    //MAX
    t16_10 = max(t16_10, 0.0);
    //Instruction 3956
    //MAD
    t16_1.xyz = t16_2.xyz * vec3(t16_10) + t16_1.xyz;
    //Instruction 3957
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 3958
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3959
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex);
  highp vec4 v_6;
  v_6.x = _World2Object[0].x;
  v_6.y = _World2Object[1].x;
  v_6.z = _World2Object[2].x;
  v_6.w = _World2Object[3].x;
  highp vec4 v_7;
  v_7.x = _World2Object[0].y;
  v_7.y = _World2Object[1].y;
  v_7.z = _World2Object[2].y;
  v_7.w = _World2Object[3].y;
  highp vec4 v_8;
  v_8.x = _World2Object[0].z;
  v_8.y = _World2Object[1].z;
  v_8.z = _World2Object[2].z;
  v_8.w = _World2Object[3].z;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(((
    (v_6.xyz * _glesNormal.x)
   + 
    (v_7.xyz * _glesNormal.y)
  ) + (v_8.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_9;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = worldNormal_1;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, normal_11);
  x1_13.y = dot (unity_SHAg, normal_11);
  x1_13.z = dot (unity_SHAb, normal_11);
  mediump vec4 tmpvar_14;
  tmpvar_14 = (normal_11.xyzz * normal_11.yzzx);
  x2_12.x = dot (unity_SHBr, tmpvar_14);
  x2_12.y = dot (unity_SHBg, tmpvar_14);
  x2_12.z = dot (unity_SHBb, tmpvar_14);
  highp vec3 lightColor0_15;
  lightColor0_15 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_16;
  lightColor1_16 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_17;
  lightColor2_17 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_18;
  lightColor3_18 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_19;
  lightAttenSq_19 = unity_4LightAtten0;
  highp vec3 normal_20;
  normal_20 = worldNormal_1;
  highp vec3 col_21;
  highp vec4 ndotl_22;
  highp vec4 lengthSq_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_23 = (tmpvar_24 * tmpvar_24);
  lengthSq_23 = (lengthSq_23 + (tmpvar_25 * tmpvar_25));
  lengthSq_23 = (lengthSq_23 + (tmpvar_26 * tmpvar_26));
  ndotl_22 = (tmpvar_24 * normal_20.x);
  ndotl_22 = (ndotl_22 + (tmpvar_25 * normal_20.y));
  ndotl_22 = (ndotl_22 + (tmpvar_26 * normal_20.z));
  highp vec4 tmpvar_27;
  tmpvar_27 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_22 * inversesqrt(lengthSq_23)));
  ndotl_22 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_27 * (1.0/((1.0 + 
    (lengthSq_23 * lightAttenSq_19)
  ))));
  col_21 = (lightColor0_15 * tmpvar_28.x);
  col_21 = (col_21 + (lightColor1_16 * tmpvar_28.y));
  col_21 = (col_21 + (lightColor2_17 * tmpvar_28.z));
  col_21 = (col_21 + (lightColor3_18 * tmpvar_28.w));
  tmpvar_3 = (((x2_12 + 
    (unity_SHC.xyz * ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y)))
  ) + x1_13) + col_21);
  tmpvar_4 = (unity_World2Shadow[0] * tmpvar_5);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_5.xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x > 
    (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w)
  )), _LightShadowData.x);
  tmpvar_9 = tmpvar_10;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_9;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_11;
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_8.xyz * tmpvar_11) * diff_14);
  c_13.w = tmpvar_8.w;
  c_12.w = c_13.w;
  c_12.xyz = (c_13.xyz + (tmpvar_8.xyz * xlv_TEXCOORD3));
  c_4.xyz = c_12.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 v_5;
  v_5.x = _World2Object[0].x;
  v_5.y = _World2Object[1].x;
  v_5.z = _World2Object[2].x;
  v_5.w = _World2Object[3].x;
  highp vec4 v_6;
  v_6.x = _World2Object[0].y;
  v_6.y = _World2Object[1].y;
  v_6.z = _World2Object[2].y;
  v_6.w = _World2Object[3].y;
  highp vec4 v_7;
  v_7.x = _World2Object[0].z;
  v_7.y = _World2Object[1].z;
  v_7.z = _World2Object[2].z;
  v_7.w = _World2Object[3].z;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(((
    (v_5.xyz * _glesNormal.x)
   + 
    (v_6.xyz * _glesNormal.y)
  ) + (v_7.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_8;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_3 = (unity_World2Shadow[0] * tmpvar_9);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_9.xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x > 
    (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w)
  )), _LightShadowData.x);
  tmpvar_9 = tmpvar_10;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_9;
  mediump vec3 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_11 = (tmpvar_2 * tmpvar_1);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_12 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz), unity_DynamicLightmap_HDR.yyy);
  tmpvar_2 = tmpvar_11;
  lowp vec4 c_14;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_8.xyz * tmpvar_11) * diff_16);
  c_15.w = tmpvar_8.w;
  c_14.w = c_15.w;
  c_14.xyz = (c_15.xyz + (tmpvar_8.xyz * tmpvar_12));
  c_4.xyz = c_14.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 v_4;
  v_4.x = _World2Object[0].x;
  v_4.y = _World2Object[1].x;
  v_4.z = _World2Object[2].x;
  v_4.w = _World2Object[3].x;
  highp vec4 v_5;
  v_5.x = _World2Object[0].y;
  v_5.y = _World2Object[1].y;
  v_5.z = _World2Object[2].y;
  v_5.w = _World2Object[3].y;
  highp vec4 v_6;
  v_6.x = _World2Object[0].z;
  v_6.y = _World2Object[1].z;
  v_6.z = _World2Object[2].z;
  v_6.w = _World2Object[3].z;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(((
    (v_4.xyz * _glesNormal.x)
   + 
    (v_5.xyz * _glesNormal.y)
  ) + (v_6.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = worldNormal_1;
  mediump vec4 normal_9;
  normal_9 = tmpvar_8;
  mediump vec3 x2_10;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, normal_9);
  x1_11.y = dot (unity_SHAg, normal_9);
  x1_11.z = dot (unity_SHAb, normal_9);
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_9.xyzz * normal_9.yzzx);
  x2_10.x = dot (unity_SHBr, tmpvar_12);
  x2_10.y = dot (unity_SHBg, tmpvar_12);
  x2_10.z = dot (unity_SHBb, tmpvar_12);
  highp vec4 tmpvar_13;
  tmpvar_13 = (_Object2World * _glesVertex);
  tmpvar_3 = (unity_World2Shadow[0] * tmpvar_13);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_13.xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = ((x2_10 + (unity_SHC.xyz * 
    ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y))
  )) + x1_11);
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float shadow_9;
  shadow_9 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_10;
  lowp vec4 c_11;
  lowp vec4 c_12;
  lowp float diff_13;
  mediump float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_13 = tmpvar_14;
  c_12.xyz = ((tmpvar_8.xyz * tmpvar_10) * diff_13);
  c_12.w = tmpvar_8.w;
  c_11.w = c_12.w;
  c_11.xyz = (c_12.xyz + (tmpvar_8.xyz * xlv_TEXCOORD3));
  c_4.xyz = c_11.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out mediump vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 3089
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3090
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3091
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3092
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3093
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3094
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3095
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3096
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3097
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3098
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3099
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3100
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3101
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3102
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3103
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3104
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3105
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 3106
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 3107
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 3108
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 3109
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3110
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 3111
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 3112
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 3113
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 3114
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 3115
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 3116
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 3117
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 3118
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 3119
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 3120
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 3121
    //MOV
    t0.w = 1.0;
    //Instruction 3122
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 3123
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 3124
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 3125
    //ADD
    vs_TEXCOORD3.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 3126
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3127
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 3128
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 3129
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 3130
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 3131
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 3132
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 3133
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 3134
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 3135
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    //Instruction 3075
    //SAMPLE_C_LZ
    vec3 txVec9 = vec3(vs_TEXCOORD4.xy,vs_TEXCOORD4.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    //Instruction 3076
    //ADD
    t16_3 = (-_LightShadowData.x) + 1.0;
    //Instruction 3077
    //MAD
    t16_0.x = t16_0.x * t16_3 + _LightShadowData.x;
    //Instruction 3078
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 3079
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3080
    //MUL
    t16_1.xyz = t10_1.xyz * vs_COLOR0.xyz;
    //Instruction 3081
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 3082
    //MUL
    t16_2.xyz = t16_1.xyz * vs_TEXCOORD3.xyz;
    //Instruction 3083
    //DP3
    t16_9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 3084
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 3085
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_9) + t16_2.xyz;
    //Instruction 3086
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 3087
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3088
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 v_5;
  v_5.x = _World2Object[0].x;
  v_5.y = _World2Object[1].x;
  v_5.z = _World2Object[2].x;
  v_5.w = _World2Object[3].x;
  highp vec4 v_6;
  v_6.x = _World2Object[0].y;
  v_6.y = _World2Object[1].y;
  v_6.z = _World2Object[2].y;
  v_6.w = _World2Object[3].y;
  highp vec4 v_7;
  v_7.x = _World2Object[0].z;
  v_7.y = _World2Object[1].z;
  v_7.z = _World2Object[2].z;
  v_7.w = _World2Object[3].z;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(((
    (v_5.xyz * _glesNormal.x)
   + 
    (v_6.xyz * _glesNormal.y)
  ) + (v_7.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_8;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_3 = (unity_World2Shadow[0] * tmpvar_9);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_9.xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float shadow_9;
  shadow_9 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_10 = (tmpvar_2 * tmpvar_1);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_11 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_12.w) * tmpvar_12.xyz), unity_DynamicLightmap_HDR.yyy);
  tmpvar_2 = tmpvar_10;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8.xyz * tmpvar_10) * diff_15);
  c_14.w = tmpvar_8.w;
  c_13.w = c_14.w;
  c_13.xyz = (c_14.xyz + (tmpvar_8.xyz * tmpvar_11));
  c_4.xyz = c_13.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out mediump vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp float t6;
void main()
{
    //Instruction 4008
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4009
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4010
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4011
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4012
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4013
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4014
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4015
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4016
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4017
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4018
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4019
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4020
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4021
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4022
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4023
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4024
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 4025
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 4026
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 4027
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 4028
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4029
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4030
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4031
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4032
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 4033
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4034
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 4035
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 4036
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 4037
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 4038
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 4039
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 4040
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 4041
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 4042
    //MAD
    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 4043
    //MOV
    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
    //Instruction 4044
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in mediump vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    //Instruction 3988
    //SAMPLE
    t10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
    //Instruction 3989
    //MUL
    t16_1.x = t10_0.w * unity_DynamicLightmap_HDR.x;
    //Instruction 3990
    //MUL
    t16_1.xyz = t10_0.xyz * t16_1.xxx;
    //Instruction 3991
    //LOG
    t16_1.xyz = log2(t16_1.xyz);
    //Instruction 3992
    //MUL
    t16_1.xyz = t16_1.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 3993
    //EXP
    t16_1.xyz = exp2(t16_1.xyz);
    //Instruction 3994
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3995
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 3996
    //MUL
    t16_1.xyz = t16_1.xyz * t16_0.xyz;
    //Instruction 3997
    //SAMPLE_C_LZ
    vec3 txVec13 = vec3(vs_TEXCOORD4.xy,vs_TEXCOORD4.z);
    t16_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    //Instruction 3998
    //ADD
    t16_2.x = (-_LightShadowData.x) + 1.0;
    //Instruction 3999
    //MAD
    t16_10 = t16_10 * t16_2.x + _LightShadowData.x;
    //Instruction 4000
    //MUL
    t16_2.xyz = vec3(t16_10) * _LightColor0.xyz;
    //Instruction 4001
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 4002
    //DP3
    t16_10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4003
    //MAX
    t16_10 = max(t16_10, 0.0);
    //Instruction 4004
    //MAD
    t16_1.xyz = t16_2.xyz * vec3(t16_10) + t16_1.xyz;
    //Instruction 4005
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 4006
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4007
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex);
  highp vec4 v_6;
  v_6.x = _World2Object[0].x;
  v_6.y = _World2Object[1].x;
  v_6.z = _World2Object[2].x;
  v_6.w = _World2Object[3].x;
  highp vec4 v_7;
  v_7.x = _World2Object[0].y;
  v_7.y = _World2Object[1].y;
  v_7.z = _World2Object[2].y;
  v_7.w = _World2Object[3].y;
  highp vec4 v_8;
  v_8.x = _World2Object[0].z;
  v_8.y = _World2Object[1].z;
  v_8.z = _World2Object[2].z;
  v_8.w = _World2Object[3].z;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(((
    (v_6.xyz * _glesNormal.x)
   + 
    (v_7.xyz * _glesNormal.y)
  ) + (v_8.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_9;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = worldNormal_1;
  mediump vec4 normal_11;
  normal_11 = tmpvar_10;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, normal_11);
  x1_13.y = dot (unity_SHAg, normal_11);
  x1_13.z = dot (unity_SHAb, normal_11);
  mediump vec4 tmpvar_14;
  tmpvar_14 = (normal_11.xyzz * normal_11.yzzx);
  x2_12.x = dot (unity_SHBr, tmpvar_14);
  x2_12.y = dot (unity_SHBg, tmpvar_14);
  x2_12.z = dot (unity_SHBb, tmpvar_14);
  highp vec3 lightColor0_15;
  lightColor0_15 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_16;
  lightColor1_16 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_17;
  lightColor2_17 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_18;
  lightColor3_18 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_19;
  lightAttenSq_19 = unity_4LightAtten0;
  highp vec3 normal_20;
  normal_20 = worldNormal_1;
  highp vec3 col_21;
  highp vec4 ndotl_22;
  highp vec4 lengthSq_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_23 = (tmpvar_24 * tmpvar_24);
  lengthSq_23 = (lengthSq_23 + (tmpvar_25 * tmpvar_25));
  lengthSq_23 = (lengthSq_23 + (tmpvar_26 * tmpvar_26));
  ndotl_22 = (tmpvar_24 * normal_20.x);
  ndotl_22 = (ndotl_22 + (tmpvar_25 * normal_20.y));
  ndotl_22 = (ndotl_22 + (tmpvar_26 * normal_20.z));
  highp vec4 tmpvar_27;
  tmpvar_27 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_22 * inversesqrt(lengthSq_23)));
  ndotl_22 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (tmpvar_27 * (1.0/((1.0 + 
    (lengthSq_23 * lightAttenSq_19)
  ))));
  col_21 = (lightColor0_15 * tmpvar_28.x);
  col_21 = (col_21 + (lightColor1_16 * tmpvar_28.y));
  col_21 = (col_21 + (lightColor2_17 * tmpvar_28.z));
  col_21 = (col_21 + (lightColor3_18 * tmpvar_28.w));
  tmpvar_3 = (((x2_12 + 
    (unity_SHC.xyz * ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y)))
  ) + x1_13) + col_21);
  tmpvar_4 = (unity_World2Shadow[0] * tmpvar_5);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_5.xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float shadow_9;
  shadow_9 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_10;
  lowp vec4 c_11;
  lowp vec4 c_12;
  lowp float diff_13;
  mediump float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_13 = tmpvar_14;
  c_12.xyz = ((tmpvar_8.xyz * tmpvar_10) * diff_13);
  c_12.w = tmpvar_8.w;
  c_11.w = c_12.w;
  c_11.xyz = (c_12.xyz + (tmpvar_8.xyz * xlv_TEXCOORD3));
  c_4.xyz = c_11.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out mediump vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 3150
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3151
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3152
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3153
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3154
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3155
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3156
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3157
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3158
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3159
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3160
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3161
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3162
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3163
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3164
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3165
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3166
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 3167
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 3168
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 3169
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 3170
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3171
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 3172
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 3173
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 3174
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 3175
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 3176
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 3177
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 3178
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 3179
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 3180
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 3181
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 3182
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 3183
    //MOV
    t0.w = 1.0;
    //Instruction 3184
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 3185
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 3186
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 3187
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 3188
    //ADD
    t3 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 3189
    //MUL
    t4 = t0.yyyy * t3;
    //Instruction 3190
    //MUL
    t3 = t3 * t3;
    //Instruction 3191
    //ADD
    t5 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 3192
    //ADD
    t1 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 3193
    //MAD
    t4 = t5 * t0.xxxx + t4;
    //Instruction 3194
    //MAD
    t0 = t1 * t0.zzzz + t4;
    //Instruction 3195
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 3196
    //MAD
    t1 = t1 * t1 + t3;
    //Instruction 3197
    //RSQ
    t3 = inversesqrt(t1);
    //Instruction 3198
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 3199
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 3200
    //MUL
    t0 = t0 * t3;
    //Instruction 3201
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 3202
    //MUL
    t0 = t1 * t0;
    //Instruction 3203
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 3204
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 3205
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 3206
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 3207
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 3208
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 3209
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3210
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 3211
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 3212
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 3213
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 3214
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 3215
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 3216
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 3217
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 3218
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    //Instruction 3136
    //SAMPLE_C_LZ
    vec3 txVec10 = vec3(vs_TEXCOORD4.xy,vs_TEXCOORD4.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    //Instruction 3137
    //ADD
    t16_3 = (-_LightShadowData.x) + 1.0;
    //Instruction 3138
    //MAD
    t16_0.x = t16_0.x * t16_3 + _LightShadowData.x;
    //Instruction 3139
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 3140
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3141
    //MUL
    t16_1.xyz = t10_1.xyz * vs_COLOR0.xyz;
    //Instruction 3142
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 3143
    //MUL
    t16_2.xyz = t16_1.xyz * vs_TEXCOORD3.xyz;
    //Instruction 3144
    //DP3
    t16_9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 3145
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 3146
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_9) + t16_2.xyz;
    //Instruction 3147
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 3148
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3149
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 v_5;
  v_5.x = _World2Object[0].x;
  v_5.y = _World2Object[1].x;
  v_5.z = _World2Object[2].x;
  v_5.w = _World2Object[3].x;
  highp vec4 v_6;
  v_6.x = _World2Object[0].y;
  v_6.y = _World2Object[1].y;
  v_6.z = _World2Object[2].y;
  v_6.w = _World2Object[3].y;
  highp vec4 v_7;
  v_7.x = _World2Object[0].z;
  v_7.y = _World2Object[1].z;
  v_7.z = _World2Object[2].z;
  v_7.w = _World2Object[3].z;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(((
    (v_5.xyz * _glesNormal.x)
   + 
    (v_6.xyz * _glesNormal.y)
  ) + (v_7.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_8;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_3 = (unity_World2Shadow[0] * tmpvar_9);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_9.xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float shadow_9;
  shadow_9 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_10 = (tmpvar_2 * tmpvar_1);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_11 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_12.w) * tmpvar_12.xyz), unity_DynamicLightmap_HDR.yyy);
  tmpvar_2 = tmpvar_10;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8.xyz * tmpvar_10) * diff_15);
  c_14.w = tmpvar_8.w;
  c_13.w = c_14.w;
  c_13.xyz = (c_14.xyz + (tmpvar_8.xyz * tmpvar_11));
  c_4.xyz = c_13.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out mediump vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp float t6;
void main()
{
    //Instruction 3239
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3240
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3241
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3242
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3243
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3244
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3245
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3246
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3247
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3248
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3249
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3250
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3251
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3252
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3253
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3254
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3255
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 3256
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 3257
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 3258
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 3259
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3260
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3261
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3262
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3263
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 3264
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3265
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 3266
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 3267
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 3268
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 3269
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 3270
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 3271
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 3272
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 3273
    //MAD
    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 3274
    //MOV
    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
    //Instruction 3275
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in mediump vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    //Instruction 3219
    //SAMPLE
    t10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
    //Instruction 3220
    //MUL
    t16_1.x = t10_0.w * unity_DynamicLightmap_HDR.x;
    //Instruction 3221
    //MUL
    t16_1.xyz = t10_0.xyz * t16_1.xxx;
    //Instruction 3222
    //LOG
    t16_1.xyz = log2(t16_1.xyz);
    //Instruction 3223
    //MUL
    t16_1.xyz = t16_1.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 3224
    //EXP
    t16_1.xyz = exp2(t16_1.xyz);
    //Instruction 3225
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3226
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 3227
    //MUL
    t16_1.xyz = t16_1.xyz * t16_0.xyz;
    //Instruction 3228
    //SAMPLE_C_LZ
    vec3 txVec11 = vec3(vs_TEXCOORD4.xy,vs_TEXCOORD4.z);
    t16_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    //Instruction 3229
    //ADD
    t16_2.x = (-_LightShadowData.x) + 1.0;
    //Instruction 3230
    //MAD
    t16_10 = t16_10 * t16_2.x + _LightShadowData.x;
    //Instruction 3231
    //MUL
    t16_2.xyz = vec3(t16_10) * _LightColor0.xyz;
    //Instruction 3232
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 3233
    //DP3
    t16_10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 3234
    //MAX
    t16_10 = max(t16_10, 0.0);
    //Instruction 3235
    //MAD
    t16_1.xyz = t16_2.xyz * vec3(t16_10) + t16_1.xyz;
    //Instruction 3236
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 3237
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3238
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "RenderType"="Opaque" }
  ZWrite Off
  Blend One One
  GpuProgramID 98385
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 v_3;
  v_3.x = _World2Object[0].x;
  v_3.y = _World2Object[1].x;
  v_3.z = _World2Object[2].x;
  v_3.w = _World2Object[3].x;
  highp vec4 v_4;
  v_4.x = _World2Object[0].y;
  v_4.y = _World2Object[1].y;
  v_4.z = _World2Object[2].y;
  v_4.w = _World2Object[3].y;
  highp vec4 v_5;
  v_5.x = _World2Object[0].z;
  v_5.y = _World2Object[1].z;
  v_5.z = _World2Object[2].z;
  v_5.w = _World2Object[3].z;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(((
    (v_3.xyz * _glesNormal.x)
   + 
    (v_4.xyz * _glesNormal.y)
  ) + (v_5.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = _glesColor;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (_LightMatrix0 * tmpvar_8).xyz;
  highp float tmpvar_10;
  tmpvar_10 = dot (tmpvar_9, tmpvar_9);
  lowp float tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, vec2(tmpvar_10)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_11);
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_14);
  c_13.w = tmpvar_7.w;
  c_12.w = c_13.w;
  c_12.xyz = c_13.xyz;
  c_3.xyz = c_12.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 4065
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4066
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4067
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4068
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4069
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4070
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4071
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4072
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4073
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4074
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4075
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4076
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4077
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4078
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4079
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4080
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4081
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 4082
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 4083
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 4084
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 4085
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4086
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4087
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4088
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4089
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 4090
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in lowp vec4 vs_COLOR0;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
mediump float t16_6;
highp float t7;
void main()
{
    //Instruction 4045
    //MUL
    t16_0.xyz = vs_TEXCOORD2.yyy * _LightMatrix0[1].xyz;
    //Instruction 4046
    //MAD
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD2.xxx + t16_0.xyz;
    //Instruction 4047
    //MAD
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD2.zzz + t16_0.xyz;
    //Instruction 4048
    //ADD
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    //Instruction 4049
    //DP3
    t16_1.x = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 4050
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_1.xx).w;
    //Instruction 4051
    //MUL
    t16_0.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 4052
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4053
    //MUL
    t16_1.xyz = t10_1.xyz * vs_COLOR0.xyz;
    //Instruction 4054
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 4055
    //ADD
    t1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 4056
    //DP3
    t7 = dot(t1.xyz, t1.xyz);
    //Instruction 4057
    //RSQ
    t7 = inversesqrt(t7);
    //Instruction 4058
    //MUL
    t1.xyz = vec3(t7) * t1.xyz;
    //Instruction 4059
    //DP3
    t16_6 = dot(vs_TEXCOORD1.xyz, t1.xyz);
    //Instruction 4060
    //MAX
    t16_6 = max(t16_6, 0.0);
    //Instruction 4061
    //MUL
    t16_0.xyz = vec3(t16_6) * t16_0.xyz;
    //Instruction 4062
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 4063
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4064
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 v_3;
  v_3.x = _World2Object[0].x;
  v_3.y = _World2Object[1].x;
  v_3.z = _World2Object[2].x;
  v_3.w = _World2Object[3].x;
  highp vec4 v_4;
  v_4.x = _World2Object[0].y;
  v_4.y = _World2Object[1].y;
  v_4.z = _World2Object[2].y;
  v_4.w = _World2Object[3].y;
  highp vec4 v_5;
  v_5.x = _World2Object[0].z;
  v_5.y = _World2Object[1].z;
  v_5.z = _World2Object[2].z;
  v_5.w = _World2Object[3].z;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(((
    (v_3.xyz * _glesNormal.x)
   + 
    (v_4.xyz * _glesNormal.y)
  ) + (v_5.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = _glesColor;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_8;
  lowp vec4 c_9;
  lowp float diff_10;
  mediump float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_10 = tmpvar_11;
  c_9.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_10);
  c_9.w = tmpvar_7.w;
  c_8.w = c_9.w;
  c_8.xyz = c_9.xyz;
  c_3.xyz = c_8.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 3285
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3286
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3287
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3288
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3289
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3290
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3291
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3292
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3293
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3294
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3295
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3296
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3297
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3298
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3299
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3300
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3301
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 3302
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 3303
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 3304
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 3305
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3306
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3307
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3308
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3309
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 3310
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump float t16_7;
void main()
{
    //Instruction 3276
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3277
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 3278
    //MUL
    t16_1.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 3279
    //DP3
    t16_7 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 3280
    //MAX
    t16_7 = max(t16_7, 0.0);
    //Instruction 3281
    //MUL
    t16_1.xyz = vec3(t16_7) * t16_1.xyz;
    //Instruction 3282
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 3283
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3284
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 v_3;
  v_3.x = _World2Object[0].x;
  v_3.y = _World2Object[1].x;
  v_3.z = _World2Object[2].x;
  v_3.w = _World2Object[3].x;
  highp vec4 v_4;
  v_4.x = _World2Object[0].y;
  v_4.y = _World2Object[1].y;
  v_4.z = _World2Object[2].y;
  v_4.w = _World2Object[3].y;
  highp vec4 v_5;
  v_5.x = _World2Object[0].z;
  v_5.y = _World2Object[1].z;
  v_5.z = _World2Object[2].z;
  v_5.w = _World2Object[3].z;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(((
    (v_3.xyz * _glesNormal.x)
   + 
    (v_4.xyz * _glesNormal.y)
  ) + (v_5.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = _glesColor;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
  lightDir_7 = tmpvar_8;
  tmpvar_6 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_9;
  tmpvar_9 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD2;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_LightMatrix0 * tmpvar_10);
  lightCoord_5 = tmpvar_11;
  lowp vec4 tmpvar_12;
  mediump vec2 P_13;
  P_13 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_12 = texture2D (_LightTexture0, P_13);
  highp vec3 LightCoord_14;
  LightCoord_14 = lightCoord_5.xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (LightCoord_14, LightCoord_14);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_LightTextureB0, vec2(tmpvar_15));
  mediump float tmpvar_17;
  tmpvar_17 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_12.w) * tmpvar_16.w);
  atten_4 = tmpvar_17;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_9.xyz * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9.w;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 3338
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3339
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3340
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3341
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3342
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3343
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3344
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3345
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3346
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3347
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3348
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3349
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3350
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3351
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3352
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3353
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3354
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 3355
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 3356
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 3357
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 3358
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3359
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3360
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3361
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3362
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 3363
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in lowp vec4 vs_COLOR0;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec2 t16_1;
highp vec3 t2;
mediump vec3 t16_2;
lowp vec3 t10_2;
lowp float t10_3;
bool tb6;
mediump float t16_10;
lowp float t10_10;
mediump float t16_12;
highp float t14;
void main()
{
    //Instruction 3311
    //MUL
    t16_0 = vs_TEXCOORD2.yyyy * _LightMatrix0[1];
    //Instruction 3312
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD2.xxxx + t16_0;
    //Instruction 3313
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD2.zzzz + t16_0;
    //Instruction 3314
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 3315
    //DIV
    t16_1.xy = t16_0.xy / t16_0.ww;
    //Instruction 3316
    //ADD
    t16_1.xy = t16_1.xy + vec2(0.500000, 0.500000);
    //Instruction 3317
    //SAMPLE
    t10_2.x = texture(_LightTexture0, t16_1.xy).w;
    //Instruction 3318
    //LT
    tb6 = 0.0<t16_0.z;
    //Instruction 3319
    //DP3
    t16_10 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 3320
    //SAMPLE
    t10_10 = texture(_LightTextureB0, vec2(t16_10)).w;
    //Instruction 3321
    //MOVC
    t10_3 = (tb6) ? 1.0 : 0.0;
    //Instruction 3322
    //MUL
    t10_3 = t10_2.x * t10_3;
    //Instruction 3323
    //MUL
    t10_3 = t10_10 * t10_3;
    //Instruction 3324
    //MUL
    t16_0.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 3325
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3326
    //MUL
    t16_2.xyz = t10_2.xyz * vs_COLOR0.xyz;
    //Instruction 3327
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 3328
    //ADD
    t2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 3329
    //DP3
    t14 = dot(t2.xyz, t2.xyz);
    //Instruction 3330
    //RSQ
    t14 = inversesqrt(t14);
    //Instruction 3331
    //MUL
    t2.xyz = vec3(t14) * t2.xyz;
    //Instruction 3332
    //DP3
    t16_12 = dot(vs_TEXCOORD1.xyz, t2.xyz);
    //Instruction 3333
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 3334
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 3335
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 3336
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3337
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 v_3;
  v_3.x = _World2Object[0].x;
  v_3.y = _World2Object[1].x;
  v_3.z = _World2Object[2].x;
  v_3.w = _World2Object[3].x;
  highp vec4 v_4;
  v_4.x = _World2Object[0].y;
  v_4.y = _World2Object[1].y;
  v_4.z = _World2Object[2].y;
  v_4.w = _World2Object[3].y;
  highp vec4 v_5;
  v_5.x = _World2Object[0].z;
  v_5.y = _World2Object[1].z;
  v_5.z = _World2Object[2].z;
  v_5.w = _World2Object[3].z;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(((
    (v_3.xyz * _glesNormal.x)
   + 
    (v_4.xyz * _glesNormal.y)
  ) + (v_5.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = _glesColor;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (_LightMatrix0 * tmpvar_8).xyz;
  highp float tmpvar_10;
  tmpvar_10 = dot (tmpvar_9, tmpvar_9);
  lowp float tmpvar_11;
  tmpvar_11 = (texture2D (_LightTextureB0, vec2(tmpvar_10)).w * textureCube (_LightTexture0, tmpvar_9).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_11);
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_14);
  c_13.w = tmpvar_7.w;
  c_12.w = c_13.w;
  c_12.xyz = c_13.xyz;
  c_3.xyz = c_12.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 4113
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4114
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4115
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4116
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4117
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4118
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4119
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4120
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4121
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4122
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4123
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4124
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4125
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4126
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4127
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4128
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4129
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 4130
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 4131
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 4132
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 4133
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4134
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4135
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4136
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4137
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 4138
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in lowp vec4 vs_COLOR0;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
lowp float t10_3;
mediump float t16_6;
highp float t7;
void main()
{
    //Instruction 4091
    //MUL
    t16_0.xyz = vs_TEXCOORD2.yyy * _LightMatrix0[1].xyz;
    //Instruction 4092
    //MAD
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD2.xxx + t16_0.xyz;
    //Instruction 4093
    //MAD
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD2.zzz + t16_0.xyz;
    //Instruction 4094
    //ADD
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    //Instruction 4095
    //DP3
    t16_1.x = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 4096
    //SAMPLE
    t10_3 = texture(_LightTexture0, t16_0.xyz).w;
    //Instruction 4097
    //SAMPLE
    t10_1.x = texture(_LightTextureB0, t16_1.xx).w;
    //Instruction 4098
    //MUL
    t16_1.x = t10_3 * t10_1.x;
    //Instruction 4099
    //MUL
    t16_0.xyz = t16_1.xxx * _LightColor0.xyz;
    //Instruction 4100
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4101
    //MUL
    t16_1.xyz = t10_1.xyz * vs_COLOR0.xyz;
    //Instruction 4102
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 4103
    //ADD
    t1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 4104
    //DP3
    t7 = dot(t1.xyz, t1.xyz);
    //Instruction 4105
    //RSQ
    t7 = inversesqrt(t7);
    //Instruction 4106
    //MUL
    t1.xyz = vec3(t7) * t1.xyz;
    //Instruction 4107
    //DP3
    t16_6 = dot(vs_TEXCOORD1.xyz, t1.xyz);
    //Instruction 4108
    //MAX
    t16_6 = max(t16_6, 0.0);
    //Instruction 4109
    //MUL
    t16_0.xyz = vec3(t16_6) * t16_0.xyz;
    //Instruction 4110
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 4111
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4112
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 v_3;
  v_3.x = _World2Object[0].x;
  v_3.y = _World2Object[1].x;
  v_3.z = _World2Object[2].x;
  v_3.w = _World2Object[3].x;
  highp vec4 v_4;
  v_4.x = _World2Object[0].y;
  v_4.y = _World2Object[1].y;
  v_4.z = _World2Object[2].y;
  v_4.w = _World2Object[3].y;
  highp vec4 v_5;
  v_5.x = _World2Object[0].z;
  v_5.y = _World2Object[1].z;
  v_5.z = _World2Object[2].z;
  v_5.w = _World2Object[3].z;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(((
    (v_3.xyz * _glesNormal.x)
   + 
    (v_4.xyz * _glesNormal.y)
  ) + (v_5.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = _glesColor;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD2;
  highp vec2 tmpvar_9;
  tmpvar_9 = (_LightMatrix0 * tmpvar_8).xy;
  lowp float tmpvar_10;
  tmpvar_10 = texture2D (_LightTexture0, tmpvar_9).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_10);
  lowp vec4 c_11;
  lowp vec4 c_12;
  lowp float diff_13;
  mediump float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_13 = tmpvar_14;
  c_12.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_13);
  c_12.w = tmpvar_7.w;
  c_11.w = c_12.w;
  c_11.xyz = c_12.xyz;
  c_3.xyz = c_11.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 3379
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3380
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3381
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3382
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3383
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3384
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3385
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3386
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3387
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3388
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3389
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3390
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3391
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3392
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3393
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3394
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3395
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 3396
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 3397
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 3398
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 3399
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3400
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3401
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3402
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3403
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 3404
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in lowp vec4 vs_COLOR0;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec3 t10_1;
mediump float t16_6;
void main()
{
    //Instruction 3364
    //MUL
    t16_0.xy = vs_TEXCOORD2.yy * _LightMatrix0[1].xy;
    //Instruction 3365
    //MAD
    t16_0.xy = _LightMatrix0[0].xy * vs_TEXCOORD2.xx + t16_0.xy;
    //Instruction 3366
    //MAD
    t16_0.xy = _LightMatrix0[2].xy * vs_TEXCOORD2.zz + t16_0.xy;
    //Instruction 3367
    //ADD
    t16_0.xy = t16_0.xy + _LightMatrix0[3].xy;
    //Instruction 3368
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 3369
    //MUL
    t16_0.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 3370
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3371
    //MUL
    t16_1.xyz = t10_1.xyz * vs_COLOR0.xyz;
    //Instruction 3372
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 3373
    //DP3
    t16_6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 3374
    //MAX
    t16_6 = max(t16_6, 0.0);
    //Instruction 3375
    //MUL
    t16_0.xyz = vec3(t16_6) * t16_0.xyz;
    //Instruction 3376
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 3377
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3378
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "RenderType"="Opaque" }
  GpuProgramID 133276
Program "vp" {
SubProgram "gles " {
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 v_3;
  v_3.x = _World2Object[0].x;
  v_3.y = _World2Object[1].x;
  v_3.z = _World2Object[2].x;
  v_3.w = _World2Object[3].x;
  highp vec4 v_4;
  v_4.x = _World2Object[0].y;
  v_4.y = _World2Object[1].y;
  v_4.z = _World2Object[2].y;
  v_4.w = _World2Object[3].y;
  highp vec4 v_5;
  v_5.x = _World2Object[0].z;
  v_5.y = _World2Object[1].z;
  v_5.z = _World2Object[2].z;
  v_5.w = _World2Object[3].z;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(((
    (v_3.xyz * _glesNormal.x)
   + 
    (v_4.xyz * _glesNormal.y)
  ) + (v_5.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
varying mediump vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 4142
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4143
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4144
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4145
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4146
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4147
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4148
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4149
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4150
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4151
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4152
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4153
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4154
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4155
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4156
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4157
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 4158
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 4159
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 4160
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 4161
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4162
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4163
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4164
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4165
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
in mediump vec3 vs_TEXCOORD0;
layout(location = 0) out lowp vec4 SV_Target0;
void main()
{
    //Instruction 4139
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 4140
    //MOV
    SV_Target0.w = 0.0;
    //Instruction 4141
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "RenderType"="Opaque" }
  ZWrite Off
  GpuProgramID 256991
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = vec2(0.0, 0.0);
  highp vec4 v_7;
  v_7.x = _World2Object[0].x;
  v_7.y = _World2Object[1].x;
  v_7.z = _World2Object[2].x;
  v_7.w = _World2Object[3].x;
  highp vec4 v_8;
  v_8.x = _World2Object[0].y;
  v_8.y = _World2Object[1].y;
  v_8.z = _World2Object[2].y;
  v_8.w = _World2Object[3].y;
  highp vec4 v_9;
  v_9.x = _World2Object[0].z;
  v_9.y = _World2Object[1].z;
  v_9.z = _World2Object[2].z;
  v_9.w = _World2Object[3].z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalize(((
    (v_7.xyz * _glesNormal.x)
   + 
    (v_8.xyz * _glesNormal.y)
  ) + (v_9.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_11;
  mediump vec4 normal_12;
  normal_12 = tmpvar_10;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, normal_12);
  x1_14.y = dot (unity_SHAg, normal_12);
  x1_14.z = dot (unity_SHAb, normal_12);
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_12.xyzz * normal_12.yzzx);
  x2_13.x = dot (unity_SHBr, tmpvar_15);
  x2_13.y = dot (unity_SHBg, tmpvar_15);
  x2_13.z = dot (unity_SHBb, tmpvar_15);
  tmpvar_11 = ((x2_13 + (unity_SHC.xyz * 
    ((normal_12.x * normal_12.x) - (normal_12.y * normal_12.y))
  )) + x1_14);
  tmpvar_3 = tmpvar_11;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD2 = o_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_5;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_6;
  c_6.xyz = (tmpvar_4.xyz * light_3.xyz);
  c_6.w = tmpvar_4.w;
  c_2.xyz = c_6.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out lowp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 4177
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4178
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4179
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4180
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4181
    //MOV
    gl_Position = t0;
    //Instruction 4182
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4183
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4184
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 4185
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 4186
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 4187
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 4188
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4189
    //MUL
    t1.xzw = t0.xwy * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 4190
    //MOV
    vs_TEXCOORD2.zw = t0.zw;
    //Instruction 4191
    //ADD
    vs_TEXCOORD2.xy = t1.zz + t1.xw;
    //Instruction 4192
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4193
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4194
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4195
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4196
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4197
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4198
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4199
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4200
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4201
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4202
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4203
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4204
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 4205
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 4206
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 4207
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 4208
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 4209
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 4210
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 4211
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 4212
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 4213
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 4214
    //MOV
    t0.w = 1.0;
    //Instruction 4215
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 4216
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 4217
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 4218
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 4219
    //MOV
    vs_TEXCOORD4.xyz = t16_2.xyz;
    //Instruction 4220
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in lowp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_2;
void main()
{
    //Instruction 4166
    //DIV
    t0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    //Instruction 4167
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 4168
    //MAX
    t16_1.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 4169
    //LOG
    t16_1.xyz = log2(t16_1.xyz);
    //Instruction 4170
    //ADD
    t0.xyz = (-t16_1.xyz) + vs_TEXCOORD4.xyz;
    //Instruction 4171
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4172
    //MUL
    t16_2.xyz = t10_2.xyz * vs_COLOR0.xyz;
    //Instruction 4173
    //MUL
    t16_1.xyz = t0.xyz * t16_2.xyz;
    //Instruction 4174
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 4175
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4176
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  tmpvar_2.xy = vec2(0.0, 0.0);
  highp vec4 v_7;
  v_7.x = _World2Object[0].x;
  v_7.y = _World2Object[1].x;
  v_7.z = _World2Object[2].x;
  v_7.w = _World2Object[3].x;
  highp vec4 v_8;
  v_8.x = _World2Object[0].y;
  v_8.y = _World2Object[1].y;
  v_8.z = _World2Object[2].y;
  v_8.w = _World2Object[3].y;
  highp vec4 v_9;
  v_9.x = _World2Object[0].z;
  v_9.y = _World2Object[1].z;
  v_9.z = _World2Object[2].z;
  v_9.w = _World2Object[3].z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalize(((
    (v_7.xyz * _glesNormal.x)
   + 
    (v_8.xyz * _glesNormal.y)
  ) + (v_9.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_11;
  mediump vec4 normal_12;
  normal_12 = tmpvar_10;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, normal_12);
  x1_14.y = dot (unity_SHAg, normal_12);
  x1_14.z = dot (unity_SHAb, normal_12);
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_12.xyzz * normal_12.yzzx);
  x2_13.x = dot (unity_SHBr, tmpvar_15);
  x2_13.y = dot (unity_SHBg, tmpvar_15);
  x2_13.z = dot (unity_SHBb, tmpvar_15);
  tmpvar_11 = ((x2_13 + (unity_SHC.xyz * 
    ((normal_12.x * normal_12.x) - (normal_12.y * normal_12.y))
  )) + x1_14);
  tmpvar_3 = tmpvar_11;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD2 = o_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_5;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
  light_3.xyz = (light_3.xyz + pow ((
    (unity_DynamicLightmap_HDR.x * tmpvar_6.w)
   * tmpvar_6.xyz), unity_DynamicLightmap_HDR.yyy));
  lowp vec4 c_7;
  c_7.xyz = (tmpvar_4.xyz * light_3.xyz);
  c_7.w = tmpvar_4.w;
  c_2.xyz = c_7.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out lowp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 3423
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3424
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3425
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3426
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3427
    //MOV
    gl_Position = t0;
    //Instruction 3428
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3429
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3430
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 3431
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 3432
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 3433
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 3434
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3435
    //MUL
    t1.xzw = t0.xwy * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 3436
    //MOV
    vs_TEXCOORD2.zw = t0.zw;
    //Instruction 3437
    //ADD
    vs_TEXCOORD2.xy = t1.zz + t1.xw;
    //Instruction 3438
    //MAD
    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 3439
    //MOV
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    //Instruction 3440
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3441
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3442
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3443
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3444
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3445
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3446
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3447
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3448
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3449
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3450
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3451
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 3452
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 3453
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 3454
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 3455
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 3456
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 3457
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 3458
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 3459
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 3460
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 3461
    //MOV
    t0.w = 1.0;
    //Instruction 3462
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 3463
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 3464
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 3465
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 3466
    //MOV
    vs_TEXCOORD4.xyz = t16_2.xyz;
    //Instruction 3467
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
uniform lowp sampler2D unity_DynamicLightmap;
in highp vec2 vs_TEXCOORD0;
in lowp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
void main()
{
    //Instruction 3405
    //SAMPLE
    t10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
    //Instruction 3406
    //MUL
    t16_1.x = t10_0.w * unity_DynamicLightmap_HDR.x;
    //Instruction 3407
    //MUL
    t16_1.xyz = t10_0.xyz * t16_1.xxx;
    //Instruction 3408
    //LOG
    t16_1.xyz = log2(t16_1.xyz);
    //Instruction 3409
    //MUL
    t16_1.xyz = t16_1.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 3410
    //EXP
    t16_1.xyz = exp2(t16_1.xyz);
    //Instruction 3411
    //DIV
    t0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    //Instruction 3412
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 3413
    //MAX
    t16_2.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 3414
    //LOG
    t16_2.xyz = log2(t16_2.xyz);
    //Instruction 3415
    //ADD
    t0.xyz = (-t16_2.xyz) + vs_TEXCOORD4.xyz;
    //Instruction 3416
    //ADD
    t16_1.xyz = t16_1.xyz + t0.xyz;
    //Instruction 3417
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3418
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 3419
    //MUL
    t16_1.xyz = t16_1.xyz * t16_0.xyz;
    //Instruction 3420
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 3421
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3422
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = vec2(0.0, 0.0);
  highp vec4 v_7;
  v_7.x = _World2Object[0].x;
  v_7.y = _World2Object[1].x;
  v_7.z = _World2Object[2].x;
  v_7.w = _World2Object[3].x;
  highp vec4 v_8;
  v_8.x = _World2Object[0].y;
  v_8.y = _World2Object[1].y;
  v_8.z = _World2Object[2].y;
  v_8.w = _World2Object[3].y;
  highp vec4 v_9;
  v_9.x = _World2Object[0].z;
  v_9.y = _World2Object[1].z;
  v_9.z = _World2Object[2].z;
  v_9.w = _World2Object[3].z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalize(((
    (v_7.xyz * _glesNormal.x)
   + 
    (v_8.xyz * _glesNormal.y)
  ) + (v_9.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_11;
  mediump vec4 normal_12;
  normal_12 = tmpvar_10;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, normal_12);
  x1_14.y = dot (unity_SHAg, normal_12);
  x1_14.z = dot (unity_SHAb, normal_12);
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_12.xyzz * normal_12.yzzx);
  x2_13.x = dot (unity_SHBr, tmpvar_15);
  x2_13.y = dot (unity_SHBg, tmpvar_15);
  x2_13.z = dot (unity_SHBb, tmpvar_15);
  tmpvar_11 = ((x2_13 + (unity_SHC.xyz * 
    ((normal_12.x * normal_12.x) - (normal_12.y * normal_12.y))
  )) + x1_14);
  tmpvar_3 = tmpvar_11;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD2 = o_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_6.w;
  light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
  lowp vec4 c_7;
  c_7.xyz = (tmpvar_4.xyz * light_3.xyz);
  c_7.w = tmpvar_4.w;
  c_2.xyz = c_7.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out lowp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 3478
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3479
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3480
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3481
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3482
    //MOV
    gl_Position = t0;
    //Instruction 3483
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3484
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3485
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 3486
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 3487
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 3488
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 3489
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 3490
    //MUL
    t1.xzw = t0.xwy * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 3491
    //MOV
    vs_TEXCOORD2.zw = t0.zw;
    //Instruction 3492
    //ADD
    vs_TEXCOORD2.xy = t1.zz + t1.xw;
    //Instruction 3493
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 3494
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3495
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3496
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3497
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3498
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3499
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3500
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3501
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3502
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3503
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3504
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3505
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 3506
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 3507
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 3508
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 3509
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 3510
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 3511
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 3512
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 3513
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 3514
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 3515
    //MOV
    t0.w = 1.0;
    //Instruction 3516
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 3517
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 3518
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 3519
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 3520
    //MOV
    vs_TEXCOORD4.xyz = t16_2.xyz;
    //Instruction 3521
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in lowp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_2;
void main()
{
    //Instruction 3468
    //DIV
    t0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    //Instruction 3469
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 3470
    //MAX
    t16_1.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 3471
    //ADD
    t0.xyz = t16_1.xyz + vs_TEXCOORD4.xyz;
    //Instruction 3472
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3473
    //MUL
    t16_2.xyz = t10_2.xyz * vs_COLOR0.xyz;
    //Instruction 3474
    //MUL
    t16_1.xyz = t0.xyz * t16_2.xyz;
    //Instruction 3475
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 3476
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3477
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  tmpvar_2.xy = vec2(0.0, 0.0);
  highp vec4 v_7;
  v_7.x = _World2Object[0].x;
  v_7.y = _World2Object[1].x;
  v_7.z = _World2Object[2].x;
  v_7.w = _World2Object[3].x;
  highp vec4 v_8;
  v_8.x = _World2Object[0].y;
  v_8.y = _World2Object[1].y;
  v_8.z = _World2Object[2].y;
  v_8.w = _World2Object[3].y;
  highp vec4 v_9;
  v_9.x = _World2Object[0].z;
  v_9.y = _World2Object[1].z;
  v_9.z = _World2Object[2].z;
  v_9.w = _World2Object[3].z;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalize(((
    (v_7.xyz * _glesNormal.x)
   + 
    (v_8.xyz * _glesNormal.y)
  ) + (v_9.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_11;
  mediump vec4 normal_12;
  normal_12 = tmpvar_10;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, normal_12);
  x1_14.y = dot (unity_SHAg, normal_12);
  x1_14.z = dot (unity_SHAb, normal_12);
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_12.xyzz * normal_12.yzzx);
  x2_13.x = dot (unity_SHBr, tmpvar_15);
  x2_13.y = dot (unity_SHBg, tmpvar_15);
  x2_13.z = dot (unity_SHBb, tmpvar_15);
  tmpvar_11 = ((x2_13 + (unity_SHC.xyz * 
    ((normal_12.x * normal_12.x) - (normal_12.y * normal_12.y))
  )) + x1_14);
  tmpvar_3 = tmpvar_11;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD2 = o_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_6.w;
  light_3.xyz = (tmpvar_6.xyz + xlv_TEXCOORD4);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
  light_3.xyz = (light_3.xyz + pow ((
    (unity_DynamicLightmap_HDR.x * tmpvar_7.w)
   * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy));
  lowp vec4 c_8;
  c_8.xyz = (tmpvar_4.xyz * light_3.xyz);
  c_8.w = tmpvar_4.w;
  c_2.xyz = c_8.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out lowp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 4238
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4239
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4240
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4241
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4242
    //MOV
    gl_Position = t0;
    //Instruction 4243
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4244
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4245
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 4246
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 4247
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 4248
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 4249
    //MUL
    t0.y = t0.y * _ProjectionParams.x;
    //Instruction 4250
    //MUL
    t1.xzw = t0.xwy * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 4251
    //MOV
    vs_TEXCOORD2.zw = t0.zw;
    //Instruction 4252
    //ADD
    vs_TEXCOORD2.xy = t1.zz + t1.xw;
    //Instruction 4253
    //MAD
    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 4254
    //MOV
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    //Instruction 4255
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4256
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4257
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4258
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4259
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4260
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4261
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4262
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4263
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4264
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4265
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4266
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 4267
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 4268
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 4269
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 4270
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 4271
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 4272
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 4273
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 4274
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 4275
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 4276
    //MOV
    t0.w = 1.0;
    //Instruction 4277
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 4278
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 4279
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 4280
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 4281
    //MOV
    vs_TEXCOORD4.xyz = t16_2.xyz;
    //Instruction 4282
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
uniform lowp sampler2D unity_DynamicLightmap;
in highp vec2 vs_TEXCOORD0;
in lowp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
void main()
{
    //Instruction 4221
    //SAMPLE
    t10_0 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
    //Instruction 4222
    //MUL
    t16_1.x = t10_0.w * unity_DynamicLightmap_HDR.x;
    //Instruction 4223
    //MUL
    t16_1.xyz = t10_0.xyz * t16_1.xxx;
    //Instruction 4224
    //LOG
    t16_1.xyz = log2(t16_1.xyz);
    //Instruction 4225
    //MUL
    t16_1.xyz = t16_1.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 4226
    //EXP
    t16_1.xyz = exp2(t16_1.xyz);
    //Instruction 4227
    //DIV
    t0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    //Instruction 4228
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 4229
    //MAX
    t16_2.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 4230
    //ADD
    t0.xyz = t16_2.xyz + vs_TEXCOORD4.xyz;
    //Instruction 4231
    //ADD
    t16_1.xyz = t16_1.xyz + t0.xyz;
    //Instruction 4232
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4233
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 4234
    //MUL
    t16_1.xyz = t16_1.xyz * t16_0.xyz;
    //Instruction 4235
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 4236
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4237
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="Deferred" "RenderType"="Opaque" }
  GpuProgramID 319638
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 v_4;
  v_4.x = _World2Object[0].x;
  v_4.y = _World2Object[1].x;
  v_4.z = _World2Object[2].x;
  v_4.w = _World2Object[3].x;
  highp vec4 v_5;
  v_5.x = _World2Object[0].y;
  v_5.y = _World2Object[1].y;
  v_5.z = _World2Object[2].y;
  v_5.w = _World2Object[3].y;
  highp vec4 v_6;
  v_6.x = _World2Object[0].z;
  v_6.y = _World2Object[1].z;
  v_6.z = _World2Object[2].z;
  v_6.w = _World2Object[3].z;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(((
    (v_4.xyz * _glesNormal.x)
   + 
    (v_5.xyz * _glesNormal.y)
  ) + (v_6.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = worldNormal_1;
  mediump vec4 normal_9;
  normal_9 = tmpvar_8;
  mediump vec3 x2_10;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, normal_9);
  x1_11.y = dot (unity_SHAg, normal_9);
  x1_11.z = dot (unity_SHAb, normal_9);
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_9.xyzz * normal_9.yzzx);
  x2_10.x = dot (unity_SHBr, tmpvar_12);
  x2_10.y = dot (unity_SHBg, tmpvar_12);
  x2_10.z = dot (unity_SHBb, tmpvar_12);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((x2_10 + (unity_SHC.xyz * 
    ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y))
  )) + x1_11);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  mediump vec4 outDiffuseOcclusion_5;
  mediump vec4 outNormal_6;
  mediump vec4 emission_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_4.xyz;
  outDiffuseOcclusion_5 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_6 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = vec3(0.0, 0.0, 0.0);
  emission_7 = tmpvar_10;
  emission_7.xyz = (emission_7.xyz + (tmpvar_4.xyz * xlv_TEXCOORD5));
  outDiffuse_1.xyz = outDiffuseOcclusion_5.xyz;
  outEmission_2.w = emission_7.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_7.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_6;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 4295
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4296
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4297
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4298
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4299
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4300
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4301
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4302
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4303
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4304
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4305
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4306
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4307
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4308
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4309
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4310
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4311
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 4312
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 4313
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 4314
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 4315
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4316
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 4317
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 4318
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 4319
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 4320
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4321
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 4322
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 4323
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 4324
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 4325
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 4326
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 4327
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 4328
    //MOV
    t0.w = 1.0;
    //Instruction 4329
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 4330
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 4331
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 4332
    //ADD
    vs_TEXCOORD5.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 4333
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
void main()
{
    //Instruction 4283
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4284
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 4285
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 4286
    //MUL
    t16_1.xyz = t16_0.xyz * vs_TEXCOORD5.xyz;
    //Instruction 4287
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 4288
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4289
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4290
    //MAD
    t10_2.xyz = vs_TEXCOORD1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 4291
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 4292
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 4293
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 4294
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 v_4;
  v_4.x = _World2Object[0].x;
  v_4.y = _World2Object[1].x;
  v_4.z = _World2Object[2].x;
  v_4.w = _World2Object[3].x;
  highp vec4 v_5;
  v_5.x = _World2Object[0].y;
  v_5.y = _World2Object[1].y;
  v_5.z = _World2Object[2].y;
  v_5.w = _World2Object[3].y;
  highp vec4 v_6;
  v_6.x = _World2Object[0].z;
  v_6.y = _World2Object[1].z;
  v_6.z = _World2Object[2].z;
  v_6.w = _World2Object[3].z;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(((
    (v_4.xyz * _glesNormal.x)
   + 
    (v_5.xyz * _glesNormal.y)
  ) + (v_6.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  tmpvar_3.xy = vec2(0.0, 0.0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
  mediump vec4 outDiffuseOcclusion_6;
  mediump vec4 outNormal_7;
  mediump vec4 emission_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = tmpvar_4.xyz;
  outDiffuseOcclusion_6 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = vec3(0.0, 0.0, 0.0);
  emission_8 = tmpvar_11;
  emission_8.xyz = (emission_8.xyz + (tmpvar_4.xyz * pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_5.w) * tmpvar_5.xyz)
  , unity_DynamicLightmap_HDR.yyy)));
  outDiffuse_1.xyz = outDiffuseOcclusion_6.xyz;
  outEmission_2.w = emission_8.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_8.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_7;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD4;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 3540
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3541
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3542
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3543
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3544
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3545
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3546
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3547
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3548
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3549
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3550
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3551
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3552
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3553
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3554
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3555
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3556
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 3557
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 3558
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 3559
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 3560
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3561
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3562
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3563
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3564
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 3565
    //MAD
    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 3566
    //MOV
    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
    //Instruction 3567
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_DynamicLightmap;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
lowp vec3 t10_0;
lowp vec4 t10_1;
mediump vec3 t16_2;
void main()
{
    //Instruction 3522
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3523
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 3524
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 3525
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3526
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 3527
    //MAD
    t10_1.xyz = vs_TEXCOORD1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 3528
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 3529
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 3530
    //SAMPLE
    t10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
    //Instruction 3531
    //MUL
    t16_2.x = t10_1.w * unity_DynamicLightmap_HDR.x;
    //Instruction 3532
    //MUL
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    //Instruction 3533
    //LOG
    t16_2.xyz = log2(t16_2.xyz);
    //Instruction 3534
    //MUL
    t16_2.xyz = t16_2.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 3535
    //EXP
    t16_2.xyz = exp2(t16_2.xyz);
    //Instruction 3536
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 3537
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 3538
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 3539
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 v_4;
  v_4.x = _World2Object[0].x;
  v_4.y = _World2Object[1].x;
  v_4.z = _World2Object[2].x;
  v_4.w = _World2Object[3].x;
  highp vec4 v_5;
  v_5.x = _World2Object[0].y;
  v_5.y = _World2Object[1].y;
  v_5.z = _World2Object[2].y;
  v_5.w = _World2Object[3].y;
  highp vec4 v_6;
  v_6.x = _World2Object[0].z;
  v_6.y = _World2Object[1].z;
  v_6.z = _World2Object[2].z;
  v_6.w = _World2Object[3].z;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(((
    (v_4.xyz * _glesNormal.x)
   + 
    (v_5.xyz * _glesNormal.y)
  ) + (v_6.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = worldNormal_1;
  mediump vec4 normal_9;
  normal_9 = tmpvar_8;
  mediump vec3 x2_10;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, normal_9);
  x1_11.y = dot (unity_SHAg, normal_9);
  x1_11.z = dot (unity_SHAb, normal_9);
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_9.xyzz * normal_9.yzzx);
  x2_10.x = dot (unity_SHBr, tmpvar_12);
  x2_10.y = dot (unity_SHBg, tmpvar_12);
  x2_10.z = dot (unity_SHBb, tmpvar_12);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD5 = ((x2_10 + (unity_SHC.xyz * 
    ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y))
  )) + x1_11);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  mediump vec4 outDiffuseOcclusion_4;
  mediump vec4 outNormal_5;
  mediump vec4 emission_6;
  lowp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_3.xyz;
  outDiffuseOcclusion_4 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_5 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = vec3(0.0, 0.0, 0.0);
  emission_6 = tmpvar_9;
  emission_6.xyz = (emission_6.xyz + (tmpvar_3.xyz * xlv_TEXCOORD5));
  outDiffuse_1.xyz = outDiffuseOcclusion_4.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_5;
  gl_FragData[3] = emission_6;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 3579
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3580
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3581
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3582
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3583
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3584
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3585
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3586
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3587
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3588
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3589
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3590
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3591
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3592
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3593
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3594
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 3595
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 3596
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 3597
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 3598
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 3599
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3600
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 3601
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 3602
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 3603
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 3604
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 3605
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 3606
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 3607
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 3608
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 3609
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 3610
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 3611
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 3612
    //MOV
    t0.w = 1.0;
    //Instruction 3613
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 3614
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 3615
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 3616
    //ADD
    vs_TEXCOORD5.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 3617
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
lowp vec3 t10_0;
lowp vec3 t10_1;
void main()
{
    //Instruction 3568
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3569
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 3570
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 3571
    //MUL
    SV_Target3.xyz = t16_0.xyz * vs_TEXCOORD5.xyz;
    //Instruction 3572
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3573
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 3574
    //MAD
    t10_1.xyz = vs_TEXCOORD1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 3575
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 3576
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 3577
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 3578
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 v_4;
  v_4.x = _World2Object[0].x;
  v_4.y = _World2Object[1].x;
  v_4.z = _World2Object[2].x;
  v_4.w = _World2Object[3].x;
  highp vec4 v_5;
  v_5.x = _World2Object[0].y;
  v_5.y = _World2Object[1].y;
  v_5.z = _World2Object[2].y;
  v_5.w = _World2Object[3].y;
  highp vec4 v_6;
  v_6.x = _World2Object[0].z;
  v_6.y = _World2Object[1].z;
  v_6.z = _World2Object[2].z;
  v_6.w = _World2Object[3].z;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(((
    (v_4.xyz * _glesNormal.x)
   + 
    (v_5.xyz * _glesNormal.y)
  ) + (v_6.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  tmpvar_3.xy = vec2(0.0, 0.0);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform sampler2D _MainTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD4.zw);
  mediump vec4 outDiffuseOcclusion_5;
  mediump vec4 outNormal_6;
  mediump vec4 emission_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_3.xyz;
  outDiffuseOcclusion_5 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_6 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = vec3(0.0, 0.0, 0.0);
  emission_7 = tmpvar_10;
  emission_7.xyz = (emission_7.xyz + (tmpvar_3.xyz * pow (
    ((unity_DynamicLightmap_HDR.x * tmpvar_4.w) * tmpvar_4.xyz)
  , unity_DynamicLightmap_HDR.yyy)));
  outDiffuse_1.xyz = outDiffuseOcclusion_5.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_6;
  gl_FragData[3] = emission_7;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD4;
highp vec4 t0;
highp vec3 t1;
highp float t6;
void main()
{
    //Instruction 4351
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4352
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 4353
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 4354
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4355
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4356
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4357
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4358
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4359
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4360
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4361
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4362
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4363
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4364
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4365
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4366
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 4367
    //DP3
    t6 = dot(t0.xyz, t0.xyz);
    //Instruction 4368
    //RSQ
    t6 = inversesqrt(t6);
    //Instruction 4369
    //MUL
    t0.xyz = vec3(t6) * t0.xyz;
    //Instruction 4370
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 4371
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4372
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4373
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4374
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4375
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 4376
    //MAD
    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 4377
    //MOV
    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
    //Instruction 4378
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_DynamicLightmap;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
lowp vec3 t10_0;
lowp vec4 t10_1;
mediump vec3 t16_2;
void main()
{
    //Instruction 4334
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4335
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 4336
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 4337
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4338
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 4339
    //MAD
    t10_1.xyz = vs_TEXCOORD1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 4340
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 4341
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 4342
    //SAMPLE
    t10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
    //Instruction 4343
    //MUL
    t16_2.x = t10_1.w * unity_DynamicLightmap_HDR.x;
    //Instruction 4344
    //MUL
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    //Instruction 4345
    //LOG
    t16_2.xyz = log2(t16_2.xyz);
    //Instruction 4346
    //MUL
    t16_2.xyz = t16_2.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 4347
    //EXP
    t16_2.xyz = exp2(t16_2.xyz);
    //Instruction 4348
    //MUL
    SV_Target3.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 4349
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 4350
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "META"
  Tags { "LIGHTMODE"="Meta" "RenderType"="Opaque" }
  Cull Off
  GpuProgramID 337708
Program "vp" {
SubProgram "gles " {
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
uniform bvec4 unity_MetaVertexControl;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec4 vertex_2;
  vertex_2 = _glesVertex;
  if (unity_MetaVertexControl.x) {
    vertex_2.xy = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
    highp float tmpvar_3;
    if ((_glesVertex.z > 0.0)) {
      tmpvar_3 = 0.0001;
    } else {
      tmpvar_3 = 0.0;
    };
    vertex_2.z = tmpvar_3;
  };
  if (unity_MetaVertexControl.y) {
    vertex_2.xy = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
    highp float tmpvar_4;
    if ((vertex_2.z > 0.0)) {
      tmpvar_4 = 0.0001;
    } else {
      tmpvar_4 = 0.0;
    };
    vertex_2.z = tmpvar_4;
  };
  gl_Position = (glstate_matrix_mvp * vertex_2);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_COLOR0 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform bvec4 unity_MetaFragmentControl;
uniform highp float unity_OneOverOutputBoost;
uniform highp float unity_MaxOutputValue;
uniform highp float unity_UseLinearSpace;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0).xyz;
  tmpvar_2 = tmpvar_3;
  mediump vec4 res_4;
  res_4 = vec4(0.0, 0.0, 0.0, 0.0);
  if (unity_MetaFragmentControl.x) {
    mediump vec4 tmpvar_5;
    tmpvar_5.w = 1.0;
    tmpvar_5.xyz = tmpvar_2;
    res_4.w = tmpvar_5.w;
    highp vec3 tmpvar_6;
    tmpvar_6 = clamp (pow (tmpvar_2, vec3(clamp (unity_OneOverOutputBoost, 0.0, 1.0))), vec3(0.0, 0.0, 0.0), vec3(unity_MaxOutputValue));
    res_4.xyz = tmpvar_6;
  };
  if (unity_MetaFragmentControl.y) {
    mediump vec3 emission_7;
    if (bool(unity_UseLinearSpace)) {
      emission_7 = vec3(0.0, 0.0, 0.0);
    } else {
      emission_7 = vec3(0.0, 0.0, 0.0);
    };
    mediump vec4 tmpvar_8;
    highp vec4 rgbm_9;
    highp vec4 tmpvar_10;
    tmpvar_10.w = 1.0;
    tmpvar_10.xyz = (emission_7 * 0.01030928);
    rgbm_9.xyz = tmpvar_10.xyz;
    rgbm_9.w = max (max (tmpvar_10.x, tmpvar_10.y), max (tmpvar_10.z, 0.02));
    rgbm_9.w = (ceil((rgbm_9.w * 255.0)) / 255.0);
    rgbm_9.w = max (rgbm_9.w, 0.02);
    rgbm_9.xyz = (tmpvar_10.xyz / rgbm_9.w);
    tmpvar_8 = rgbm_9;
    res_4 = tmpvar_8;
  };
  tmpvar_1 = res_4;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float unity_UseLinearSpace;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out lowp vec4 vs_COLOR0;
highp vec4 t0;
bool tb0;
highp vec4 t1;
bool tb6;
void main()
{
    //Instruction 4391
    //LT
    tb0 = 0.0<in_POSITION0.z;
    //Instruction 4392
    //AND
    t0.z = tb0 ? 0.000100 : float(0.0);
    //Instruction 4393
    //MAD
    t0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    //Instruction 4394
    //MOVC
    t0.xyz = (unity_MetaVertexControl.x) ? t0.xyz : in_POSITION0.xyz;
    //Instruction 4395
    //LT
    tb6 = 0.0<t0.z;
    //Instruction 4396
    //AND
    t1.z = tb6 ? 0.000100 : float(0.0);
    //Instruction 4397
    //MAD
    t1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 4398
    //MOVC
    t0.xyz = (unity_MetaVertexControl.y) ? t1.xyz : t0.xyz;
    //Instruction 4399
    //MUL
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4400
    //MAD
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    //Instruction 4401
    //MAD
    t0 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    //Instruction 4402
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 4403
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4404
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4405
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 4406
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 4407
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 4408
    //MOV
    vs_COLOR0 = in_COLOR0;
    //Instruction 4409
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	bvec4 unity_MetaVertexControl;
uniform 	bvec4 unity_MetaFragmentControl;
uniform 	float unity_OneOverOutputBoost;
uniform 	float unity_MaxOutputValue;
uniform 	float unity_UseLinearSpace;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in lowp vec4 vs_COLOR0;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec3 t10_0;
highp float t3;
void main()
{
    //Instruction 4379
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 4380
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 4381
    //LOG
    t16_0.xyz = log2(t16_0.xyz);
    //Instruction 4382
    //MOV
    t3 = unity_OneOverOutputBoost;
    t3 = clamp(t3, 0.0, 1.0);
    //Instruction 4383
    //MUL
    t0.xyz = t16_0.xyz * vec3(t3);
    //Instruction 4384
    //EXP
    t0.xyz = exp2(t0.xyz);
    //Instruction 4385
    //MIN
    t0.xyz = min(t0.xyz, vec3(unity_MaxOutputValue));
    //Instruction 4386
    //MOVC
    t16_0.xyz = (unity_MetaFragmentControl.x) ? t0.xyz : vec3(0.0, 0.0, 0.0);
    //Instruction 4387
    //MOVC
    t16_0.w = (unity_MetaFragmentControl.x) ? 1.0 : 0.0;
    //Instruction 4388
    //MOVC
    t16_0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 0.023529) : t16_0;
    //Instruction 4389
    //MOV
    SV_Target0 = t16_0;
    //Instruction 4390
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
}
SubShader { 
 Tags { "RenderType"="Opaque" }
 Pass {
  Tags { "LIGHTMODE"="Vertex" "RenderType"="Opaque" }
  Lighting On
  ColorMaterial AmbientAndDiffuse
  SetTexture [_MainTex] { ConstantColor (1,1,1,1) combine texture * primary double, constant alpha }
 }
 Pass {
  Tags { "LIGHTMODE"="VertexLMRGBM" "RenderType"="Opaque" }
  BindChannels {
   Bind "vertex", Vertex
   Bind "texcoord1", TexCoord0
   Bind "texcoord", TexCoord1
  }
  ColorMaterial AmbientAndDiffuse
  SetTexture [unity_Lightmap] { Matrix [unity_LightmapMatrix] combine texture * texture alpha double }
  SetTexture [_MainTex] { combine texture * previous quad, constant alpha }
 }
}
Fallback "VertexLit"
}                        WavingGrass #% Shader "Hidden/TerrainEngine/Details/WavingDoublePass" {
Properties {
 _WavingTint ("Fade Color", Color) = (0.7,0.6,0.5,0)
 _MainTex ("Base (RGB) Alpha (A)", 2D) = "white" { }
 _WaveAndDistance ("Wave and distance", Vector) = (12,3.6,1,1)
 _Cutoff ("Cutoff", Float) = 0.5
}
SubShader { 
 LOD 200
 Tags { "QUEUE"="Geometry+200" "IGNOREPROJECTOR"="true" "DisableBatching"="true" "RenderType"="Grass" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry+200" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "DisableBatching"="true" "RenderType"="Grass" }
  Cull Off
  GpuProgramID 59195
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 s_7;
  highp vec4 waves_8;
  waves_8 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_8 = (waves_8 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_8 = (waves_8 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_9;
  tmpvar_9 = fract(waves_8);
  waves_8 = tmpvar_9;
  highp vec4 val_10;
  highp vec4 s_11;
  val_10 = ((tmpvar_9 * 6.408849) - 3.141593);
  highp vec4 tmpvar_12;
  tmpvar_12 = (val_10 * val_10);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * val_10);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_12);
  s_11 = (((val_10 + 
    (tmpvar_13 * -0.1616162)
  ) + (tmpvar_14 * 0.0083333)) + ((tmpvar_14 * tmpvar_12) * -0.00019841));
  s_7 = (s_11 * s_11);
  s_7 = (s_7 * s_7);
  highp float tmpvar_15;
  tmpvar_15 = (dot (s_7, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_7 = (s_7 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (s_7, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (s_7, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_15));
  waveColor_5 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_19.w = color_4.w;
  highp vec4 v_20;
  v_20.x = _World2Object[0].x;
  v_20.y = _World2Object[1].x;
  v_20.z = _World2Object[2].x;
  v_20.w = _World2Object[3].x;
  highp vec4 v_21;
  v_21.x = _World2Object[0].y;
  v_21.y = _World2Object[1].y;
  v_21.z = _World2Object[2].y;
  v_21.w = _World2Object[3].y;
  highp vec4 v_22;
  v_22.x = _World2Object[0].z;
  v_22.y = _World2Object[1].z;
  v_22.z = _World2Object[2].z;
  v_22.w = _World2Object[3].z;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(((
    (v_20.xyz * _glesNormal.x)
   + 
    (v_21.xyz * _glesNormal.y)
  ) + (v_22.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_23;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = worldNormal_1;
  mediump vec4 normal_25;
  normal_25 = tmpvar_24;
  mediump vec3 x2_26;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, normal_25);
  x1_27.y = dot (unity_SHAg, normal_25);
  x1_27.z = dot (unity_SHAb, normal_25);
  mediump vec4 tmpvar_28;
  tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
  x2_26.x = dot (unity_SHBr, tmpvar_28);
  x2_26.y = dot (unity_SHBg, tmpvar_28);
  x2_26.z = dot (unity_SHBb, tmpvar_28);
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * vertex_3).xyz;
  xlv_COLOR0 = tmpvar_19;
  xlv_TEXCOORD3 = ((x2_26 + (unity_SHC.xyz * 
    ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
  )) + x1_27);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_8;
  x_8 = (tmpvar_7.w - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_9;
  lowp vec4 c_10;
  lowp float diff_11;
  mediump float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_11 = tmpvar_12;
  c_10.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_11);
  c_10.w = (tmpvar_7.w * xlv_COLOR0.w);
  c_9.w = c_10.w;
  c_9.xyz = (c_10.xyz + (tmpvar_7.xyz * xlv_TEXCOORD3));
  c_3.xyz = c_9.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
highp float t22;
void main()
{
    //Instruction 4423
    //MUL
    t0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
    //Instruction 4424
    //MUL
    t1 = t0.yyyy * vec4(0.006000, 0.020000, 0.020000, 0.050000);
    //Instruction 4425
    //MAD
    t0 = t0.xxxx * vec4(0.012000, 0.020000, 0.060000, 0.024000) + t1;
    //Instruction 4426
    //MAD
    t0 = _WaveAndDistance.xxxx * vec4(1.200000, 2.000000, 1.600000, 4.800000) + t0;
    //Instruction 4427
    //FRC
    t0 = fract(t0);
    //Instruction 4428
    //MAD
    t0 = t0 * vec4(6.408849, 6.408849, 6.408849, 6.408849) + vec4(-3.141593, -3.141593, -3.141593, -3.141593);
    //Instruction 4429
    //MUL
    t1 = t0 * t0;
    //Instruction 4430
    //MUL
    t2 = t0 * t1;
    //Instruction 4431
    //MAD
    t0 = t2 * vec4(-0.161616, -0.161616, -0.161616, -0.161616) + t0;
    //Instruction 4432
    //MUL
    t2 = t1 * t2;
    //Instruction 4433
    //MUL
    t1 = t1 * t2;
    //Instruction 4434
    //MAD
    t0 = t2 * vec4(0.008333, 0.008333, 0.008333, 0.008333) + t0;
    //Instruction 4435
    //MAD
    t0 = t1 * vec4(-0.000198, -0.000198, -0.000198, -0.000198) + t0;
    //Instruction 4436
    //MUL
    t0 = t0 * t0;
    //Instruction 4437
    //MUL
    t0 = t0 * t0;
    //Instruction 4438
    //MUL
    t1.x = in_COLOR0.w * _WaveAndDistance.z;
    //Instruction 4439
    //MUL
    t1 = t0 * t1.xxxx;
    //Instruction 4440
    //DP4
    t0.x = dot(t0, vec4(0.674200, 0.674200, 0.269680, 0.134840));
    //Instruction 4441
    //MUL
    t0.x = t0.x * 0.700000;
    //Instruction 4442
    //DP4
    t2.x = dot(t1, vec4(0.024000, 0.040000, -0.120000, 0.096000));
    //Instruction 4443
    //DP4
    t2.z = dot(t1, vec4(0.006000, 0.020000, -0.020000, 0.100000));
    //Instruction 4444
    //MAD
    t1.xz = (-t2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    //Instruction 4445
    //MUL
    t2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4446
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 4447
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 4448
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 4449
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4450
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4451
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4452
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4453
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4454
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4455
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4456
    //ADD
    t7.xyz = t2.xyz + t3.xyz;
    //Instruction 4457
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4458
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4459
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4460
    //ADD
    t7.xyz = t7.xyz + t2.xyz;
    //Instruction 4461
    //DP3
    t22 = dot(t7.xyz, t7.xyz);
    //Instruction 4462
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 4463
    //MUL
    t2.xyz = t7.xyz * vec3(t22);
    //Instruction 4464
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 4465
    //MUL
    t7.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4466
    //MAD
    t7.xyz = _Object2World[0].xyz * t1.xxx + t7.xyz;
    //Instruction 4467
    //MAD
    t7.xyz = _Object2World[2].xyz * t1.zzz + t7.xyz;
    //Instruction 4468
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t7.xyz;
    //Instruction 4469
    //ADD
    t10_4.xyz = _WavingTint.xyz + vec3(-0.500000, -0.500000, -0.500000);
    //Instruction 4470
    //MAD
    t10_4.xyz = t0.xxx * t10_4.xyz + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 4471
    //MUL
    t10_4.xyz = t10_4.xyz * in_COLOR0.xyz;
    //Instruction 4472
    //MUL
    vs_COLOR0.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 4473
    //MOV
    t1.y = in_POSITION0.y;
    //Instruction 4474
    //ADD
    t0.xyz = t1.xyz + (-_CameraPosition.xyz);
    //Instruction 4475
    //DP3
    t0.x = dot(t0.xyz, t0.xyz);
    //Instruction 4476
    //ADD
    t0.x = (-t0.x) + _WaveAndDistance.w;
    //Instruction 4477
    //DP2
    t0.x = dot(_CameraPosition.ww, t0.xx);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4478
    //MOV
    vs_COLOR0.w = t0.x;
    //Instruction 4479
    //MUL
    t16_5.x = t2.y * t2.y;
    //Instruction 4480
    //MAD
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    //Instruction 4481
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 4482
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 4483
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 4484
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 4485
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 4486
    //MOV
    t2.w = 1.0;
    //Instruction 4487
    //DP4
    t16_6.x = dot(unity_SHAr, t2);
    //Instruction 4488
    //DP4
    t16_6.y = dot(unity_SHAg, t2);
    //Instruction 4489
    //DP4
    t16_6.z = dot(unity_SHAb, t2);
    //Instruction 4490
    //ADD
    vs_TEXCOORD3.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 4491
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 4410
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 4411
    //MAD
    t10_1 = t10_0.w * vs_COLOR0.w + (-_Cutoff);
    //Instruction 4412
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 4413
    //LT
    tb12 = t10_1<0.0;
    //Instruction 4414
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 4415
    //MUL
    t16_2.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 4416
    //MUL
    t16_3.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 4417
    //DP3
    t16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4418
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 4419
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_14) + t16_3.xyz;
    //Instruction 4420
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 4421
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4422
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 s_8;
  highp vec4 waves_9;
  waves_9 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_9 = (waves_9 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_9 = (waves_9 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_10;
  tmpvar_10 = fract(waves_9);
  waves_9 = tmpvar_10;
  highp vec4 val_11;
  highp vec4 s_12;
  val_11 = ((tmpvar_10 * 6.408849) - 3.141593);
  highp vec4 tmpvar_13;
  tmpvar_13 = (val_11 * val_11);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * val_11);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * tmpvar_13);
  s_12 = (((val_11 + 
    (tmpvar_14 * -0.1616162)
  ) + (tmpvar_15 * 0.0083333)) + ((tmpvar_15 * tmpvar_13) * -0.00019841));
  s_8 = (s_12 * s_12);
  s_8 = (s_8 * s_8);
  highp float tmpvar_16;
  tmpvar_16 = (dot (s_8, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_8 = (s_8 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (s_8, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (s_8, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_16));
  waveColor_6 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_19;
  tmpvar_19 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_18, tmpvar_18))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_20.w = color_5.w;
  highp vec4 v_21;
  v_21.x = _World2Object[0].x;
  v_21.y = _World2Object[1].x;
  v_21.z = _World2Object[2].x;
  v_21.w = _World2Object[3].x;
  highp vec4 v_22;
  v_22.x = _World2Object[0].y;
  v_22.y = _World2Object[1].y;
  v_22.z = _World2Object[2].y;
  v_22.w = _World2Object[3].y;
  highp vec4 v_23;
  v_23.x = _World2Object[0].z;
  v_23.y = _World2Object[1].z;
  v_23.z = _World2Object[2].z;
  v_23.w = _World2Object[3].z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(((
    (v_21.xyz * _glesNormal.x)
   + 
    (v_22.xyz * _glesNormal.y)
  ) + (v_23.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_24;
  tmpvar_2 = worldNormal_1;
  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * vertex_4).xyz;
  xlv_COLOR0 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_8;
  x_8 = (tmpvar_7.w - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_9 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_10.w) * tmpvar_10.xyz), unity_DynamicLightmap_HDR.yyy);
  lowp vec4 c_11;
  lowp vec4 c_12;
  lowp float diff_13;
  mediump float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_13 = tmpvar_14;
  c_12.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_13);
  c_12.w = (tmpvar_7.w * xlv_COLOR0.w);
  c_11.w = c_12.w;
  c_11.xyz = (c_12.xyz + (tmpvar_7.xyz * tmpvar_9));
  c_3.xyz = c_11.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
lowp vec3 t10_4;
highp vec3 t5;
highp float t16;
void main()
{
    //Instruction 3637
    //MUL
    t0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
    //Instruction 3638
    //MUL
    t1 = t0.yyyy * vec4(0.006000, 0.020000, 0.020000, 0.050000);
    //Instruction 3639
    //MAD
    t0 = t0.xxxx * vec4(0.012000, 0.020000, 0.060000, 0.024000) + t1;
    //Instruction 3640
    //MAD
    t0 = _WaveAndDistance.xxxx * vec4(1.200000, 2.000000, 1.600000, 4.800000) + t0;
    //Instruction 3641
    //FRC
    t0 = fract(t0);
    //Instruction 3642
    //MAD
    t0 = t0 * vec4(6.408849, 6.408849, 6.408849, 6.408849) + vec4(-3.141593, -3.141593, -3.141593, -3.141593);
    //Instruction 3643
    //MUL
    t1 = t0 * t0;
    //Instruction 3644
    //MUL
    t2 = t0 * t1;
    //Instruction 3645
    //MAD
    t0 = t2 * vec4(-0.161616, -0.161616, -0.161616, -0.161616) + t0;
    //Instruction 3646
    //MUL
    t2 = t1 * t2;
    //Instruction 3647
    //MUL
    t1 = t1 * t2;
    //Instruction 3648
    //MAD
    t0 = t2 * vec4(0.008333, 0.008333, 0.008333, 0.008333) + t0;
    //Instruction 3649
    //MAD
    t0 = t1 * vec4(-0.000198, -0.000198, -0.000198, -0.000198) + t0;
    //Instruction 3650
    //MUL
    t0 = t0 * t0;
    //Instruction 3651
    //MUL
    t0 = t0 * t0;
    //Instruction 3652
    //MUL
    t1.x = in_COLOR0.w * _WaveAndDistance.z;
    //Instruction 3653
    //MUL
    t1 = t0 * t1.xxxx;
    //Instruction 3654
    //DP4
    t0.x = dot(t0, vec4(0.674200, 0.674200, 0.269680, 0.134840));
    //Instruction 3655
    //MUL
    t0.x = t0.x * 0.700000;
    //Instruction 3656
    //DP4
    t2.x = dot(t1, vec4(0.024000, 0.040000, -0.120000, 0.096000));
    //Instruction 3657
    //DP4
    t2.z = dot(t1, vec4(0.006000, 0.020000, -0.020000, 0.100000));
    //Instruction 3658
    //MAD
    t1.xz = (-t2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    //Instruction 3659
    //MUL
    t2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3660
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 3661
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 3662
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 3663
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3664
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3665
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3666
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3667
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3668
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3669
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3670
    //ADD
    t5.xyz = t2.xyz + t3.xyz;
    //Instruction 3671
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3672
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3673
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3674
    //ADD
    t5.xyz = t5.xyz + t2.xyz;
    //Instruction 3675
    //DP3
    t16 = dot(t5.xyz, t5.xyz);
    //Instruction 3676
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 3677
    //MUL
    t5.xyz = t5.xyz * vec3(t16);
    //Instruction 3678
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 3679
    //MUL
    t5.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3680
    //MAD
    t5.xyz = _Object2World[0].xyz * t1.xxx + t5.xyz;
    //Instruction 3681
    //MAD
    t5.xyz = _Object2World[2].xyz * t1.zzz + t5.xyz;
    //Instruction 3682
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t5.xyz;
    //Instruction 3683
    //ADD
    t10_4.xyz = _WavingTint.xyz + vec3(-0.500000, -0.500000, -0.500000);
    //Instruction 3684
    //MAD
    t10_4.xyz = t0.xxx * t10_4.xyz + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 3685
    //MUL
    t10_4.xyz = t10_4.xyz * in_COLOR0.xyz;
    //Instruction 3686
    //MUL
    vs_COLOR0.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 3687
    //MOV
    t1.y = in_POSITION0.y;
    //Instruction 3688
    //ADD
    t0.xyz = t1.xyz + (-_CameraPosition.xyz);
    //Instruction 3689
    //DP3
    t0.x = dot(t0.xyz, t0.xyz);
    //Instruction 3690
    //ADD
    t0.x = (-t0.x) + _WaveAndDistance.w;
    //Instruction 3691
    //DP2
    t0.x = dot(_CameraPosition.ww, t0.xx);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3692
    //MOV
    vs_COLOR0.w = t0.x;
    //Instruction 3693
    //MAD
    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 3694
    //MOV
    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
    //Instruction 3695
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_DynamicLightmap;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
lowp vec4 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 3618
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 3619
    //MAD
    t10_1.x = t10_0.w * vs_COLOR0.w + (-_Cutoff);
    //Instruction 3620
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 3621
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 3622
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 3623
    //SAMPLE
    t10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
    //Instruction 3624
    //MUL
    t16_2.x = t10_1.w * unity_DynamicLightmap_HDR.x;
    //Instruction 3625
    //MUL
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    //Instruction 3626
    //LOG
    t16_2.xyz = log2(t16_2.xyz);
    //Instruction 3627
    //MUL
    t16_2.xyz = t16_2.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 3628
    //EXP
    t16_2.xyz = exp2(t16_2.xyz);
    //Instruction 3629
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 3630
    //MUL
    t16_3.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 3631
    //DP3
    t16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 3632
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 3633
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 3634
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 3635
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3636
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 s_8;
  highp vec4 waves_9;
  waves_9 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_9 = (waves_9 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_9 = (waves_9 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_10;
  tmpvar_10 = fract(waves_9);
  waves_9 = tmpvar_10;
  highp vec4 val_11;
  highp vec4 s_12;
  val_11 = ((tmpvar_10 * 6.408849) - 3.141593);
  highp vec4 tmpvar_13;
  tmpvar_13 = (val_11 * val_11);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * val_11);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * tmpvar_13);
  s_12 = (((val_11 + 
    (tmpvar_14 * -0.1616162)
  ) + (tmpvar_15 * 0.0083333)) + ((tmpvar_15 * tmpvar_13) * -0.00019841));
  s_8 = (s_12 * s_12);
  s_8 = (s_8 * s_8);
  highp float tmpvar_16;
  tmpvar_16 = (dot (s_8, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_8 = (s_8 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (s_8, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (s_8, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_16));
  waveColor_6 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_19;
  tmpvar_19 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_18, tmpvar_18))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_20.w = color_5.w;
  highp vec4 v_21;
  v_21.x = _World2Object[0].x;
  v_21.y = _World2Object[1].x;
  v_21.z = _World2Object[2].x;
  v_21.w = _World2Object[3].x;
  highp vec4 v_22;
  v_22.x = _World2Object[0].y;
  v_22.y = _World2Object[1].y;
  v_22.z = _World2Object[2].y;
  v_22.w = _World2Object[3].y;
  highp vec4 v_23;
  v_23.x = _World2Object[0].z;
  v_23.y = _World2Object[1].z;
  v_23.z = _World2Object[2].z;
  v_23.w = _World2Object[3].z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(((
    (v_21.xyz * _glesNormal.x)
   + 
    (v_22.xyz * _glesNormal.y)
  ) + (v_23.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_24;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = worldNormal_1;
  mediump vec4 normal_26;
  normal_26 = tmpvar_25;
  mediump vec3 x2_27;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, normal_26);
  x1_28.y = dot (unity_SHAg, normal_26);
  x1_28.z = dot (unity_SHAb, normal_26);
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normal_26.xyzz * normal_26.yzzx);
  x2_27.x = dot (unity_SHBr, tmpvar_29);
  x2_27.y = dot (unity_SHBg, tmpvar_29);
  x2_27.z = dot (unity_SHBb, tmpvar_29);
  tmpvar_3 = (unity_World2Shadow[0] * (_Object2World * vertex_4));
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * vertex_4).xyz;
  xlv_COLOR0 = tmpvar_20;
  xlv_TEXCOORD3 = ((x2_27 + (unity_SHC.xyz * 
    ((normal_26.x * normal_26.x) - (normal_26.y * normal_26.y))
  )) + x1_28);
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_9;
  x_9 = (tmpvar_8.w - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x > 
    (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w)
  )), _LightShadowData.x);
  tmpvar_10 = tmpvar_11;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_10;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_12;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8.xyz * tmpvar_12) * diff_15);
  c_14.w = (tmpvar_8.w * xlv_COLOR0.w);
  c_13.w = c_14.w;
  c_13.xyz = (c_14.xyz + (tmpvar_8.xyz * xlv_TEXCOORD3));
  c_4.xyz = c_13.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 vertex_5;
  vertex_5.yw = _glesVertex.yw;
  lowp vec4 color_6;
  color_6.xyz = _glesColor.xyz;
  lowp vec3 waveColor_7;
  highp vec3 waveMove_8;
  highp vec4 s_9;
  highp vec4 waves_10;
  waves_10 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_10 = (waves_10 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_10 = (waves_10 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_11;
  tmpvar_11 = fract(waves_10);
  waves_10 = tmpvar_11;
  highp vec4 val_12;
  highp vec4 s_13;
  val_12 = ((tmpvar_11 * 6.408849) - 3.141593);
  highp vec4 tmpvar_14;
  tmpvar_14 = (val_12 * val_12);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * val_12);
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_14);
  s_13 = (((val_12 + 
    (tmpvar_15 * -0.1616162)
  ) + (tmpvar_16 * 0.0083333)) + ((tmpvar_16 * tmpvar_14) * -0.00019841));
  s_9 = (s_13 * s_13);
  s_9 = (s_9 * s_9);
  highp float tmpvar_17;
  tmpvar_17 = (dot (s_9, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_9 = (s_9 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_8.y = 0.0;
  waveMove_8.x = dot (s_9, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_8.z = dot (s_9, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_5.xz = (_glesVertex.xz - (waveMove_8.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_17));
  waveColor_7 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = (vertex_5.xyz - _CameraPosition.xyz);
  highp float tmpvar_20;
  tmpvar_20 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_19, tmpvar_19))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_6.w = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.xyz = ((2.0 * waveColor_7) * _glesColor.xyz);
  tmpvar_21.w = color_6.w;
  highp vec4 v_22;
  v_22.x = _World2Object[0].x;
  v_22.y = _World2Object[1].x;
  v_22.z = _World2Object[2].x;
  v_22.w = _World2Object[3].x;
  highp vec4 v_23;
  v_23.x = _World2Object[0].y;
  v_23.y = _World2Object[1].y;
  v_23.z = _World2Object[2].y;
  v_23.w = _World2Object[3].y;
  highp vec4 v_24;
  v_24.x = _World2Object[0].z;
  v_24.y = _World2Object[1].z;
  v_24.z = _World2Object[2].z;
  v_24.w = _World2Object[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(((
    (v_22.xyz * _glesNormal.x)
   + 
    (v_23.xyz * _glesNormal.y)
  ) + (v_24.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_25;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  tmpvar_3 = (unity_World2Shadow[0] * (_Object2World * vertex_5));
  gl_Position = (glstate_matrix_mvp * vertex_5);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * vertex_5).xyz;
  xlv_COLOR0 = tmpvar_21;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_9;
  x_9 = (tmpvar_8.w - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x > 
    (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w)
  )), _LightShadowData.x);
  tmpvar_10 = tmpvar_11;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_10;
  mediump vec3 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_12 = (tmpvar_2 * tmpvar_1);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_13 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_14.w) * tmpvar_14.xyz), unity_DynamicLightmap_HDR.yyy);
  tmpvar_2 = tmpvar_12;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8.xyz * tmpvar_12) * diff_17);
  c_16.w = (tmpvar_8.w * xlv_COLOR0.w);
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_8.xyz * tmpvar_13));
  c_4.xyz = c_15.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 s_8;
  highp vec4 waves_9;
  waves_9 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_9 = (waves_9 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_9 = (waves_9 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_10;
  tmpvar_10 = fract(waves_9);
  waves_9 = tmpvar_10;
  highp vec4 val_11;
  highp vec4 s_12;
  val_11 = ((tmpvar_10 * 6.408849) - 3.141593);
  highp vec4 tmpvar_13;
  tmpvar_13 = (val_11 * val_11);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * val_11);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * tmpvar_13);
  s_12 = (((val_11 + 
    (tmpvar_14 * -0.1616162)
  ) + (tmpvar_15 * 0.0083333)) + ((tmpvar_15 * tmpvar_13) * -0.00019841));
  s_8 = (s_12 * s_12);
  s_8 = (s_8 * s_8);
  highp float tmpvar_16;
  tmpvar_16 = (dot (s_8, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_8 = (s_8 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (s_8, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (s_8, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_16));
  waveColor_6 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_19;
  tmpvar_19 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_18, tmpvar_18))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_20.w = color_5.w;
  highp vec3 tmpvar_21;
  tmpvar_21 = (_Object2World * vertex_4).xyz;
  highp vec4 v_22;
  v_22.x = _World2Object[0].x;
  v_22.y = _World2Object[1].x;
  v_22.z = _World2Object[2].x;
  v_22.w = _World2Object[3].x;
  highp vec4 v_23;
  v_23.x = _World2Object[0].y;
  v_23.y = _World2Object[1].y;
  v_23.z = _World2Object[2].y;
  v_23.w = _World2Object[3].y;
  highp vec4 v_24;
  v_24.x = _World2Object[0].z;
  v_24.y = _World2Object[1].z;
  v_24.z = _World2Object[2].z;
  v_24.w = _World2Object[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(((
    (v_22.xyz * _glesNormal.x)
   + 
    (v_23.xyz * _glesNormal.y)
  ) + (v_24.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_25;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = worldNormal_1;
  mediump vec4 normal_27;
  normal_27 = tmpvar_26;
  mediump vec3 x2_28;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, normal_27);
  x1_29.y = dot (unity_SHAg, normal_27);
  x1_29.z = dot (unity_SHAb, normal_27);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (normal_27.xyzz * normal_27.yzzx);
  x2_28.x = dot (unity_SHBr, tmpvar_30);
  x2_28.y = dot (unity_SHBg, tmpvar_30);
  x2_28.z = dot (unity_SHBb, tmpvar_30);
  highp vec3 lightColor0_31;
  lightColor0_31 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_32;
  lightColor1_32 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_33;
  lightColor2_33 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_34;
  lightColor3_34 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_35;
  lightAttenSq_35 = unity_4LightAtten0;
  highp vec3 normal_36;
  normal_36 = worldNormal_1;
  highp vec3 col_37;
  highp vec4 ndotl_38;
  highp vec4 lengthSq_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = (unity_4LightPosX0 - tmpvar_21.x);
  highp vec4 tmpvar_41;
  tmpvar_41 = (unity_4LightPosY0 - tmpvar_21.y);
  highp vec4 tmpvar_42;
  tmpvar_42 = (unity_4LightPosZ0 - tmpvar_21.z);
  lengthSq_39 = (tmpvar_40 * tmpvar_40);
  lengthSq_39 = (lengthSq_39 + (tmpvar_41 * tmpvar_41));
  lengthSq_39 = (lengthSq_39 + (tmpvar_42 * tmpvar_42));
  ndotl_38 = (tmpvar_40 * normal_36.x);
  ndotl_38 = (ndotl_38 + (tmpvar_41 * normal_36.y));
  ndotl_38 = (ndotl_38 + (tmpvar_42 * normal_36.z));
  highp vec4 tmpvar_43;
  tmpvar_43 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_38 * inversesqrt(lengthSq_39)));
  ndotl_38 = tmpvar_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_43 * (1.0/((1.0 + 
    (lengthSq_39 * lightAttenSq_35)
  ))));
  col_37 = (lightColor0_31 * tmpvar_44.x);
  col_37 = (col_37 + (lightColor1_32 * tmpvar_44.y));
  col_37 = (col_37 + (lightColor2_33 * tmpvar_44.z));
  col_37 = (col_37 + (lightColor3_34 * tmpvar_44.w));
  tmpvar_3 = (((x2_28 + 
    (unity_SHC.xyz * ((normal_27.x * normal_27.x) - (normal_27.y * normal_27.y)))
  ) + x1_29) + col_37);
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_21;
  xlv_COLOR0 = tmpvar_20;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_8;
  x_8 = (tmpvar_7.w - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_9;
  lowp vec4 c_10;
  lowp float diff_11;
  mediump float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_11 = tmpvar_12;
  c_10.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_11);
  c_10.w = (tmpvar_7.w * xlv_COLOR0.w);
  c_9.w = c_10.w;
  c_9.xyz = (c_10.xyz + (tmpvar_7.xyz * xlv_TEXCOORD3));
  c_3.xyz = c_9.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
highp float t22;
void main()
{
    //Instruction 4505
    //MUL
    t0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
    //Instruction 4506
    //MUL
    t1 = t0.yyyy * vec4(0.006000, 0.020000, 0.020000, 0.050000);
    //Instruction 4507
    //MAD
    t0 = t0.xxxx * vec4(0.012000, 0.020000, 0.060000, 0.024000) + t1;
    //Instruction 4508
    //MAD
    t0 = _WaveAndDistance.xxxx * vec4(1.200000, 2.000000, 1.600000, 4.800000) + t0;
    //Instruction 4509
    //FRC
    t0 = fract(t0);
    //Instruction 4510
    //MAD
    t0 = t0 * vec4(6.408849, 6.408849, 6.408849, 6.408849) + vec4(-3.141593, -3.141593, -3.141593, -3.141593);
    //Instruction 4511
    //MUL
    t1 = t0 * t0;
    //Instruction 4512
    //MUL
    t2 = t0 * t1;
    //Instruction 4513
    //MAD
    t0 = t2 * vec4(-0.161616, -0.161616, -0.161616, -0.161616) + t0;
    //Instruction 4514
    //MUL
    t2 = t1 * t2;
    //Instruction 4515
    //MUL
    t1 = t1 * t2;
    //Instruction 4516
    //MAD
    t0 = t2 * vec4(0.008333, 0.008333, 0.008333, 0.008333) + t0;
    //Instruction 4517
    //MAD
    t0 = t1 * vec4(-0.000198, -0.000198, -0.000198, -0.000198) + t0;
    //Instruction 4518
    //MUL
    t0 = t0 * t0;
    //Instruction 4519
    //MUL
    t0 = t0 * t0;
    //Instruction 4520
    //MUL
    t1.x = in_COLOR0.w * _WaveAndDistance.z;
    //Instruction 4521
    //MUL
    t1 = t0 * t1.xxxx;
    //Instruction 4522
    //DP4
    t0.x = dot(t0, vec4(0.674200, 0.674200, 0.269680, 0.134840));
    //Instruction 4523
    //MUL
    t0.x = t0.x * 0.700000;
    //Instruction 4524
    //DP4
    t2.x = dot(t1, vec4(0.024000, 0.040000, -0.120000, 0.096000));
    //Instruction 4525
    //DP4
    t2.z = dot(t1, vec4(0.006000, 0.020000, -0.020000, 0.100000));
    //Instruction 4526
    //MAD
    t1.xz = (-t2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    //Instruction 4527
    //MUL
    t2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4528
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 4529
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 4530
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 4531
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4532
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4533
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4534
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4535
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4536
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4537
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4538
    //ADD
    t7.xyz = t2.xyz + t3.xyz;
    //Instruction 4539
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4540
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4541
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4542
    //ADD
    t7.xyz = t7.xyz + t2.xyz;
    //Instruction 4543
    //DP3
    t22 = dot(t7.xyz, t7.xyz);
    //Instruction 4544
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 4545
    //MUL
    t2.xyz = t7.xyz * vec3(t22);
    //Instruction 4546
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 4547
    //MUL
    t7.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4548
    //MAD
    t7.xyz = _Object2World[0].xyz * t1.xxx + t7.xyz;
    //Instruction 4549
    //MAD
    t7.xyz = _Object2World[2].xyz * t1.zzz + t7.xyz;
    //Instruction 4550
    //MAD
    t7.xyz = _Object2World[3].xyz * in_POSITION0.www + t7.xyz;
    //Instruction 4551
    //MOV
    vs_TEXCOORD2.xyz = t7.xyz;
    //Instruction 4552
    //ADD
    t10_4.xyz = _WavingTint.xyz + vec3(-0.500000, -0.500000, -0.500000);
    //Instruction 4553
    //MAD
    t10_4.xyz = t0.xxx * t10_4.xyz + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 4554
    //MUL
    t10_4.xyz = t10_4.xyz * in_COLOR0.xyz;
    //Instruction 4555
    //MUL
    vs_COLOR0.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 4556
    //MOV
    t1.y = in_POSITION0.y;
    //Instruction 4557
    //ADD
    t1.xyz = t1.xyz + (-_CameraPosition.xyz);
    //Instruction 4558
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 4559
    //ADD
    t0.x = (-t0.x) + _WaveAndDistance.w;
    //Instruction 4560
    //DP2
    t0.x = dot(_CameraPosition.ww, t0.xx);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4561
    //MOV
    vs_COLOR0.w = t0.x;
    //Instruction 4562
    //MUL
    t16_5.x = t2.y * t2.y;
    //Instruction 4563
    //MAD
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    //Instruction 4564
    //MUL
    t16_1 = t2.yzzx * t2.xyzz;
    //Instruction 4565
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 4566
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 4567
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 4568
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 4569
    //MOV
    t2.w = 1.0;
    //Instruction 4570
    //DP4
    t16_6.x = dot(unity_SHAr, t2);
    //Instruction 4571
    //DP4
    t16_6.y = dot(unity_SHAg, t2);
    //Instruction 4572
    //DP4
    t16_6.z = dot(unity_SHAb, t2);
    //Instruction 4573
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 4574
    //ADD
    t1 = (-t7.yyyy) + unity_4LightPosY0;
    //Instruction 4575
    //MUL
    t3 = t2.yyyy * t1;
    //Instruction 4576
    //MUL
    t1 = t1 * t1;
    //Instruction 4577
    //ADD
    t4 = (-t7.xxxx) + unity_4LightPosX0;
    //Instruction 4578
    //ADD
    t0 = (-t7.zzzz) + unity_4LightPosZ0;
    //Instruction 4579
    //MAD
    t3 = t4 * t2.xxxx + t3;
    //Instruction 4580
    //MAD
    t1 = t4 * t4 + t1;
    //Instruction 4581
    //MAD
    t1 = t0 * t0 + t1;
    //Instruction 4582
    //MAD
    t0 = t0 * t2.zzzz + t3;
    //Instruction 4583
    //RSQ
    t2 = inversesqrt(t1);
    //Instruction 4584
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 4585
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 4586
    //MUL
    t0 = t0 * t2;
    //Instruction 4587
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 4588
    //MUL
    t0 = t1 * t0;
    //Instruction 4589
    //MUL
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 4590
    //MAD
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4591
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    //Instruction 4592
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 4593
    //ADD
    t0.xyz = t0.xyz + t16_5.xyz;
    //Instruction 4594
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 4595
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 4492
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 4493
    //MAD
    t10_1 = t10_0.w * vs_COLOR0.w + (-_Cutoff);
    //Instruction 4494
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 4495
    //LT
    tb12 = t10_1<0.0;
    //Instruction 4496
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 4497
    //MUL
    t16_2.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 4498
    //MUL
    t16_3.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 4499
    //DP3
    t16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4500
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 4501
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_14) + t16_3.xyz;
    //Instruction 4502
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 4503
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4504
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 s_8;
  highp vec4 waves_9;
  waves_9 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_9 = (waves_9 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_9 = (waves_9 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_10;
  tmpvar_10 = fract(waves_9);
  waves_9 = tmpvar_10;
  highp vec4 val_11;
  highp vec4 s_12;
  val_11 = ((tmpvar_10 * 6.408849) - 3.141593);
  highp vec4 tmpvar_13;
  tmpvar_13 = (val_11 * val_11);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * val_11);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * tmpvar_13);
  s_12 = (((val_11 + 
    (tmpvar_14 * -0.1616162)
  ) + (tmpvar_15 * 0.0083333)) + ((tmpvar_15 * tmpvar_13) * -0.00019841));
  s_8 = (s_12 * s_12);
  s_8 = (s_8 * s_8);
  highp float tmpvar_16;
  tmpvar_16 = (dot (s_8, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_8 = (s_8 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (s_8, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (s_8, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_16));
  waveColor_6 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_19;
  tmpvar_19 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_18, tmpvar_18))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_20.w = color_5.w;
  highp vec4 v_21;
  v_21.x = _World2Object[0].x;
  v_21.y = _World2Object[1].x;
  v_21.z = _World2Object[2].x;
  v_21.w = _World2Object[3].x;
  highp vec4 v_22;
  v_22.x = _World2Object[0].y;
  v_22.y = _World2Object[1].y;
  v_22.z = _World2Object[2].y;
  v_22.w = _World2Object[3].y;
  highp vec4 v_23;
  v_23.x = _World2Object[0].z;
  v_23.y = _World2Object[1].z;
  v_23.z = _World2Object[2].z;
  v_23.w = _World2Object[3].z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(((
    (v_21.xyz * _glesNormal.x)
   + 
    (v_22.xyz * _glesNormal.y)
  ) + (v_23.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_24;
  tmpvar_2 = worldNormal_1;
  tmpvar_3.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * vertex_4).xyz;
  xlv_COLOR0 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_8;
  x_8 = (tmpvar_7.w - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_9 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_10.w) * tmpvar_10.xyz), unity_DynamicLightmap_HDR.yyy);
  lowp vec4 c_11;
  lowp vec4 c_12;
  lowp float diff_13;
  mediump float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_13 = tmpvar_14;
  c_12.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_13);
  c_12.w = (tmpvar_7.w * xlv_COLOR0.w);
  c_11.w = c_12.w;
  c_11.xyz = (c_12.xyz + (tmpvar_7.xyz * tmpvar_9));
  c_3.xyz = c_11.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
lowp vec3 t10_4;
highp vec3 t5;
highp float t16;
void main()
{
    //Instruction 4615
    //MUL
    t0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
    //Instruction 4616
    //MUL
    t1 = t0.yyyy * vec4(0.006000, 0.020000, 0.020000, 0.050000);
    //Instruction 4617
    //MAD
    t0 = t0.xxxx * vec4(0.012000, 0.020000, 0.060000, 0.024000) + t1;
    //Instruction 4618
    //MAD
    t0 = _WaveAndDistance.xxxx * vec4(1.200000, 2.000000, 1.600000, 4.800000) + t0;
    //Instruction 4619
    //FRC
    t0 = fract(t0);
    //Instruction 4620
    //MAD
    t0 = t0 * vec4(6.408849, 6.408849, 6.408849, 6.408849) + vec4(-3.141593, -3.141593, -3.141593, -3.141593);
    //Instruction 4621
    //MUL
    t1 = t0 * t0;
    //Instruction 4622
    //MUL
    t2 = t0 * t1;
    //Instruction 4623
    //MAD
    t0 = t2 * vec4(-0.161616, -0.161616, -0.161616, -0.161616) + t0;
    //Instruction 4624
    //MUL
    t2 = t1 * t2;
    //Instruction 4625
    //MUL
    t1 = t1 * t2;
    //Instruction 4626
    //MAD
    t0 = t2 * vec4(0.008333, 0.008333, 0.008333, 0.008333) + t0;
    //Instruction 4627
    //MAD
    t0 = t1 * vec4(-0.000198, -0.000198, -0.000198, -0.000198) + t0;
    //Instruction 4628
    //MUL
    t0 = t0 * t0;
    //Instruction 4629
    //MUL
    t0 = t0 * t0;
    //Instruction 4630
    //MUL
    t1.x = in_COLOR0.w * _WaveAndDistance.z;
    //Instruction 4631
    //MUL
    t1 = t0 * t1.xxxx;
    //Instruction 4632
    //DP4
    t0.x = dot(t0, vec4(0.674200, 0.674200, 0.269680, 0.134840));
    //Instruction 4633
    //MUL
    t0.x = t0.x * 0.700000;
    //Instruction 4634
    //DP4
    t2.x = dot(t1, vec4(0.024000, 0.040000, -0.120000, 0.096000));
    //Instruction 4635
    //DP4
    t2.z = dot(t1, vec4(0.006000, 0.020000, -0.020000, 0.100000));
    //Instruction 4636
    //MAD
    t1.xz = (-t2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    //Instruction 4637
    //MUL
    t2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4638
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 4639
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 4640
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 4641
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4642
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4643
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4644
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4645
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4646
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4647
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4648
    //ADD
    t5.xyz = t2.xyz + t3.xyz;
    //Instruction 4649
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4650
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4651
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4652
    //ADD
    t5.xyz = t5.xyz + t2.xyz;
    //Instruction 4653
    //DP3
    t16 = dot(t5.xyz, t5.xyz);
    //Instruction 4654
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 4655
    //MUL
    t5.xyz = t5.xyz * vec3(t16);
    //Instruction 4656
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 4657
    //MUL
    t5.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4658
    //MAD
    t5.xyz = _Object2World[0].xyz * t1.xxx + t5.xyz;
    //Instruction 4659
    //MAD
    t5.xyz = _Object2World[2].xyz * t1.zzz + t5.xyz;
    //Instruction 4660
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t5.xyz;
    //Instruction 4661
    //ADD
    t10_4.xyz = _WavingTint.xyz + vec3(-0.500000, -0.500000, -0.500000);
    //Instruction 4662
    //MAD
    t10_4.xyz = t0.xxx * t10_4.xyz + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 4663
    //MUL
    t10_4.xyz = t10_4.xyz * in_COLOR0.xyz;
    //Instruction 4664
    //MUL
    vs_COLOR0.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 4665
    //MOV
    t1.y = in_POSITION0.y;
    //Instruction 4666
    //ADD
    t0.xyz = t1.xyz + (-_CameraPosition.xyz);
    //Instruction 4667
    //DP3
    t0.x = dot(t0.xyz, t0.xyz);
    //Instruction 4668
    //ADD
    t0.x = (-t0.x) + _WaveAndDistance.w;
    //Instruction 4669
    //DP2
    t0.x = dot(_CameraPosition.ww, t0.xx);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4670
    //MOV
    vs_COLOR0.w = t0.x;
    //Instruction 4671
    //MAD
    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 4672
    //MOV
    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
    //Instruction 4673
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_DynamicLightmap;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
lowp vec4 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 4596
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 4597
    //MAD
    t10_1.x = t10_0.w * vs_COLOR0.w + (-_Cutoff);
    //Instruction 4598
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 4599
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 4600
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 4601
    //SAMPLE
    t10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
    //Instruction 4602
    //MUL
    t16_2.x = t10_1.w * unity_DynamicLightmap_HDR.x;
    //Instruction 4603
    //MUL
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    //Instruction 4604
    //LOG
    t16_2.xyz = log2(t16_2.xyz);
    //Instruction 4605
    //MUL
    t16_2.xyz = t16_2.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 4606
    //EXP
    t16_2.xyz = exp2(t16_2.xyz);
    //Instruction 4607
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 4608
    //MUL
    t16_3.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 4609
    //DP3
    t16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4610
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 4611
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 4612
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 4613
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4614
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 vertex_5;
  vertex_5.yw = _glesVertex.yw;
  lowp vec4 color_6;
  color_6.xyz = _glesColor.xyz;
  lowp vec3 waveColor_7;
  highp vec3 waveMove_8;
  highp vec4 s_9;
  highp vec4 waves_10;
  waves_10 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_10 = (waves_10 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_10 = (waves_10 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_11;
  tmpvar_11 = fract(waves_10);
  waves_10 = tmpvar_11;
  highp vec4 val_12;
  highp vec4 s_13;
  val_12 = ((tmpvar_11 * 6.408849) - 3.141593);
  highp vec4 tmpvar_14;
  tmpvar_14 = (val_12 * val_12);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * val_12);
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_14);
  s_13 = (((val_12 + 
    (tmpvar_15 * -0.1616162)
  ) + (tmpvar_16 * 0.0083333)) + ((tmpvar_16 * tmpvar_14) * -0.00019841));
  s_9 = (s_13 * s_13);
  s_9 = (s_9 * s_9);
  highp float tmpvar_17;
  tmpvar_17 = (dot (s_9, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_9 = (s_9 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_8.y = 0.0;
  waveMove_8.x = dot (s_9, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_8.z = dot (s_9, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_5.xz = (_glesVertex.xz - (waveMove_8.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_17));
  waveColor_7 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = (vertex_5.xyz - _CameraPosition.xyz);
  highp float tmpvar_20;
  tmpvar_20 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_19, tmpvar_19))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_6.w = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.xyz = ((2.0 * waveColor_7) * _glesColor.xyz);
  tmpvar_21.w = color_6.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * vertex_5).xyz;
  highp vec4 v_23;
  v_23.x = _World2Object[0].x;
  v_23.y = _World2Object[1].x;
  v_23.z = _World2Object[2].x;
  v_23.w = _World2Object[3].x;
  highp vec4 v_24;
  v_24.x = _World2Object[0].y;
  v_24.y = _World2Object[1].y;
  v_24.z = _World2Object[2].y;
  v_24.w = _World2Object[3].y;
  highp vec4 v_25;
  v_25.x = _World2Object[0].z;
  v_25.y = _World2Object[1].z;
  v_25.z = _World2Object[2].z;
  v_25.w = _World2Object[3].z;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize(((
    (v_23.xyz * _glesNormal.x)
   + 
    (v_24.xyz * _glesNormal.y)
  ) + (v_25.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_26;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = worldNormal_1;
  mediump vec4 normal_28;
  normal_28 = tmpvar_27;
  mediump vec3 x2_29;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, normal_28);
  x1_30.y = dot (unity_SHAg, normal_28);
  x1_30.z = dot (unity_SHAb, normal_28);
  mediump vec4 tmpvar_31;
  tmpvar_31 = (normal_28.xyzz * normal_28.yzzx);
  x2_29.x = dot (unity_SHBr, tmpvar_31);
  x2_29.y = dot (unity_SHBg, tmpvar_31);
  x2_29.z = dot (unity_SHBb, tmpvar_31);
  highp vec3 lightColor0_32;
  lightColor0_32 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_33;
  lightColor1_33 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_34;
  lightColor2_34 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_35;
  lightColor3_35 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_36;
  lightAttenSq_36 = unity_4LightAtten0;
  highp vec3 normal_37;
  normal_37 = worldNormal_1;
  highp vec3 col_38;
  highp vec4 ndotl_39;
  highp vec4 lengthSq_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_42;
  tmpvar_42 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_4LightPosZ0 - tmpvar_22.z);
  lengthSq_40 = (tmpvar_41 * tmpvar_41);
  lengthSq_40 = (lengthSq_40 + (tmpvar_42 * tmpvar_42));
  lengthSq_40 = (lengthSq_40 + (tmpvar_43 * tmpvar_43));
  ndotl_39 = (tmpvar_41 * normal_37.x);
  ndotl_39 = (ndotl_39 + (tmpvar_42 * normal_37.y));
  ndotl_39 = (ndotl_39 + (tmpvar_43 * normal_37.z));
  highp vec4 tmpvar_44;
  tmpvar_44 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_39 * inversesqrt(lengthSq_40)));
  ndotl_39 = tmpvar_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_44 * (1.0/((1.0 + 
    (lengthSq_40 * lightAttenSq_36)
  ))));
  col_38 = (lightColor0_32 * tmpvar_45.x);
  col_38 = (col_38 + (lightColor1_33 * tmpvar_45.y));
  col_38 = (col_38 + (lightColor2_34 * tmpvar_45.z));
  col_38 = (col_38 + (lightColor3_35 * tmpvar_45.w));
  tmpvar_3 = (((x2_29 + 
    (unity_SHC.xyz * ((normal_28.x * normal_28.x) - (normal_28.y * normal_28.y)))
  ) + x1_30) + col_38);
  tmpvar_4 = (unity_World2Shadow[0] * (_Object2World * vertex_5));
  gl_Position = (glstate_matrix_mvp * vertex_5);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_22;
  xlv_COLOR0 = tmpvar_21;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_9;
  x_9 = (tmpvar_8.w - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x > 
    (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w)
  )), _LightShadowData.x);
  tmpvar_10 = tmpvar_11;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_10;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_12;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8.xyz * tmpvar_12) * diff_15);
  c_14.w = (tmpvar_8.w * xlv_COLOR0.w);
  c_13.w = c_14.w;
  c_13.xyz = (c_14.xyz + (tmpvar_8.xyz * xlv_TEXCOORD3));
  c_4.xyz = c_13.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 vertex_5;
  vertex_5.yw = _glesVertex.yw;
  lowp vec4 color_6;
  color_6.xyz = _glesColor.xyz;
  lowp vec3 waveColor_7;
  highp vec3 waveMove_8;
  highp vec4 s_9;
  highp vec4 waves_10;
  waves_10 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_10 = (waves_10 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_10 = (waves_10 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_11;
  tmpvar_11 = fract(waves_10);
  waves_10 = tmpvar_11;
  highp vec4 val_12;
  highp vec4 s_13;
  val_12 = ((tmpvar_11 * 6.408849) - 3.141593);
  highp vec4 tmpvar_14;
  tmpvar_14 = (val_12 * val_12);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * val_12);
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_14);
  s_13 = (((val_12 + 
    (tmpvar_15 * -0.1616162)
  ) + (tmpvar_16 * 0.0083333)) + ((tmpvar_16 * tmpvar_14) * -0.00019841));
  s_9 = (s_13 * s_13);
  s_9 = (s_9 * s_9);
  highp float tmpvar_17;
  tmpvar_17 = (dot (s_9, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_9 = (s_9 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_8.y = 0.0;
  waveMove_8.x = dot (s_9, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_8.z = dot (s_9, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_5.xz = (_glesVertex.xz - (waveMove_8.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_17));
  waveColor_7 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = (vertex_5.xyz - _CameraPosition.xyz);
  highp float tmpvar_20;
  tmpvar_20 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_19, tmpvar_19))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_6.w = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.xyz = ((2.0 * waveColor_7) * _glesColor.xyz);
  tmpvar_21.w = color_6.w;
  highp vec4 v_22;
  v_22.x = _World2Object[0].x;
  v_22.y = _World2Object[1].x;
  v_22.z = _World2Object[2].x;
  v_22.w = _World2Object[3].x;
  highp vec4 v_23;
  v_23.x = _World2Object[0].y;
  v_23.y = _World2Object[1].y;
  v_23.z = _World2Object[2].y;
  v_23.w = _World2Object[3].y;
  highp vec4 v_24;
  v_24.x = _World2Object[0].z;
  v_24.y = _World2Object[1].z;
  v_24.z = _World2Object[2].z;
  v_24.w = _World2Object[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(((
    (v_22.xyz * _glesNormal.x)
   + 
    (v_23.xyz * _glesNormal.y)
  ) + (v_24.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_25;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  tmpvar_3 = (unity_World2Shadow[0] * (_Object2World * vertex_5));
  gl_Position = (glstate_matrix_mvp * vertex_5);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * vertex_5).xyz;
  xlv_COLOR0 = tmpvar_21;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_9;
  x_9 = (tmpvar_8.w - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x > 
    (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w)
  )), _LightShadowData.x);
  tmpvar_10 = tmpvar_11;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_10;
  mediump vec3 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_12 = (tmpvar_2 * tmpvar_1);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_13 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_14.w) * tmpvar_14.xyz), unity_DynamicLightmap_HDR.yyy);
  tmpvar_2 = tmpvar_12;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8.xyz * tmpvar_12) * diff_17);
  c_16.w = (tmpvar_8.w * xlv_COLOR0.w);
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_8.xyz * tmpvar_13));
  c_4.xyz = c_15.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 s_8;
  highp vec4 waves_9;
  waves_9 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_9 = (waves_9 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_9 = (waves_9 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_10;
  tmpvar_10 = fract(waves_9);
  waves_9 = tmpvar_10;
  highp vec4 val_11;
  highp vec4 s_12;
  val_11 = ((tmpvar_10 * 6.408849) - 3.141593);
  highp vec4 tmpvar_13;
  tmpvar_13 = (val_11 * val_11);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * val_11);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * tmpvar_13);
  s_12 = (((val_11 + 
    (tmpvar_14 * -0.1616162)
  ) + (tmpvar_15 * 0.0083333)) + ((tmpvar_15 * tmpvar_13) * -0.00019841));
  s_8 = (s_12 * s_12);
  s_8 = (s_8 * s_8);
  highp float tmpvar_16;
  tmpvar_16 = (dot (s_8, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_8 = (s_8 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (s_8, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (s_8, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_16));
  waveColor_6 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_19;
  tmpvar_19 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_18, tmpvar_18))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_20.w = color_5.w;
  highp vec4 v_21;
  v_21.x = _World2Object[0].x;
  v_21.y = _World2Object[1].x;
  v_21.z = _World2Object[2].x;
  v_21.w = _World2Object[3].x;
  highp vec4 v_22;
  v_22.x = _World2Object[0].y;
  v_22.y = _World2Object[1].y;
  v_22.z = _World2Object[2].y;
  v_22.w = _World2Object[3].y;
  highp vec4 v_23;
  v_23.x = _World2Object[0].z;
  v_23.y = _World2Object[1].z;
  v_23.z = _World2Object[2].z;
  v_23.w = _World2Object[3].z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(((
    (v_21.xyz * _glesNormal.x)
   + 
    (v_22.xyz * _glesNormal.y)
  ) + (v_23.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_24;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = worldNormal_1;
  mediump vec4 normal_26;
  normal_26 = tmpvar_25;
  mediump vec3 x2_27;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, normal_26);
  x1_28.y = dot (unity_SHAg, normal_26);
  x1_28.z = dot (unity_SHAb, normal_26);
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normal_26.xyzz * normal_26.yzzx);
  x2_27.x = dot (unity_SHBr, tmpvar_29);
  x2_27.y = dot (unity_SHBg, tmpvar_29);
  x2_27.z = dot (unity_SHBb, tmpvar_29);
  tmpvar_3 = (unity_World2Shadow[0] * (_Object2World * vertex_4));
  gl_Position = (glstate_matrix_mvp * vertex_4);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * vertex_4).xyz;
  xlv_COLOR0 = tmpvar_20;
  xlv_TEXCOORD3 = ((x2_27 + (unity_SHC.xyz * 
    ((normal_26.x * normal_26.x) - (normal_26.y * normal_26.y))
  )) + x1_28);
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_9;
  x_9 = (tmpvar_8.w - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp float shadow_10;
  shadow_10 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_11;
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_8.xyz * tmpvar_11) * diff_14);
  c_13.w = (tmpvar_8.w * xlv_COLOR0.w);
  c_12.w = c_13.w;
  c_12.xyz = (c_13.xyz + (tmpvar_8.xyz * xlv_TEXCOORD3));
  c_4.xyz = c_12.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out mediump vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
highp float t22;
void main()
{
    //Instruction 4691
    //MUL
    t0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
    //Instruction 4692
    //MUL
    t1 = t0.yyyy * vec4(0.006000, 0.020000, 0.020000, 0.050000);
    //Instruction 4693
    //MAD
    t0 = t0.xxxx * vec4(0.012000, 0.020000, 0.060000, 0.024000) + t1;
    //Instruction 4694
    //MAD
    t0 = _WaveAndDistance.xxxx * vec4(1.200000, 2.000000, 1.600000, 4.800000) + t0;
    //Instruction 4695
    //FRC
    t0 = fract(t0);
    //Instruction 4696
    //MAD
    t0 = t0 * vec4(6.408849, 6.408849, 6.408849, 6.408849) + vec4(-3.141593, -3.141593, -3.141593, -3.141593);
    //Instruction 4697
    //MUL
    t1 = t0 * t0;
    //Instruction 4698
    //MUL
    t2 = t0 * t1;
    //Instruction 4699
    //MAD
    t0 = t2 * vec4(-0.161616, -0.161616, -0.161616, -0.161616) + t0;
    //Instruction 4700
    //MUL
    t2 = t1 * t2;
    //Instruction 4701
    //MUL
    t1 = t1 * t2;
    //Instruction 4702
    //MAD
    t0 = t2 * vec4(0.008333, 0.008333, 0.008333, 0.008333) + t0;
    //Instruction 4703
    //MAD
    t0 = t1 * vec4(-0.000198, -0.000198, -0.000198, -0.000198) + t0;
    //Instruction 4704
    //MUL
    t0 = t0 * t0;
    //Instruction 4705
    //MUL
    t0 = t0 * t0;
    //Instruction 4706
    //MUL
    t1.x = in_COLOR0.w * _WaveAndDistance.z;
    //Instruction 4707
    //MUL
    t1 = t0 * t1.xxxx;
    //Instruction 4708
    //DP4
    t0.x = dot(t0, vec4(0.674200, 0.674200, 0.269680, 0.134840));
    //Instruction 4709
    //MUL
    t0.x = t0.x * 0.700000;
    //Instruction 4710
    //DP4
    t2.x = dot(t1, vec4(0.024000, 0.040000, -0.120000, 0.096000));
    //Instruction 4711
    //DP4
    t2.z = dot(t1, vec4(0.006000, 0.020000, -0.020000, 0.100000));
    //Instruction 4712
    //MAD
    t1.xz = (-t2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    //Instruction 4713
    //MUL
    t2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4714
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 4715
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 4716
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 4717
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4718
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4719
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4720
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4721
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4722
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4723
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4724
    //ADD
    t7.xyz = t2.xyz + t3.xyz;
    //Instruction 4725
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4726
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4727
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4728
    //ADD
    t7.xyz = t7.xyz + t2.xyz;
    //Instruction 4729
    //DP3
    t22 = dot(t7.xyz, t7.xyz);
    //Instruction 4730
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 4731
    //MUL
    t2.xyz = t7.xyz * vec3(t22);
    //Instruction 4732
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 4733
    //MUL
    t7.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4734
    //MAD
    t7.xyz = _Object2World[0].xyz * t1.xxx + t7.xyz;
    //Instruction 4735
    //MAD
    t7.xyz = _Object2World[2].xyz * t1.zzz + t7.xyz;
    //Instruction 4736
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t7.xyz;
    //Instruction 4737
    //ADD
    t10_4.xyz = _WavingTint.xyz + vec3(-0.500000, -0.500000, -0.500000);
    //Instruction 4738
    //MAD
    t10_4.xyz = t0.xxx * t10_4.xyz + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 4739
    //MUL
    t10_4.xyz = t10_4.xyz * in_COLOR0.xyz;
    //Instruction 4740
    //MUL
    vs_COLOR0.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 4741
    //MOV
    t1.y = in_POSITION0.y;
    //Instruction 4742
    //ADD
    t0.xyz = t1.xyz + (-_CameraPosition.xyz);
    //Instruction 4743
    //DP3
    t0.x = dot(t0.xyz, t0.xyz);
    //Instruction 4744
    //ADD
    t0.x = (-t0.x) + _WaveAndDistance.w;
    //Instruction 4745
    //DP2
    t0.x = dot(_CameraPosition.ww, t0.xx);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4746
    //MOV
    vs_COLOR0.w = t0.x;
    //Instruction 4747
    //MUL
    t16_5.x = t2.y * t2.y;
    //Instruction 4748
    //MAD
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    //Instruction 4749
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 4750
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 4751
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 4752
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 4753
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 4754
    //MOV
    t2.w = 1.0;
    //Instruction 4755
    //DP4
    t16_6.x = dot(unity_SHAr, t2);
    //Instruction 4756
    //DP4
    t16_6.y = dot(unity_SHAg, t2);
    //Instruction 4757
    //DP4
    t16_6.z = dot(unity_SHAb, t2);
    //Instruction 4758
    //ADD
    vs_TEXCOORD3.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 4759
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4760
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 4761
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 4762
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 4763
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 4764
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 4765
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 4766
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 4767
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 4768
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 4674
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 4675
    //MAD
    t10_1 = t10_0.w * vs_COLOR0.w + (-_Cutoff);
    //Instruction 4676
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 4677
    //LT
    tb12 = t10_1<0.0;
    //Instruction 4678
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 4679
    //SAMPLE_C_LZ
    vec3 txVec14 = vec3(vs_TEXCOORD4.xy,vs_TEXCOORD4.z);
    t16_2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    //Instruction 4680
    //ADD
    t16_6 = (-_LightShadowData.x) + 1.0;
    //Instruction 4681
    //MAD
    t16_2.x = t16_2.x * t16_6 + _LightShadowData.x;
    //Instruction 4682
    //MUL
    t16_2.xyz = t16_2.xxx * _LightColor0.xyz;
    //Instruction 4683
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 4684
    //MUL
    t16_3.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 4685
    //DP3
    t16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4686
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 4687
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_14) + t16_3.xyz;
    //Instruction 4688
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 4689
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4690
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 vertex_5;
  vertex_5.yw = _glesVertex.yw;
  lowp vec4 color_6;
  color_6.xyz = _glesColor.xyz;
  lowp vec3 waveColor_7;
  highp vec3 waveMove_8;
  highp vec4 s_9;
  highp vec4 waves_10;
  waves_10 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_10 = (waves_10 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_10 = (waves_10 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_11;
  tmpvar_11 = fract(waves_10);
  waves_10 = tmpvar_11;
  highp vec4 val_12;
  highp vec4 s_13;
  val_12 = ((tmpvar_11 * 6.408849) - 3.141593);
  highp vec4 tmpvar_14;
  tmpvar_14 = (val_12 * val_12);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * val_12);
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_14);
  s_13 = (((val_12 + 
    (tmpvar_15 * -0.1616162)
  ) + (tmpvar_16 * 0.0083333)) + ((tmpvar_16 * tmpvar_14) * -0.00019841));
  s_9 = (s_13 * s_13);
  s_9 = (s_9 * s_9);
  highp float tmpvar_17;
  tmpvar_17 = (dot (s_9, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_9 = (s_9 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_8.y = 0.0;
  waveMove_8.x = dot (s_9, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_8.z = dot (s_9, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_5.xz = (_glesVertex.xz - (waveMove_8.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_17));
  waveColor_7 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = (vertex_5.xyz - _CameraPosition.xyz);
  highp float tmpvar_20;
  tmpvar_20 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_19, tmpvar_19))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_6.w = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.xyz = ((2.0 * waveColor_7) * _glesColor.xyz);
  tmpvar_21.w = color_6.w;
  highp vec4 v_22;
  v_22.x = _World2Object[0].x;
  v_22.y = _World2Object[1].x;
  v_22.z = _World2Object[2].x;
  v_22.w = _World2Object[3].x;
  highp vec4 v_23;
  v_23.x = _World2Object[0].y;
  v_23.y = _World2Object[1].y;
  v_23.z = _World2Object[2].y;
  v_23.w = _World2Object[3].y;
  highp vec4 v_24;
  v_24.x = _World2Object[0].z;
  v_24.y = _World2Object[1].z;
  v_24.z = _World2Object[2].z;
  v_24.w = _World2Object[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(((
    (v_22.xyz * _glesNormal.x)
   + 
    (v_23.xyz * _glesNormal.y)
  ) + (v_24.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_25;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  tmpvar_3 = (unity_World2Shadow[0] * (_Object2World * vertex_5));
  gl_Position = (glstate_matrix_mvp * vertex_5);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * vertex_5).xyz;
  xlv_COLOR0 = tmpvar_21;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_9;
  x_9 = (tmpvar_8.w - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp float shadow_10;
  shadow_10 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_10;
  mediump vec3 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_11 = (tmpvar_2 * tmpvar_1);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_12 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz), unity_DynamicLightmap_HDR.yyy);
  tmpvar_2 = tmpvar_11;
  lowp vec4 c_14;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_8.xyz * tmpvar_11) * diff_16);
  c_15.w = (tmpvar_8.w * xlv_COLOR0.w);
  c_14.w = c_15.w;
  c_14.xyz = (c_15.xyz + (tmpvar_8.xyz * tmpvar_12));
  c_4.xyz = c_14.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out mediump vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
lowp vec3 t10_4;
highp vec3 t5;
highp float t16;
void main()
{
    //Instruction 4792
    //MUL
    t0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
    //Instruction 4793
    //MUL
    t1 = t0.yyyy * vec4(0.006000, 0.020000, 0.020000, 0.050000);
    //Instruction 4794
    //MAD
    t0 = t0.xxxx * vec4(0.012000, 0.020000, 0.060000, 0.024000) + t1;
    //Instruction 4795
    //MAD
    t0 = _WaveAndDistance.xxxx * vec4(1.200000, 2.000000, 1.600000, 4.800000) + t0;
    //Instruction 4796
    //FRC
    t0 = fract(t0);
    //Instruction 4797
    //MAD
    t0 = t0 * vec4(6.408849, 6.408849, 6.408849, 6.408849) + vec4(-3.141593, -3.141593, -3.141593, -3.141593);
    //Instruction 4798
    //MUL
    t1 = t0 * t0;
    //Instruction 4799
    //MUL
    t2 = t0 * t1;
    //Instruction 4800
    //MAD
    t0 = t2 * vec4(-0.161616, -0.161616, -0.161616, -0.161616) + t0;
    //Instruction 4801
    //MUL
    t2 = t1 * t2;
    //Instruction 4802
    //MUL
    t1 = t1 * t2;
    //Instruction 4803
    //MAD
    t0 = t2 * vec4(0.008333, 0.008333, 0.008333, 0.008333) + t0;
    //Instruction 4804
    //MAD
    t0 = t1 * vec4(-0.000198, -0.000198, -0.000198, -0.000198) + t0;
    //Instruction 4805
    //MUL
    t0 = t0 * t0;
    //Instruction 4806
    //MUL
    t0 = t0 * t0;
    //Instruction 4807
    //MUL
    t1.x = in_COLOR0.w * _WaveAndDistance.z;
    //Instruction 4808
    //MUL
    t1 = t0 * t1.xxxx;
    //Instruction 4809
    //DP4
    t0.x = dot(t0, vec4(0.674200, 0.674200, 0.269680, 0.134840));
    //Instruction 4810
    //MUL
    t0.x = t0.x * 0.700000;
    //Instruction 4811
    //DP4
    t2.x = dot(t1, vec4(0.024000, 0.040000, -0.120000, 0.096000));
    //Instruction 4812
    //DP4
    t2.z = dot(t1, vec4(0.006000, 0.020000, -0.020000, 0.100000));
    //Instruction 4813
    //MAD
    t1.xz = (-t2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    //Instruction 4814
    //MUL
    t2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4815
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 4816
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 4817
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 4818
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4819
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4820
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4821
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4822
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4823
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4824
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4825
    //ADD
    t5.xyz = t2.xyz + t3.xyz;
    //Instruction 4826
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4827
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4828
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4829
    //ADD
    t5.xyz = t5.xyz + t2.xyz;
    //Instruction 4830
    //DP3
    t16 = dot(t5.xyz, t5.xyz);
    //Instruction 4831
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 4832
    //MUL
    t5.xyz = t5.xyz * vec3(t16);
    //Instruction 4833
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 4834
    //MUL
    t5.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4835
    //MAD
    t5.xyz = _Object2World[0].xyz * t1.xxx + t5.xyz;
    //Instruction 4836
    //MAD
    t5.xyz = _Object2World[2].xyz * t1.zzz + t5.xyz;
    //Instruction 4837
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t5.xyz;
    //Instruction 4838
    //ADD
    t10_4.xyz = _WavingTint.xyz + vec3(-0.500000, -0.500000, -0.500000);
    //Instruction 4839
    //MAD
    t10_4.xyz = t0.xxx * t10_4.xyz + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 4840
    //MUL
    t10_4.xyz = t10_4.xyz * in_COLOR0.xyz;
    //Instruction 4841
    //MUL
    vs_COLOR0.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 4842
    //MOV
    t1.y = in_POSITION0.y;
    //Instruction 4843
    //ADD
    t0.xyz = t1.xyz + (-_CameraPosition.xyz);
    //Instruction 4844
    //DP3
    t0.x = dot(t0.xyz, t0.xyz);
    //Instruction 4845
    //ADD
    t0.x = (-t0.x) + _WaveAndDistance.w;
    //Instruction 4846
    //DP2
    t0.x = dot(_CameraPosition.ww, t0.xx);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4847
    //MOV
    vs_COLOR0.w = t0.x;
    //Instruction 4848
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4849
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 4850
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 4851
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 4852
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 4853
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 4854
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 4855
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 4856
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 4857
    //MAD
    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 4858
    //MOV
    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
    //Instruction 4859
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in mediump vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
lowp vec4 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 4769
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 4770
    //MAD
    t10_1.x = t10_0.w * vs_COLOR0.w + (-_Cutoff);
    //Instruction 4771
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 4772
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 4773
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 4774
    //SAMPLE
    t10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
    //Instruction 4775
    //MUL
    t16_2.x = t10_1.w * unity_DynamicLightmap_HDR.x;
    //Instruction 4776
    //MUL
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    //Instruction 4777
    //LOG
    t16_2.xyz = log2(t16_2.xyz);
    //Instruction 4778
    //MUL
    t16_2.xyz = t16_2.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 4779
    //EXP
    t16_2.xyz = exp2(t16_2.xyz);
    //Instruction 4780
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 4781
    //SAMPLE_C_LZ
    vec3 txVec15 = vec3(vs_TEXCOORD4.xy,vs_TEXCOORD4.z);
    t16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    //Instruction 4782
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 4783
    //MAD
    t16_14 = t16_14 * t16_3.x + _LightShadowData.x;
    //Instruction 4784
    //MUL
    t16_3.xyz = vec3(t16_14) * _LightColor0.xyz;
    //Instruction 4785
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 4786
    //DP3
    t16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4787
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 4788
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 4789
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 4790
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4791
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 vertex_5;
  vertex_5.yw = _glesVertex.yw;
  lowp vec4 color_6;
  color_6.xyz = _glesColor.xyz;
  lowp vec3 waveColor_7;
  highp vec3 waveMove_8;
  highp vec4 s_9;
  highp vec4 waves_10;
  waves_10 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_10 = (waves_10 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_10 = (waves_10 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_11;
  tmpvar_11 = fract(waves_10);
  waves_10 = tmpvar_11;
  highp vec4 val_12;
  highp vec4 s_13;
  val_12 = ((tmpvar_11 * 6.408849) - 3.141593);
  highp vec4 tmpvar_14;
  tmpvar_14 = (val_12 * val_12);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * val_12);
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_14);
  s_13 = (((val_12 + 
    (tmpvar_15 * -0.1616162)
  ) + (tmpvar_16 * 0.0083333)) + ((tmpvar_16 * tmpvar_14) * -0.00019841));
  s_9 = (s_13 * s_13);
  s_9 = (s_9 * s_9);
  highp float tmpvar_17;
  tmpvar_17 = (dot (s_9, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_9 = (s_9 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_8.y = 0.0;
  waveMove_8.x = dot (s_9, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_8.z = dot (s_9, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_5.xz = (_glesVertex.xz - (waveMove_8.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_17));
  waveColor_7 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = (vertex_5.xyz - _CameraPosition.xyz);
  highp float tmpvar_20;
  tmpvar_20 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_19, tmpvar_19))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_6.w = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.xyz = ((2.0 * waveColor_7) * _glesColor.xyz);
  tmpvar_21.w = color_6.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * vertex_5).xyz;
  highp vec4 v_23;
  v_23.x = _World2Object[0].x;
  v_23.y = _World2Object[1].x;
  v_23.z = _World2Object[2].x;
  v_23.w = _World2Object[3].x;
  highp vec4 v_24;
  v_24.x = _World2Object[0].y;
  v_24.y = _World2Object[1].y;
  v_24.z = _World2Object[2].y;
  v_24.w = _World2Object[3].y;
  highp vec4 v_25;
  v_25.x = _World2Object[0].z;
  v_25.y = _World2Object[1].z;
  v_25.z = _World2Object[2].z;
  v_25.w = _World2Object[3].z;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize(((
    (v_23.xyz * _glesNormal.x)
   + 
    (v_24.xyz * _glesNormal.y)
  ) + (v_25.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_26;
  tmpvar_2 = worldNormal_1;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = worldNormal_1;
  mediump vec4 normal_28;
  normal_28 = tmpvar_27;
  mediump vec3 x2_29;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, normal_28);
  x1_30.y = dot (unity_SHAg, normal_28);
  x1_30.z = dot (unity_SHAb, normal_28);
  mediump vec4 tmpvar_31;
  tmpvar_31 = (normal_28.xyzz * normal_28.yzzx);
  x2_29.x = dot (unity_SHBr, tmpvar_31);
  x2_29.y = dot (unity_SHBg, tmpvar_31);
  x2_29.z = dot (unity_SHBb, tmpvar_31);
  highp vec3 lightColor0_32;
  lightColor0_32 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_33;
  lightColor1_33 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_34;
  lightColor2_34 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_35;
  lightColor3_35 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_36;
  lightAttenSq_36 = unity_4LightAtten0;
  highp vec3 normal_37;
  normal_37 = worldNormal_1;
  highp vec3 col_38;
  highp vec4 ndotl_39;
  highp vec4 lengthSq_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_42;
  tmpvar_42 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_4LightPosZ0 - tmpvar_22.z);
  lengthSq_40 = (tmpvar_41 * tmpvar_41);
  lengthSq_40 = (lengthSq_40 + (tmpvar_42 * tmpvar_42));
  lengthSq_40 = (lengthSq_40 + (tmpvar_43 * tmpvar_43));
  ndotl_39 = (tmpvar_41 * normal_37.x);
  ndotl_39 = (ndotl_39 + (tmpvar_42 * normal_37.y));
  ndotl_39 = (ndotl_39 + (tmpvar_43 * normal_37.z));
  highp vec4 tmpvar_44;
  tmpvar_44 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_39 * inversesqrt(lengthSq_40)));
  ndotl_39 = tmpvar_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (tmpvar_44 * (1.0/((1.0 + 
    (lengthSq_40 * lightAttenSq_36)
  ))));
  col_38 = (lightColor0_32 * tmpvar_45.x);
  col_38 = (col_38 + (lightColor1_33 * tmpvar_45.y));
  col_38 = (col_38 + (lightColor2_34 * tmpvar_45.z));
  col_38 = (col_38 + (lightColor3_35 * tmpvar_45.w));
  tmpvar_3 = (((x2_29 + 
    (unity_SHC.xyz * ((normal_28.x * normal_28.x) - (normal_28.y * normal_28.y)))
  ) + x1_30) + col_38);
  tmpvar_4 = (unity_World2Shadow[0] * (_Object2World * vertex_5));
  gl_Position = (glstate_matrix_mvp * vertex_5);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_22;
  xlv_COLOR0 = tmpvar_21;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_9;
  x_9 = (tmpvar_8.w - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp float shadow_10;
  shadow_10 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_11;
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_8.xyz * tmpvar_11) * diff_14);
  c_13.w = (tmpvar_8.w * xlv_COLOR0.w);
  c_12.w = c_13.w;
  c_12.xyz = (c_13.xyz + (tmpvar_8.xyz * xlv_TEXCOORD3));
  c_4.xyz = c_12.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out mediump vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
lowp vec3 t10_4;
mediump vec3 t16_5;
highp vec4 t6;
mediump vec3 t16_6;
highp vec3 t7;
highp float t22;
void main()
{
    //Instruction 4877
    //MUL
    t0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
    //Instruction 4878
    //MUL
    t1 = t0.yyyy * vec4(0.006000, 0.020000, 0.020000, 0.050000);
    //Instruction 4879
    //MAD
    t0 = t0.xxxx * vec4(0.012000, 0.020000, 0.060000, 0.024000) + t1;
    //Instruction 4880
    //MAD
    t0 = _WaveAndDistance.xxxx * vec4(1.200000, 2.000000, 1.600000, 4.800000) + t0;
    //Instruction 4881
    //FRC
    t0 = fract(t0);
    //Instruction 4882
    //MAD
    t0 = t0 * vec4(6.408849, 6.408849, 6.408849, 6.408849) + vec4(-3.141593, -3.141593, -3.141593, -3.141593);
    //Instruction 4883
    //MUL
    t1 = t0 * t0;
    //Instruction 4884
    //MUL
    t2 = t0 * t1;
    //Instruction 4885
    //MAD
    t0 = t2 * vec4(-0.161616, -0.161616, -0.161616, -0.161616) + t0;
    //Instruction 4886
    //MUL
    t2 = t1 * t2;
    //Instruction 4887
    //MUL
    t1 = t1 * t2;
    //Instruction 4888
    //MAD
    t0 = t2 * vec4(0.008333, 0.008333, 0.008333, 0.008333) + t0;
    //Instruction 4889
    //MAD
    t0 = t1 * vec4(-0.000198, -0.000198, -0.000198, -0.000198) + t0;
    //Instruction 4890
    //MUL
    t0 = t0 * t0;
    //Instruction 4891
    //MUL
    t0 = t0 * t0;
    //Instruction 4892
    //MUL
    t1.x = in_COLOR0.w * _WaveAndDistance.z;
    //Instruction 4893
    //MUL
    t1 = t0 * t1.xxxx;
    //Instruction 4894
    //DP4
    t0.x = dot(t0, vec4(0.674200, 0.674200, 0.269680, 0.134840));
    //Instruction 4895
    //MUL
    t0.x = t0.x * 0.700000;
    //Instruction 4896
    //DP4
    t2.x = dot(t1, vec4(0.024000, 0.040000, -0.120000, 0.096000));
    //Instruction 4897
    //DP4
    t2.z = dot(t1, vec4(0.006000, 0.020000, -0.020000, 0.100000));
    //Instruction 4898
    //MAD
    t1.xz = (-t2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    //Instruction 4899
    //MUL
    t2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 4900
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 4901
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 4902
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 4903
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 4904
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 4905
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 4906
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 4907
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 4908
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 4909
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 4910
    //ADD
    t7.xyz = t2.xyz + t3.xyz;
    //Instruction 4911
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 4912
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 4913
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 4914
    //ADD
    t7.xyz = t7.xyz + t2.xyz;
    //Instruction 4915
    //DP3
    t22 = dot(t7.xyz, t7.xyz);
    //Instruction 4916
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 4917
    //MUL
    t2.xyz = t7.xyz * vec3(t22);
    //Instruction 4918
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 4919
    //MUL
    t7.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 4920
    //MAD
    t7.xyz = _Object2World[0].xyz * t1.xxx + t7.xyz;
    //Instruction 4921
    //MAD
    t7.xyz = _Object2World[2].xyz * t1.zzz + t7.xyz;
    //Instruction 4922
    //MAD
    t7.xyz = _Object2World[3].xyz * in_POSITION0.www + t7.xyz;
    //Instruction 4923
    //MOV
    vs_TEXCOORD2.xyz = t7.xyz;
    //Instruction 4924
    //ADD
    t10_4.xyz = _WavingTint.xyz + vec3(-0.500000, -0.500000, -0.500000);
    //Instruction 4925
    //MAD
    t10_4.xyz = t0.xxx * t10_4.xyz + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 4926
    //MUL
    t10_4.xyz = t10_4.xyz * in_COLOR0.xyz;
    //Instruction 4927
    //MUL
    vs_COLOR0.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 4928
    //MOV
    t1.y = in_POSITION0.y;
    //Instruction 4929
    //ADD
    t3.xyz = t1.xyz + (-_CameraPosition.xyz);
    //Instruction 4930
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 4931
    //ADD
    t0.x = (-t0.x) + _WaveAndDistance.w;
    //Instruction 4932
    //DP2
    t0.x = dot(_CameraPosition.ww, t0.xx);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4933
    //MOV
    vs_COLOR0.w = t0.x;
    //Instruction 4934
    //MUL
    t16_5.x = t2.y * t2.y;
    //Instruction 4935
    //MAD
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    //Instruction 4936
    //MUL
    t16_3 = t2.yzzx * t2.xyzz;
    //Instruction 4937
    //DP4
    t16_6.x = dot(unity_SHBr, t16_3);
    //Instruction 4938
    //DP4
    t16_6.y = dot(unity_SHBg, t16_3);
    //Instruction 4939
    //DP4
    t16_6.z = dot(unity_SHBb, t16_3);
    //Instruction 4940
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 4941
    //MOV
    t2.w = 1.0;
    //Instruction 4942
    //DP4
    t16_6.x = dot(unity_SHAr, t2);
    //Instruction 4943
    //DP4
    t16_6.y = dot(unity_SHAg, t2);
    //Instruction 4944
    //DP4
    t16_6.z = dot(unity_SHAb, t2);
    //Instruction 4945
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 4946
    //ADD
    t3 = (-t7.yyyy) + unity_4LightPosY0;
    //Instruction 4947
    //MUL
    t4 = t2.yyyy * t3;
    //Instruction 4948
    //MUL
    t3 = t3 * t3;
    //Instruction 4949
    //ADD
    t6 = (-t7.xxxx) + unity_4LightPosX0;
    //Instruction 4950
    //ADD
    t0 = (-t7.zzzz) + unity_4LightPosZ0;
    //Instruction 4951
    //MAD
    t4 = t6 * t2.xxxx + t4;
    //Instruction 4952
    //MAD
    t3 = t6 * t6 + t3;
    //Instruction 4953
    //MAD
    t3 = t0 * t0 + t3;
    //Instruction 4954
    //MAD
    t0 = t0 * t2.zzzz + t4;
    //Instruction 4955
    //RSQ
    t2 = inversesqrt(t3);
    //Instruction 4956
    //MAD
    t3 = t3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 4957
    //DIV
    t3 = vec4(1.0, 1.0, 1.0, 1.0) / t3;
    //Instruction 4958
    //MUL
    t0 = t0 * t2;
    //Instruction 4959
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 4960
    //MUL
    t0 = t3 * t0;
    //Instruction 4961
    //MUL
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 4962
    //MAD
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    //Instruction 4963
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    //Instruction 4964
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 4965
    //ADD
    t0.xyz = t0.xyz + t16_5.xyz;
    //Instruction 4966
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 4967
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 4968
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 4969
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 4970
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 4971
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 4972
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 4973
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 4974
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 4975
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 4976
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in mediump vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 4860
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 4861
    //MAD
    t10_1 = t10_0.w * vs_COLOR0.w + (-_Cutoff);
    //Instruction 4862
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 4863
    //LT
    tb12 = t10_1<0.0;
    //Instruction 4864
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 4865
    //SAMPLE_C_LZ
    vec3 txVec16 = vec3(vs_TEXCOORD4.xy,vs_TEXCOORD4.z);
    t16_2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec16, 0.0);
    //Instruction 4866
    //ADD
    t16_6 = (-_LightShadowData.x) + 1.0;
    //Instruction 4867
    //MAD
    t16_2.x = t16_2.x * t16_6 + _LightShadowData.x;
    //Instruction 4868
    //MUL
    t16_2.xyz = t16_2.xxx * _LightColor0.xyz;
    //Instruction 4869
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 4870
    //MUL
    t16_3.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 4871
    //DP3
    t16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4872
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 4873
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_14) + t16_3.xyz;
    //Instruction 4874
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 4875
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4876
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 vertex_5;
  vertex_5.yw = _glesVertex.yw;
  lowp vec4 color_6;
  color_6.xyz = _glesColor.xyz;
  lowp vec3 waveColor_7;
  highp vec3 waveMove_8;
  highp vec4 s_9;
  highp vec4 waves_10;
  waves_10 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_10 = (waves_10 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_10 = (waves_10 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_11;
  tmpvar_11 = fract(waves_10);
  waves_10 = tmpvar_11;
  highp vec4 val_12;
  highp vec4 s_13;
  val_12 = ((tmpvar_11 * 6.408849) - 3.141593);
  highp vec4 tmpvar_14;
  tmpvar_14 = (val_12 * val_12);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * val_12);
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_14);
  s_13 = (((val_12 + 
    (tmpvar_15 * -0.1616162)
  ) + (tmpvar_16 * 0.0083333)) + ((tmpvar_16 * tmpvar_14) * -0.00019841));
  s_9 = (s_13 * s_13);
  s_9 = (s_9 * s_9);
  highp float tmpvar_17;
  tmpvar_17 = (dot (s_9, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_9 = (s_9 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_8.y = 0.0;
  waveMove_8.x = dot (s_9, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_8.z = dot (s_9, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_5.xz = (_glesVertex.xz - (waveMove_8.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_17));
  waveColor_7 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = (vertex_5.xyz - _CameraPosition.xyz);
  highp float tmpvar_20;
  tmpvar_20 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_19, tmpvar_19))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_6.w = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.xyz = ((2.0 * waveColor_7) * _glesColor.xyz);
  tmpvar_21.w = color_6.w;
  highp vec4 v_22;
  v_22.x = _World2Object[0].x;
  v_22.y = _World2Object[1].x;
  v_22.z = _World2Object[2].x;
  v_22.w = _World2Object[3].x;
  highp vec4 v_23;
  v_23.x = _World2Object[0].y;
  v_23.y = _World2Object[1].y;
  v_23.z = _World2Object[2].y;
  v_23.w = _World2Object[3].y;
  highp vec4 v_24;
  v_24.x = _World2Object[0].z;
  v_24.y = _World2Object[1].z;
  v_24.z = _World2Object[2].z;
  v_24.w = _World2Object[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(((
    (v_22.xyz * _glesNormal.x)
   + 
    (v_23.xyz * _glesNormal.y)
  ) + (v_24.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_25;
  tmpvar_2 = worldNormal_1;
  tmpvar_4.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  tmpvar_3 = (unity_World2Shadow[0] * (_Object2World * vertex_5));
  gl_Position = (glstate_matrix_mvp * vertex_5);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * vertex_5).xyz;
  xlv_COLOR0 = tmpvar_21;
  xlv_TEXCOORD4 = tmpvar_3;
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying mediump vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_9;
  x_9 = (tmpvar_8.w - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp float shadow_10;
  shadow_10 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_10;
  mediump vec3 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_11 = (tmpvar_2 * tmpvar_1);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD6.zw);
  tmpvar_12 = pow (((unity_DynamicLightmap_HDR.x * tmpvar_13.w) * tmpvar_13.xyz), unity_DynamicLightmap_HDR.yyy);
  tmpvar_2 = tmpvar_11;
  lowp vec4 c_14;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_8.xyz * tmpvar_11) * diff_16);
  c_15.w = (tmpvar_8.w * xlv_COLOR0.w);
  c_14.w = c_15.w;
  c_14.xyz = (c_15.xyz + (tmpvar_8.xyz * tmpvar_12));
  c_4.xyz = c_14.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
out mediump vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
lowp vec3 t10_4;
highp vec3 t5;
highp float t16;
void main()
{
    //Instruction 5000
    //MUL
    t0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
    //Instruction 5001
    //MUL
    t1 = t0.yyyy * vec4(0.006000, 0.020000, 0.020000, 0.050000);
    //Instruction 5002
    //MAD
    t0 = t0.xxxx * vec4(0.012000, 0.020000, 0.060000, 0.024000) + t1;
    //Instruction 5003
    //MAD
    t0 = _WaveAndDistance.xxxx * vec4(1.200000, 2.000000, 1.600000, 4.800000) + t0;
    //Instruction 5004
    //FRC
    t0 = fract(t0);
    //Instruction 5005
    //MAD
    t0 = t0 * vec4(6.408849, 6.408849, 6.408849, 6.408849) + vec4(-3.141593, -3.141593, -3.141593, -3.141593);
    //Instruction 5006
    //MUL
    t1 = t0 * t0;
    //Instruction 5007
    //MUL
    t2 = t0 * t1;
    //Instruction 5008
    //MAD
    t0 = t2 * vec4(-0.161616, -0.161616, -0.161616, -0.161616) + t0;
    //Instruction 5009
    //MUL
    t2 = t1 * t2;
    //Instruction 5010
    //MUL
    t1 = t1 * t2;
    //Instruction 5011
    //MAD
    t0 = t2 * vec4(0.008333, 0.008333, 0.008333, 0.008333) + t0;
    //Instruction 5012
    //MAD
    t0 = t1 * vec4(-0.000198, -0.000198, -0.000198, -0.000198) + t0;
    //Instruction 5013
    //MUL
    t0 = t0 * t0;
    //Instruction 5014
    //MUL
    t0 = t0 * t0;
    //Instruction 5015
    //MUL
    t1.x = in_COLOR0.w * _WaveAndDistance.z;
    //Instruction 5016
    //MUL
    t1 = t0 * t1.xxxx;
    //Instruction 5017
    //DP4
    t0.x = dot(t0, vec4(0.674200, 0.674200, 0.269680, 0.134840));
    //Instruction 5018
    //MUL
    t0.x = t0.x * 0.700000;
    //Instruction 5019
    //DP4
    t2.x = dot(t1, vec4(0.024000, 0.040000, -0.120000, 0.096000));
    //Instruction 5020
    //DP4
    t2.z = dot(t1, vec4(0.006000, 0.020000, -0.020000, 0.100000));
    //Instruction 5021
    //MAD
    t1.xz = (-t2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    //Instruction 5022
    //MUL
    t2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5023
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 5024
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 5025
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 5026
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5027
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5028
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5029
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5030
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5031
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5032
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5033
    //ADD
    t5.xyz = t2.xyz + t3.xyz;
    //Instruction 5034
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5035
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5036
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5037
    //ADD
    t5.xyz = t5.xyz + t2.xyz;
    //Instruction 5038
    //DP3
    t16 = dot(t5.xyz, t5.xyz);
    //Instruction 5039
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 5040
    //MUL
    t5.xyz = t5.xyz * vec3(t16);
    //Instruction 5041
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 5042
    //MUL
    t5.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5043
    //MAD
    t5.xyz = _Object2World[0].xyz * t1.xxx + t5.xyz;
    //Instruction 5044
    //MAD
    t5.xyz = _Object2World[2].xyz * t1.zzz + t5.xyz;
    //Instruction 5045
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t5.xyz;
    //Instruction 5046
    //ADD
    t10_4.xyz = _WavingTint.xyz + vec3(-0.500000, -0.500000, -0.500000);
    //Instruction 5047
    //MAD
    t10_4.xyz = t0.xxx * t10_4.xyz + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 5048
    //MUL
    t10_4.xyz = t10_4.xyz * in_COLOR0.xyz;
    //Instruction 5049
    //MUL
    vs_COLOR0.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 5050
    //MOV
    t1.y = in_POSITION0.y;
    //Instruction 5051
    //ADD
    t0.xyz = t1.xyz + (-_CameraPosition.xyz);
    //Instruction 5052
    //DP3
    t0.x = dot(t0.xyz, t0.xyz);
    //Instruction 5053
    //ADD
    t0.x = (-t0.x) + _WaveAndDistance.w;
    //Instruction 5054
    //DP2
    t0.x = dot(_CameraPosition.ww, t0.xx);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 5055
    //MOV
    vs_COLOR0.w = t0.x;
    //Instruction 5056
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 5057
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 5058
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 5059
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 5060
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 5061
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 5062
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 5063
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 5064
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 5065
    //MAD
    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 5066
    //MOV
    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
    //Instruction 5067
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_DynamicLightmap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
in mediump vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
lowp vec4 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 4977
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 4978
    //MAD
    t10_1.x = t10_0.w * vs_COLOR0.w + (-_Cutoff);
    //Instruction 4979
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 4980
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 4981
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 4982
    //SAMPLE
    t10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
    //Instruction 4983
    //MUL
    t16_2.x = t10_1.w * unity_DynamicLightmap_HDR.x;
    //Instruction 4984
    //MUL
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    //Instruction 4985
    //LOG
    t16_2.xyz = log2(t16_2.xyz);
    //Instruction 4986
    //MUL
    t16_2.xyz = t16_2.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 4987
    //EXP
    t16_2.xyz = exp2(t16_2.xyz);
    //Instruction 4988
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 4989
    //SAMPLE_C_LZ
    vec3 txVec17 = vec3(vs_TEXCOORD4.xy,vs_TEXCOORD4.z);
    t16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec17, 0.0);
    //Instruction 4990
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 4991
    //MAD
    t16_14 = t16_14 * t16_3.x + _LightShadowData.x;
    //Instruction 4992
    //MUL
    t16_3.xyz = vec3(t16_14) * _LightColor0.xyz;
    //Instruction 4993
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 4994
    //DP3
    t16_14 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 4995
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 4996
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 4997
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 4998
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 4999
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Geometry+200" "IGNOREPROJECTOR"="true" "DisableBatching"="true" "RenderType"="Grass" }
  ZWrite Off
  Cull Off
  Blend One One
  GpuProgramID 90294
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 s_7;
  highp vec4 waves_8;
  waves_8 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_8 = (waves_8 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_8 = (waves_8 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_9;
  tmpvar_9 = fract(waves_8);
  waves_8 = tmpvar_9;
  highp vec4 val_10;
  highp vec4 s_11;
  val_10 = ((tmpvar_9 * 6.408849) - 3.141593);
  highp vec4 tmpvar_12;
  tmpvar_12 = (val_10 * val_10);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * val_10);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_12);
  s_11 = (((val_10 + 
    (tmpvar_13 * -0.1616162)
  ) + (tmpvar_14 * 0.0083333)) + ((tmpvar_14 * tmpvar_12) * -0.00019841));
  s_7 = (s_11 * s_11);
  s_7 = (s_7 * s_7);
  highp float tmpvar_15;
  tmpvar_15 = (dot (s_7, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_7 = (s_7 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (s_7, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (s_7, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_15));
  waveColor_5 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_19.w = color_4.w;
  highp vec4 v_20;
  v_20.x = _World2Object[0].x;
  v_20.y = _World2Object[1].x;
  v_20.z = _World2Object[2].x;
  v_20.w = _World2Object[3].x;
  highp vec4 v_21;
  v_21.x = _World2Object[0].y;
  v_21.y = _World2Object[1].y;
  v_21.z = _World2Object[2].y;
  v_21.w = _World2Object[3].y;
  highp vec4 v_22;
  v_22.x = _World2Object[0].z;
  v_22.y = _World2Object[1].z;
  v_22.z = _World2Object[2].z;
  v_22.w = _World2Object[3].z;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(((
    (v_20.xyz * _glesNormal.x)
   + 
    (v_21.xyz * _glesNormal.y)
  ) + (v_22.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_23;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * vertex_3).xyz;
  xlv_COLOR0 = tmpvar_19;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_8;
  x_8 = (tmpvar_7.w - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = xlv_TEXCOORD2;
  highp vec3 tmpvar_10;
  tmpvar_10 = (_LightMatrix0 * tmpvar_9).xyz;
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_10, tmpvar_10);
  lowp float tmpvar_12;
  tmpvar_12 = texture2D (_LightTexture0, vec2(tmpvar_11)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_12);
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_15);
  c_14.w = (tmpvar_7.w * xlv_COLOR0.w);
  c_13.w = c_14.w;
  c_13.xyz = c_14.xyz;
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
lowp vec3 t10_4;
highp vec3 t5;
highp float t16;
void main()
{
    //Instruction 5091
    //MUL
    t0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
    //Instruction 5092
    //MUL
    t1 = t0.yyyy * vec4(0.006000, 0.020000, 0.020000, 0.050000);
    //Instruction 5093
    //MAD
    t0 = t0.xxxx * vec4(0.012000, 0.020000, 0.060000, 0.024000) + t1;
    //Instruction 5094
    //MAD
    t0 = _WaveAndDistance.xxxx * vec4(1.200000, 2.000000, 1.600000, 4.800000) + t0;
    //Instruction 5095
    //FRC
    t0 = fract(t0);
    //Instruction 5096
    //MAD
    t0 = t0 * vec4(6.408849, 6.408849, 6.408849, 6.408849) + vec4(-3.141593, -3.141593, -3.141593, -3.141593);
    //Instruction 5097
    //MUL
    t1 = t0 * t0;
    //Instruction 5098
    //MUL
    t2 = t0 * t1;
    //Instruction 5099
    //MAD
    t0 = t2 * vec4(-0.161616, -0.161616, -0.161616, -0.161616) + t0;
    //Instruction 5100
    //MUL
    t2 = t1 * t2;
    //Instruction 5101
    //MUL
    t1 = t1 * t2;
    //Instruction 5102
    //MAD
    t0 = t2 * vec4(0.008333, 0.008333, 0.008333, 0.008333) + t0;
    //Instruction 5103
    //MAD
    t0 = t1 * vec4(-0.000198, -0.000198, -0.000198, -0.000198) + t0;
    //Instruction 5104
    //MUL
    t0 = t0 * t0;
    //Instruction 5105
    //MUL
    t0 = t0 * t0;
    //Instruction 5106
    //MUL
    t1.x = in_COLOR0.w * _WaveAndDistance.z;
    //Instruction 5107
    //MUL
    t1 = t0 * t1.xxxx;
    //Instruction 5108
    //DP4
    t0.x = dot(t0, vec4(0.674200, 0.674200, 0.269680, 0.134840));
    //Instruction 5109
    //MUL
    t0.x = t0.x * 0.700000;
    //Instruction 5110
    //DP4
    t2.x = dot(t1, vec4(0.024000, 0.040000, -0.120000, 0.096000));
    //Instruction 5111
    //DP4
    t2.z = dot(t1, vec4(0.006000, 0.020000, -0.020000, 0.100000));
    //Instruction 5112
    //MAD
    t1.xz = (-t2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    //Instruction 5113
    //MUL
    t2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5114
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 5115
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 5116
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 5117
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5118
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5119
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5120
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5121
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5122
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5123
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5124
    //ADD
    t5.xyz = t2.xyz + t3.xyz;
    //Instruction 5125
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5126
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5127
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5128
    //ADD
    t5.xyz = t5.xyz + t2.xyz;
    //Instruction 5129
    //DP3
    t16 = dot(t5.xyz, t5.xyz);
    //Instruction 5130
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 5131
    //MUL
    t5.xyz = t5.xyz * vec3(t16);
    //Instruction 5132
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 5133
    //MUL
    t5.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5134
    //MAD
    t5.xyz = _Object2World[0].xyz * t1.xxx + t5.xyz;
    //Instruction 5135
    //MAD
    t5.xyz = _Object2World[2].xyz * t1.zzz + t5.xyz;
    //Instruction 5136
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t5.xyz;
    //Instruction 5137
    //ADD
    t10_4.xyz = _WavingTint.xyz + vec3(-0.500000, -0.500000, -0.500000);
    //Instruction 5138
    //MAD
    t10_4.xyz = t0.xxx * t10_4.xyz + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 5139
    //MUL
    t10_4.xyz = t10_4.xyz * in_COLOR0.xyz;
    //Instruction 5140
    //MUL
    vs_COLOR0.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 5141
    //MOV
    t1.y = in_POSITION0.y;
    //Instruction 5142
    //ADD
    t0.xyz = t1.xyz + (-_CameraPosition.xyz);
    //Instruction 5143
    //DP3
    t0.x = dot(t0.xyz, t0.xyz);
    //Instruction 5144
    //ADD
    t0.x = (-t0.x) + _WaveAndDistance.w;
    //Instruction 5145
    //DP2
    t0.x = dot(_CameraPosition.ww, t0.xx);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 5146
    //MOV
    vs_COLOR0.w = t0.x;
    //Instruction 5147
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in lowp vec4 vs_COLOR0;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
highp float t9;
mediump float t16_9;
lowp float t10_9;
bool tb9;
mediump float t16_11;
void main()
{
    //Instruction 5068
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 5069
    //MAD
    t10_1 = t10_0.w * vs_COLOR0.w + (-_Cutoff);
    //Instruction 5070
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 5071
    //LT
    tb9 = t10_1<0.0;
    //Instruction 5072
    //DISCARD
    if((int(tb9))!=0){discard;}
    //Instruction 5073
    //MUL
    t16_2.xyz = vs_TEXCOORD2.yyy * _LightMatrix0[1].xyz;
    //Instruction 5074
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD2.xxx + t16_2.xyz;
    //Instruction 5075
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD2.zzz + t16_2.xyz;
    //Instruction 5076
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 5077
    //DP3
    t16_9 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 5078
    //SAMPLE
    t10_9 = texture(_LightTexture0, vec2(t16_9)).w;
    //Instruction 5079
    //MUL
    t16_2.xyz = vec3(t10_9) * _LightColor0.xyz;
    //Instruction 5080
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 5081
    //ADD
    t0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 5082
    //DP3
    t9 = dot(t0.xyz, t0.xyz);
    //Instruction 5083
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 5084
    //MUL
    t0.xyz = vec3(t9) * t0.xyz;
    //Instruction 5085
    //DP3
    t16_11 = dot(vs_TEXCOORD1.xyz, t0.xyz);
    //Instruction 5086
    //MAX
    t16_11 = max(t16_11, 0.0);
    //Instruction 5087
    //MUL
    t16_2.xyz = vec3(t16_11) * t16_2.xyz;
    //Instruction 5088
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 5089
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5090
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 s_7;
  highp vec4 waves_8;
  waves_8 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_8 = (waves_8 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_8 = (waves_8 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_9;
  tmpvar_9 = fract(waves_8);
  waves_8 = tmpvar_9;
  highp vec4 val_10;
  highp vec4 s_11;
  val_10 = ((tmpvar_9 * 6.408849) - 3.141593);
  highp vec4 tmpvar_12;
  tmpvar_12 = (val_10 * val_10);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * val_10);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_12);
  s_11 = (((val_10 + 
    (tmpvar_13 * -0.1616162)
  ) + (tmpvar_14 * 0.0083333)) + ((tmpvar_14 * tmpvar_12) * -0.00019841));
  s_7 = (s_11 * s_11);
  s_7 = (s_7 * s_7);
  highp float tmpvar_15;
  tmpvar_15 = (dot (s_7, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_7 = (s_7 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (s_7, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (s_7, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_15));
  waveColor_5 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_19.w = color_4.w;
  highp vec4 v_20;
  v_20.x = _World2Object[0].x;
  v_20.y = _World2Object[1].x;
  v_20.z = _World2Object[2].x;
  v_20.w = _World2Object[3].x;
  highp vec4 v_21;
  v_21.x = _World2Object[0].y;
  v_21.y = _World2Object[1].y;
  v_21.z = _World2Object[2].y;
  v_21.w = _World2Object[3].y;
  highp vec4 v_22;
  v_22.x = _World2Object[0].z;
  v_22.y = _World2Object[1].z;
  v_22.z = _World2Object[2].z;
  v_22.w = _World2Object[3].z;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(((
    (v_20.xyz * _glesNormal.x)
   + 
    (v_21.xyz * _glesNormal.y)
  ) + (v_22.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_23;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * vertex_3).xyz;
  xlv_COLOR0 = tmpvar_19;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_8;
  x_8 = (tmpvar_7.w - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_9;
  lowp vec4 c_10;
  lowp float diff_11;
  mediump float tmpvar_12;
  tmpvar_12 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_11 = tmpvar_12;
  c_10.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_11);
  c_10.w = (tmpvar_7.w * xlv_COLOR0.w);
  c_9.w = c_10.w;
  c_9.xyz = c_10.xyz;
  c_3.xyz = c_9.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
lowp vec3 t10_4;
highp vec3 t5;
highp float t16;
void main()
{
    //Instruction 3708
    //MUL
    t0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
    //Instruction 3709
    //MUL
    t1 = t0.yyyy * vec4(0.006000, 0.020000, 0.020000, 0.050000);
    //Instruction 3710
    //MAD
    t0 = t0.xxxx * vec4(0.012000, 0.020000, 0.060000, 0.024000) + t1;
    //Instruction 3711
    //MAD
    t0 = _WaveAndDistance.xxxx * vec4(1.200000, 2.000000, 1.600000, 4.800000) + t0;
    //Instruction 3712
    //FRC
    t0 = fract(t0);
    //Instruction 3713
    //MAD
    t0 = t0 * vec4(6.408849, 6.408849, 6.408849, 6.408849) + vec4(-3.141593, -3.141593, -3.141593, -3.141593);
    //Instruction 3714
    //MUL
    t1 = t0 * t0;
    //Instruction 3715
    //MUL
    t2 = t0 * t1;
    //Instruction 3716
    //MAD
    t0 = t2 * vec4(-0.161616, -0.161616, -0.161616, -0.161616) + t0;
    //Instruction 3717
    //MUL
    t2 = t1 * t2;
    //Instruction 3718
    //MUL
    t1 = t1 * t2;
    //Instruction 3719
    //MAD
    t0 = t2 * vec4(0.008333, 0.008333, 0.008333, 0.008333) + t0;
    //Instruction 3720
    //MAD
    t0 = t1 * vec4(-0.000198, -0.000198, -0.000198, -0.000198) + t0;
    //Instruction 3721
    //MUL
    t0 = t0 * t0;
    //Instruction 3722
    //MUL
    t0 = t0 * t0;
    //Instruction 3723
    //MUL
    t1.x = in_COLOR0.w * _WaveAndDistance.z;
    //Instruction 3724
    //MUL
    t1 = t0 * t1.xxxx;
    //Instruction 3725
    //DP4
    t0.x = dot(t0, vec4(0.674200, 0.674200, 0.269680, 0.134840));
    //Instruction 3726
    //MUL
    t0.x = t0.x * 0.700000;
    //Instruction 3727
    //DP4
    t2.x = dot(t1, vec4(0.024000, 0.040000, -0.120000, 0.096000));
    //Instruction 3728
    //DP4
    t2.z = dot(t1, vec4(0.006000, 0.020000, -0.020000, 0.100000));
    //Instruction 3729
    //MAD
    t1.xz = (-t2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    //Instruction 3730
    //MUL
    t2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3731
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 3732
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 3733
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 3734
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3735
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3736
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3737
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3738
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3739
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3740
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3741
    //ADD
    t5.xyz = t2.xyz + t3.xyz;
    //Instruction 3742
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3743
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3744
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3745
    //ADD
    t5.xyz = t5.xyz + t2.xyz;
    //Instruction 3746
    //DP3
    t16 = dot(t5.xyz, t5.xyz);
    //Instruction 3747
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 3748
    //MUL
    t5.xyz = t5.xyz * vec3(t16);
    //Instruction 3749
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 3750
    //MUL
    t5.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3751
    //MAD
    t5.xyz = _Object2World[0].xyz * t1.xxx + t5.xyz;
    //Instruction 3752
    //MAD
    t5.xyz = _Object2World[2].xyz * t1.zzz + t5.xyz;
    //Instruction 3753
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t5.xyz;
    //Instruction 3754
    //ADD
    t10_4.xyz = _WavingTint.xyz + vec3(-0.500000, -0.500000, -0.500000);
    //Instruction 3755
    //MAD
    t10_4.xyz = t0.xxx * t10_4.xyz + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 3756
    //MUL
    t10_4.xyz = t10_4.xyz * in_COLOR0.xyz;
    //Instruction 3757
    //MUL
    vs_COLOR0.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 3758
    //MOV
    t1.y = in_POSITION0.y;
    //Instruction 3759
    //ADD
    t0.xyz = t1.xyz + (-_CameraPosition.xyz);
    //Instruction 3760
    //DP3
    t0.x = dot(t0.xyz, t0.xyz);
    //Instruction 3761
    //ADD
    t0.x = (-t0.x) + _WaveAndDistance.w;
    //Instruction 3762
    //DP2
    t0.x = dot(_CameraPosition.ww, t0.xx);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3763
    //MOV
    vs_COLOR0.w = t0.x;
    //Instruction 3764
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_11;
void main()
{
    //Instruction 3696
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 3697
    //MAD
    t10_1 = t10_0.w * vs_COLOR0.w + (-_Cutoff);
    //Instruction 3698
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 3699
    //MUL
    t16_2.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 3700
    //LT
    tb0 = t10_1<0.0;
    //Instruction 3701
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 3702
    //DP3
    t16_11 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 3703
    //MAX
    t16_11 = max(t16_11, 0.0);
    //Instruction 3704
    //MUL
    t16_2.xyz = vec3(t16_11) * t16_2.xyz;
    //Instruction 3705
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 3706
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3707
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 s_7;
  highp vec4 waves_8;
  waves_8 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_8 = (waves_8 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_8 = (waves_8 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_9;
  tmpvar_9 = fract(waves_8);
  waves_8 = tmpvar_9;
  highp vec4 val_10;
  highp vec4 s_11;
  val_10 = ((tmpvar_9 * 6.408849) - 3.141593);
  highp vec4 tmpvar_12;
  tmpvar_12 = (val_10 * val_10);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * val_10);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_12);
  s_11 = (((val_10 + 
    (tmpvar_13 * -0.1616162)
  ) + (tmpvar_14 * 0.0083333)) + ((tmpvar_14 * tmpvar_12) * -0.00019841));
  s_7 = (s_11 * s_11);
  s_7 = (s_7 * s_7);
  highp float tmpvar_15;
  tmpvar_15 = (dot (s_7, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_7 = (s_7 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (s_7, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (s_7, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_15));
  waveColor_5 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_19.w = color_4.w;
  highp vec4 v_20;
  v_20.x = _World2Object[0].x;
  v_20.y = _World2Object[1].x;
  v_20.z = _World2Object[2].x;
  v_20.w = _World2Object[3].x;
  highp vec4 v_21;
  v_21.x = _World2Object[0].y;
  v_21.y = _World2Object[1].y;
  v_21.z = _World2Object[2].y;
  v_21.w = _World2Object[3].y;
  highp vec4 v_22;
  v_22.x = _World2Object[0].z;
  v_22.y = _World2Object[1].z;
  v_22.z = _World2Object[2].z;
  v_22.w = _World2Object[3].z;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(((
    (v_20.xyz * _glesNormal.x)
   + 
    (v_21.xyz * _glesNormal.y)
  ) + (v_22.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_23;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * vertex_3).xyz;
  xlv_COLOR0 = tmpvar_19;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
  lightDir_7 = tmpvar_8;
  tmpvar_6 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_9;
  tmpvar_9 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_10;
  x_10 = (tmpvar_9.w - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = xlv_TEXCOORD2;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_LightMatrix0 * tmpvar_11);
  lightCoord_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  mediump vec2 P_14;
  P_14 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_13 = texture2D (_LightTexture0, P_14);
  highp vec3 LightCoord_15;
  LightCoord_15 = lightCoord_5.xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (LightCoord_15, LightCoord_15);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_LightTextureB0, vec2(tmpvar_16));
  mediump float tmpvar_18;
  tmpvar_18 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_13.w) * tmpvar_17.w);
  atten_4 = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_9.xyz * tmpvar_1) * diff_21);
  c_20.w = (tmpvar_9.w * xlv_COLOR0.w);
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
lowp vec3 t10_4;
highp vec3 t5;
highp float t16;
void main()
{
    //Instruction 3795
    //MUL
    t0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
    //Instruction 3796
    //MUL
    t1 = t0.yyyy * vec4(0.006000, 0.020000, 0.020000, 0.050000);
    //Instruction 3797
    //MAD
    t0 = t0.xxxx * vec4(0.012000, 0.020000, 0.060000, 0.024000) + t1;
    //Instruction 3798
    //MAD
    t0 = _WaveAndDistance.xxxx * vec4(1.200000, 2.000000, 1.600000, 4.800000) + t0;
    //Instruction 3799
    //FRC
    t0 = fract(t0);
    //Instruction 3800
    //MAD
    t0 = t0 * vec4(6.408849, 6.408849, 6.408849, 6.408849) + vec4(-3.141593, -3.141593, -3.141593, -3.141593);
    //Instruction 3801
    //MUL
    t1 = t0 * t0;
    //Instruction 3802
    //MUL
    t2 = t0 * t1;
    //Instruction 3803
    //MAD
    t0 = t2 * vec4(-0.161616, -0.161616, -0.161616, -0.161616) + t0;
    //Instruction 3804
    //MUL
    t2 = t1 * t2;
    //Instruction 3805
    //MUL
    t1 = t1 * t2;
    //Instruction 3806
    //MAD
    t0 = t2 * vec4(0.008333, 0.008333, 0.008333, 0.008333) + t0;
    //Instruction 3807
    //MAD
    t0 = t1 * vec4(-0.000198, -0.000198, -0.000198, -0.000198) + t0;
    //Instruction 3808
    //MUL
    t0 = t0 * t0;
    //Instruction 3809
    //MUL
    t0 = t0 * t0;
    //Instruction 3810
    //MUL
    t1.x = in_COLOR0.w * _WaveAndDistance.z;
    //Instruction 3811
    //MUL
    t1 = t0 * t1.xxxx;
    //Instruction 3812
    //DP4
    t0.x = dot(t0, vec4(0.674200, 0.674200, 0.269680, 0.134840));
    //Instruction 3813
    //MUL
    t0.x = t0.x * 0.700000;
    //Instruction 3814
    //DP4
    t2.x = dot(t1, vec4(0.024000, 0.040000, -0.120000, 0.096000));
    //Instruction 3815
    //DP4
    t2.z = dot(t1, vec4(0.006000, 0.020000, -0.020000, 0.100000));
    //Instruction 3816
    //MAD
    t1.xz = (-t2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    //Instruction 3817
    //MUL
    t2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3818
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 3819
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 3820
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 3821
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3822
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3823
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3824
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3825
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3826
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3827
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3828
    //ADD
    t5.xyz = t2.xyz + t3.xyz;
    //Instruction 3829
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3830
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3831
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3832
    //ADD
    t5.xyz = t5.xyz + t2.xyz;
    //Instruction 3833
    //DP3
    t16 = dot(t5.xyz, t5.xyz);
    //Instruction 3834
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 3835
    //MUL
    t5.xyz = t5.xyz * vec3(t16);
    //Instruction 3836
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 3837
    //MUL
    t5.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3838
    //MAD
    t5.xyz = _Object2World[0].xyz * t1.xxx + t5.xyz;
    //Instruction 3839
    //MAD
    t5.xyz = _Object2World[2].xyz * t1.zzz + t5.xyz;
    //Instruction 3840
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t5.xyz;
    //Instruction 3841
    //ADD
    t10_4.xyz = _WavingTint.xyz + vec3(-0.500000, -0.500000, -0.500000);
    //Instruction 3842
    //MAD
    t10_4.xyz = t0.xxx * t10_4.xyz + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 3843
    //MUL
    t10_4.xyz = t10_4.xyz * in_COLOR0.xyz;
    //Instruction 3844
    //MUL
    vs_COLOR0.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 3845
    //MOV
    t1.y = in_POSITION0.y;
    //Instruction 3846
    //ADD
    t0.xyz = t1.xyz + (-_CameraPosition.xyz);
    //Instruction 3847
    //DP3
    t0.x = dot(t0.xyz, t0.xyz);
    //Instruction 3848
    //ADD
    t0.x = (-t0.x) + _WaveAndDistance.w;
    //Instruction 3849
    //DP2
    t0.x = dot(_CameraPosition.ww, t0.xx);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3850
    //MOV
    vs_COLOR0.w = t0.x;
    //Instruction 3851
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in lowp vec4 vs_COLOR0;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
lowp float t10_1;
mediump vec3 t16_2;
bool tb3;
lowp float t10_4;
mediump float t16_8;
lowp float t10_8;
highp float t15;
lowp float t10_15;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 3765
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 3766
    //MAD
    t10_1 = t10_0.w * vs_COLOR0.w + (-_Cutoff);
    //Instruction 3767
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 3768
    //LT
    tb15 = t10_1<0.0;
    //Instruction 3769
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 3770
    //MUL
    t16_1 = vs_TEXCOORD2.yyyy * _LightMatrix0[1];
    //Instruction 3771
    //MAD
    t16_1 = _LightMatrix0[0] * vs_TEXCOORD2.xxxx + t16_1;
    //Instruction 3772
    //MAD
    t16_1 = _LightMatrix0[2] * vs_TEXCOORD2.zzzz + t16_1;
    //Instruction 3773
    //ADD
    t16_1 = t16_1 + _LightMatrix0[3];
    //Instruction 3774
    //DIV
    t16_2.xy = t16_1.xy / t16_1.ww;
    //Instruction 3775
    //ADD
    t16_2.xy = t16_2.xy + vec2(0.500000, 0.500000);
    //Instruction 3776
    //SAMPLE
    t10_15 = texture(_LightTexture0, t16_2.xy).w;
    //Instruction 3777
    //LT
    tb3 = 0.0<t16_1.z;
    //Instruction 3778
    //DP3
    t16_8 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 3779
    //SAMPLE
    t10_8 = texture(_LightTextureB0, vec2(t16_8)).w;
    //Instruction 3780
    //MOVC
    t10_4 = (tb3) ? 1.0 : 0.0;
    //Instruction 3781
    //MUL
    t10_4 = t10_15 * t10_4;
    //Instruction 3782
    //MUL
    t10_4 = t10_8 * t10_4;
    //Instruction 3783
    //MUL
    t16_2.xyz = vec3(t10_4) * _LightColor0.xyz;
    //Instruction 3784
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 3785
    //ADD
    t0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 3786
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 3787
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3788
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 3789
    //DP3
    t16_17 = dot(vs_TEXCOORD1.xyz, t0.xyz);
    //Instruction 3790
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 3791
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 3792
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 3793
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3794
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 s_7;
  highp vec4 waves_8;
  waves_8 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_8 = (waves_8 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_8 = (waves_8 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_9;
  tmpvar_9 = fract(waves_8);
  waves_8 = tmpvar_9;
  highp vec4 val_10;
  highp vec4 s_11;
  val_10 = ((tmpvar_9 * 6.408849) - 3.141593);
  highp vec4 tmpvar_12;
  tmpvar_12 = (val_10 * val_10);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * val_10);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_12);
  s_11 = (((val_10 + 
    (tmpvar_13 * -0.1616162)
  ) + (tmpvar_14 * 0.0083333)) + ((tmpvar_14 * tmpvar_12) * -0.00019841));
  s_7 = (s_11 * s_11);
  s_7 = (s_7 * s_7);
  highp float tmpvar_15;
  tmpvar_15 = (dot (s_7, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_7 = (s_7 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (s_7, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (s_7, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_15));
  waveColor_5 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_19.w = color_4.w;
  highp vec4 v_20;
  v_20.x = _World2Object[0].x;
  v_20.y = _World2Object[1].x;
  v_20.z = _World2Object[2].x;
  v_20.w = _World2Object[3].x;
  highp vec4 v_21;
  v_21.x = _World2Object[0].y;
  v_21.y = _World2Object[1].y;
  v_21.z = _World2Object[2].y;
  v_21.w = _World2Object[3].y;
  highp vec4 v_22;
  v_22.x = _World2Object[0].z;
  v_22.y = _World2Object[1].z;
  v_22.z = _World2Object[2].z;
  v_22.w = _World2Object[3].z;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(((
    (v_20.xyz * _glesNormal.x)
   + 
    (v_21.xyz * _glesNormal.y)
  ) + (v_22.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_23;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * vertex_3).xyz;
  xlv_COLOR0 = tmpvar_19;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_8;
  x_8 = (tmpvar_7.w - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = xlv_TEXCOORD2;
  highp vec3 tmpvar_10;
  tmpvar_10 = (_LightMatrix0 * tmpvar_9).xyz;
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_10, tmpvar_10);
  lowp float tmpvar_12;
  tmpvar_12 = (texture2D (_LightTextureB0, vec2(tmpvar_11)).w * textureCube (_LightTexture0, tmpvar_10).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_12);
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_15);
  c_14.w = (tmpvar_7.w * xlv_COLOR0.w);
  c_13.w = c_14.w;
  c_13.xyz = c_14.xyz;
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
lowp vec3 t10_4;
highp vec3 t5;
highp float t16;
void main()
{
    //Instruction 3877
    //MUL
    t0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
    //Instruction 3878
    //MUL
    t1 = t0.yyyy * vec4(0.006000, 0.020000, 0.020000, 0.050000);
    //Instruction 3879
    //MAD
    t0 = t0.xxxx * vec4(0.012000, 0.020000, 0.060000, 0.024000) + t1;
    //Instruction 3880
    //MAD
    t0 = _WaveAndDistance.xxxx * vec4(1.200000, 2.000000, 1.600000, 4.800000) + t0;
    //Instruction 3881
    //FRC
    t0 = fract(t0);
    //Instruction 3882
    //MAD
    t0 = t0 * vec4(6.408849, 6.408849, 6.408849, 6.408849) + vec4(-3.141593, -3.141593, -3.141593, -3.141593);
    //Instruction 3883
    //MUL
    t1 = t0 * t0;
    //Instruction 3884
    //MUL
    t2 = t0 * t1;
    //Instruction 3885
    //MAD
    t0 = t2 * vec4(-0.161616, -0.161616, -0.161616, -0.161616) + t0;
    //Instruction 3886
    //MUL
    t2 = t1 * t2;
    //Instruction 3887
    //MUL
    t1 = t1 * t2;
    //Instruction 3888
    //MAD
    t0 = t2 * vec4(0.008333, 0.008333, 0.008333, 0.008333) + t0;
    //Instruction 3889
    //MAD
    t0 = t1 * vec4(-0.000198, -0.000198, -0.000198, -0.000198) + t0;
    //Instruction 3890
    //MUL
    t0 = t0 * t0;
    //Instruction 3891
    //MUL
    t0 = t0 * t0;
    //Instruction 3892
    //MUL
    t1.x = in_COLOR0.w * _WaveAndDistance.z;
    //Instruction 3893
    //MUL
    t1 = t0 * t1.xxxx;
    //Instruction 3894
    //DP4
    t0.x = dot(t0, vec4(0.674200, 0.674200, 0.269680, 0.134840));
    //Instruction 3895
    //MUL
    t0.x = t0.x * 0.700000;
    //Instruction 3896
    //DP4
    t2.x = dot(t1, vec4(0.024000, 0.040000, -0.120000, 0.096000));
    //Instruction 3897
    //DP4
    t2.z = dot(t1, vec4(0.006000, 0.020000, -0.020000, 0.100000));
    //Instruction 3898
    //MAD
    t1.xz = (-t2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    //Instruction 3899
    //MUL
    t2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3900
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 3901
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 3902
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 3903
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3904
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3905
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3906
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3907
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3908
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3909
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3910
    //ADD
    t5.xyz = t2.xyz + t3.xyz;
    //Instruction 3911
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3912
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3913
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3914
    //ADD
    t5.xyz = t5.xyz + t2.xyz;
    //Instruction 3915
    //DP3
    t16 = dot(t5.xyz, t5.xyz);
    //Instruction 3916
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 3917
    //MUL
    t5.xyz = t5.xyz * vec3(t16);
    //Instruction 3918
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 3919
    //MUL
    t5.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3920
    //MAD
    t5.xyz = _Object2World[0].xyz * t1.xxx + t5.xyz;
    //Instruction 3921
    //MAD
    t5.xyz = _Object2World[2].xyz * t1.zzz + t5.xyz;
    //Instruction 3922
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t5.xyz;
    //Instruction 3923
    //ADD
    t10_4.xyz = _WavingTint.xyz + vec3(-0.500000, -0.500000, -0.500000);
    //Instruction 3924
    //MAD
    t10_4.xyz = t0.xxx * t10_4.xyz + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 3925
    //MUL
    t10_4.xyz = t10_4.xyz * in_COLOR0.xyz;
    //Instruction 3926
    //MUL
    vs_COLOR0.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 3927
    //MOV
    t1.y = in_POSITION0.y;
    //Instruction 3928
    //ADD
    t0.xyz = t1.xyz + (-_CameraPosition.xyz);
    //Instruction 3929
    //DP3
    t0.x = dot(t0.xyz, t0.xyz);
    //Instruction 3930
    //ADD
    t0.x = (-t0.x) + _WaveAndDistance.w;
    //Instruction 3931
    //DP2
    t0.x = dot(_CameraPosition.ww, t0.xx);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 3932
    //MOV
    vs_COLOR0.w = t0.x;
    //Instruction 3933
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in lowp vec4 vs_COLOR0;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec3 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
lowp float t10_3;
highp float t12;
mediump float t16_12;
lowp float t10_12;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 3852
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 3853
    //MAD
    t10_1 = t10_0.w * vs_COLOR0.w + (-_Cutoff);
    //Instruction 3854
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 3855
    //LT
    tb12 = t10_1<0.0;
    //Instruction 3856
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 3857
    //MUL
    t16_2.xyz = vs_TEXCOORD2.yyy * _LightMatrix0[1].xyz;
    //Instruction 3858
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD2.xxx + t16_2.xyz;
    //Instruction 3859
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD2.zzz + t16_2.xyz;
    //Instruction 3860
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 3861
    //DP3
    t16_12 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 3862
    //SAMPLE
    t10_3 = texture(_LightTexture0, t16_2.xyz).w;
    //Instruction 3863
    //SAMPLE
    t10_12 = texture(_LightTextureB0, vec2(t16_12)).w;
    //Instruction 3864
    //MUL
    t16_12 = t10_3 * t10_12;
    //Instruction 3865
    //MUL
    t16_2.xyz = vec3(t16_12) * _LightColor0.xyz;
    //Instruction 3866
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 3867
    //ADD
    t0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 3868
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 3869
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 3870
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 3871
    //DP3
    t16_14 = dot(vs_TEXCOORD1.xyz, t0.xyz);
    //Instruction 3872
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 3873
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 3874
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 3875
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3876
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 s_7;
  highp vec4 waves_8;
  waves_8 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_8 = (waves_8 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_8 = (waves_8 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_9;
  tmpvar_9 = fract(waves_8);
  waves_8 = tmpvar_9;
  highp vec4 val_10;
  highp vec4 s_11;
  val_10 = ((tmpvar_9 * 6.408849) - 3.141593);
  highp vec4 tmpvar_12;
  tmpvar_12 = (val_10 * val_10);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * val_10);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_12);
  s_11 = (((val_10 + 
    (tmpvar_13 * -0.1616162)
  ) + (tmpvar_14 * 0.0083333)) + ((tmpvar_14 * tmpvar_12) * -0.00019841));
  s_7 = (s_11 * s_11);
  s_7 = (s_7 * s_7);
  highp float tmpvar_15;
  tmpvar_15 = (dot (s_7, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_7 = (s_7 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (s_7, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (s_7, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_15));
  waveColor_5 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_19.w = color_4.w;
  highp vec4 v_20;
  v_20.x = _World2Object[0].x;
  v_20.y = _World2Object[1].x;
  v_20.z = _World2Object[2].x;
  v_20.w = _World2Object[3].x;
  highp vec4 v_21;
  v_21.x = _World2Object[0].y;
  v_21.y = _World2Object[1].y;
  v_21.z = _World2Object[2].y;
  v_21.w = _World2Object[3].y;
  highp vec4 v_22;
  v_22.x = _World2Object[0].z;
  v_22.y = _World2Object[1].z;
  v_22.z = _World2Object[2].z;
  v_22.w = _World2Object[3].z;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(((
    (v_20.xyz * _glesNormal.x)
   + 
    (v_21.xyz * _glesNormal.y)
  ) + (v_22.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_23;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * vertex_3).xyz;
  xlv_COLOR0 = tmpvar_19;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_8;
  x_8 = (tmpvar_7.w - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = xlv_TEXCOORD2;
  highp vec2 tmpvar_10;
  tmpvar_10 = (_LightMatrix0 * tmpvar_9).xy;
  lowp float tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, tmpvar_10).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_11);
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_14);
  c_13.w = (tmpvar_7.w * xlv_COLOR0.w);
  c_12.w = c_13.w;
  c_12.xyz = c_13.xyz;
  c_3.xyz = c_12.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
lowp vec3 t10_4;
highp vec3 t5;
highp float t16;
void main()
{
    //Instruction 3952
    //MUL
    t0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
    //Instruction 3953
    //MUL
    t1 = t0.yyyy * vec4(0.006000, 0.020000, 0.020000, 0.050000);
    //Instruction 3954
    //MAD
    t0 = t0.xxxx * vec4(0.012000, 0.020000, 0.060000, 0.024000) + t1;
    //Instruction 3955
    //MAD
    t0 = _WaveAndDistance.xxxx * vec4(1.200000, 2.000000, 1.600000, 4.800000) + t0;
    //Instruction 3956
    //FRC
    t0 = fract(t0);
    //Instruction 3957
    //MAD
    t0 = t0 * vec4(6.408849, 6.408849, 6.408849, 6.408849) + vec4(-3.141593, -3.141593, -3.141593, -3.141593);
    //Instruction 3958
    //MUL
    t1 = t0 * t0;
    //Instruction 3959
    //MUL
    t2 = t0 * t1;
    //Instruction 3960
    //MAD
    t0 = t2 * vec4(-0.161616, -0.161616, -0.161616, -0.161616) + t0;
    //Instruction 3961
    //MUL
    t2 = t1 * t2;
    //Instruction 3962
    //MUL
    t1 = t1 * t2;
    //Instruction 3963
    //MAD
    t0 = t2 * vec4(0.008333, 0.008333, 0.008333, 0.008333) + t0;
    //Instruction 3964
    //MAD
    t0 = t1 * vec4(-0.000198, -0.000198, -0.000198, -0.000198) + t0;
    //Instruction 3965
    //MUL
    t0 = t0 * t0;
    //Instruction 3966
    //MUL
    t0 = t0 * t0;
    //Instruction 3967
    //MUL
    t1.x = in_COLOR0.w * _WaveAndDistance.z;
    //Instruction 3968
    //MUL
    t1 = t0 * t1.xxxx;
    //Instruction 3969
    //DP4
    t0.x = dot(t0, vec4(0.674200, 0.674200, 0.269680, 0.134840));
    //Instruction 3970
    //MUL
    t0.x = t0.x * 0.700000;
    //Instruction 3971
    //DP4
    t2.x = dot(t1, vec4(0.024000, 0.040000, -0.120000, 0.096000));
    //Instruction 3972
    //DP4
    t2.z = dot(t1, vec4(0.006000, 0.020000, -0.020000, 0.100000));
    //Instruction 3973
    //MAD
    t1.xz = (-t2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    //Instruction 3974
    //MUL
    t2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3975
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 3976
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 3977
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 3978
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3979
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3980
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3981
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3982
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3983
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3984
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3985
    //ADD
    t5.xyz = t2.xyz + t3.xyz;
    //Instruction 3986
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3987
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3988
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3989
    //ADD
    t5.xyz = t5.xyz + t2.xyz;
    //Instruction 3990
    //DP3
    t16 = dot(t5.xyz, t5.xyz);
    //Instruction 3991
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 3992
    //MUL
    t5.xyz = t5.xyz * vec3(t16);
    //Instruction 3993
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 3994
    //MUL
    t5.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3995
    //MAD
    t5.xyz = _Object2World[0].xyz * t1.xxx + t5.xyz;
    //Instruction 3996
    //MAD
    t5.xyz = _Object2World[2].xyz * t1.zzz + t5.xyz;
    //Instruction 3997
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t5.xyz;
    //Instruction 3998
    //ADD
    t10_4.xyz = _WavingTint.xyz + vec3(-0.500000, -0.500000, -0.500000);
    //Instruction 3999
    //MAD
    t10_4.xyz = t0.xxx * t10_4.xyz + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 4000
    //MUL
    t10_4.xyz = t10_4.xyz * in_COLOR0.xyz;
    //Instruction 4001
    //MUL
    vs_COLOR0.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 4002
    //MOV
    t1.y = in_POSITION0.y;
    //Instruction 4003
    //ADD
    t0.xyz = t1.xyz + (-_CameraPosition.xyz);
    //Instruction 4004
    //DP3
    t0.x = dot(t0.xyz, t0.xyz);
    //Instruction 4005
    //ADD
    t0.x = (-t0.x) + _WaveAndDistance.w;
    //Instruction 4006
    //DP2
    t0.x = dot(_CameraPosition.ww, t0.xx);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 4007
    //MOV
    vs_COLOR0.w = t0.x;
    //Instruction 4008
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in lowp vec4 vs_COLOR0;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
lowp float t10_9;
bool tb9;
mediump float t16_11;
void main()
{
    //Instruction 3934
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 3935
    //MAD
    t10_1 = t10_0.w * vs_COLOR0.w + (-_Cutoff);
    //Instruction 3936
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 3937
    //LT
    tb9 = t10_1<0.0;
    //Instruction 3938
    //DISCARD
    if((int(tb9))!=0){discard;}
    //Instruction 3939
    //MUL
    t16_2.xy = vs_TEXCOORD2.yy * _LightMatrix0[1].xy;
    //Instruction 3940
    //MAD
    t16_2.xy = _LightMatrix0[0].xy * vs_TEXCOORD2.xx + t16_2.xy;
    //Instruction 3941
    //MAD
    t16_2.xy = _LightMatrix0[2].xy * vs_TEXCOORD2.zz + t16_2.xy;
    //Instruction 3942
    //ADD
    t16_2.xy = t16_2.xy + _LightMatrix0[3].xy;
    //Instruction 3943
    //SAMPLE
    t10_9 = texture(_LightTexture0, t16_2.xy).w;
    //Instruction 3944
    //MUL
    t16_2.xyz = vec3(t10_9) * _LightColor0.xyz;
    //Instruction 3945
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 3946
    //DP3
    t16_11 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 3947
    //MAX
    t16_11 = max(t16_11, 0.0);
    //Instruction 3948
    //MUL
    t16_2.xyz = vec3(t16_11) * t16_2.xyz;
    //Instruction 3949
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 3950
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3951
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "QUEUE"="Geometry+200" "IGNOREPROJECTOR"="true" "DisableBatching"="true" "RenderType"="Grass" }
  Cull Off
  GpuProgramID 131863
Program "vp" {
SubProgram "gles " {
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 vertex_3;
  vertex_3.yw = _glesVertex.yw;
  lowp vec4 color_4;
  color_4.xyz = _glesColor.xyz;
  lowp vec3 waveColor_5;
  highp vec3 waveMove_6;
  highp vec4 s_7;
  highp vec4 waves_8;
  waves_8 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_8 = (waves_8 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_8 = (waves_8 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_9;
  tmpvar_9 = fract(waves_8);
  waves_8 = tmpvar_9;
  highp vec4 val_10;
  highp vec4 s_11;
  val_10 = ((tmpvar_9 * 6.408849) - 3.141593);
  highp vec4 tmpvar_12;
  tmpvar_12 = (val_10 * val_10);
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 * val_10);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_12);
  s_11 = (((val_10 + 
    (tmpvar_13 * -0.1616162)
  ) + (tmpvar_14 * 0.0083333)) + ((tmpvar_14 * tmpvar_12) * -0.00019841));
  s_7 = (s_11 * s_11);
  s_7 = (s_7 * s_7);
  highp float tmpvar_15;
  tmpvar_15 = (dot (s_7, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_7 = (s_7 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_6.y = 0.0;
  waveMove_6.x = dot (s_7, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_6.z = dot (s_7, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_3.xz = (_glesVertex.xz - (waveMove_6.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_15));
  waveColor_5 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (vertex_3.xyz - _CameraPosition.xyz);
  highp float tmpvar_18;
  tmpvar_18 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_17, tmpvar_17))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_4.w = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.xyz = ((2.0 * waveColor_5) * _glesColor.xyz);
  tmpvar_19.w = color_4.w;
  highp vec4 v_20;
  v_20.x = _World2Object[0].x;
  v_20.y = _World2Object[1].x;
  v_20.z = _World2Object[2].x;
  v_20.w = _World2Object[3].x;
  highp vec4 v_21;
  v_21.x = _World2Object[0].y;
  v_21.y = _World2Object[1].y;
  v_21.z = _World2Object[2].y;
  v_21.w = _World2Object[3].y;
  highp vec4 v_22;
  v_22.x = _World2Object[0].z;
  v_22.y = _World2Object[1].z;
  v_22.z = _World2Object[2].z;
  v_22.w = _World2Object[3].z;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(((
    (v_20.xyz * _glesNormal.x)
   + 
    (v_21.xyz * _glesNormal.y)
  ) + (v_22.xyz * _glesNormal.z)));
  worldNormal_1 = tmpvar_23;
  tmpvar_2 = worldNormal_1;
  gl_Position = (glstate_matrix_mvp * vertex_3);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (_Object2World * vertex_3).xyz;
  xlv_COLOR0 = tmpvar_19;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD1;
  lowp float x_3;
  x_3 = ((texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0).w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out lowp vec4 vs_COLOR0;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
lowp vec3 t10_4;
highp vec3 t5;
highp float t16;
void main()
{
    //Instruction 5155
    //MUL
    t0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
    //Instruction 5156
    //MUL
    t1 = t0.yyyy * vec4(0.006000, 0.020000, 0.020000, 0.050000);
    //Instruction 5157
    //MAD
    t0 = t0.xxxx * vec4(0.012000, 0.020000, 0.060000, 0.024000) + t1;
    //Instruction 5158
    //MAD
    t0 = _WaveAndDistance.xxxx * vec4(1.200000, 2.000000, 1.600000, 4.800000) + t0;
    //Instruction 5159
    //FRC
    t0 = fract(t0);
    //Instruction 5160
    //MAD
    t0 = t0 * vec4(6.408849, 6.408849, 6.408849, 6.408849) + vec4(-3.141593, -3.141593, -3.141593, -3.141593);
    //Instruction 5161
    //MUL
    t1 = t0 * t0;
    //Instruction 5162
    //MUL
    t2 = t0 * t1;
    //Instruction 5163
    //MAD
    t0 = t2 * vec4(-0.161616, -0.161616, -0.161616, -0.161616) + t0;
    //Instruction 5164
    //MUL
    t2 = t1 * t2;
    //Instruction 5165
    //MUL
    t1 = t1 * t2;
    //Instruction 5166
    //MAD
    t0 = t2 * vec4(0.008333, 0.008333, 0.008333, 0.008333) + t0;
    //Instruction 5167
    //MAD
    t0 = t1 * vec4(-0.000198, -0.000198, -0.000198, -0.000198) + t0;
    //Instruction 5168
    //MUL
    t0 = t0 * t0;
    //Instruction 5169
    //MUL
    t0 = t0 * t0;
    //Instruction 5170
    //MUL
    t1.x = in_COLOR0.w * _WaveAndDistance.z;
    //Instruction 5171
    //MUL
    t1 = t0 * t1.xxxx;
    //Instruction 5172
    //DP4
    t0.x = dot(t0, vec4(0.674200, 0.674200, 0.269680, 0.134840));
    //Instruction 5173
    //MUL
    t0.x = t0.x * 0.700000;
    //Instruction 5174
    //DP4
    t2.x = dot(t1, vec4(0.024000, 0.040000, -0.120000, 0.096000));
    //Instruction 5175
    //DP4
    t2.z = dot(t1, vec4(0.006000, 0.020000, -0.020000, 0.100000));
    //Instruction 5176
    //MAD
    t1.xz = (-t2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    //Instruction 5177
    //MUL
    t2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5178
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 5179
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 5180
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 5181
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5182
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5183
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5184
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5185
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5186
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5187
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5188
    //ADD
    t5.xyz = t2.xyz + t3.xyz;
    //Instruction 5189
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5190
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5191
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5192
    //ADD
    t5.xyz = t5.xyz + t2.xyz;
    //Instruction 5193
    //DP3
    t16 = dot(t5.xyz, t5.xyz);
    //Instruction 5194
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 5195
    //MUL
    t5.xyz = t5.xyz * vec3(t16);
    //Instruction 5196
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 5197
    //MUL
    t5.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5198
    //MAD
    t5.xyz = _Object2World[0].xyz * t1.xxx + t5.xyz;
    //Instruction 5199
    //MAD
    t5.xyz = _Object2World[2].xyz * t1.zzz + t5.xyz;
    //Instruction 5200
    //MAD
    vs_TEXCOORD2.xyz = _Object2World[3].xyz * in_POSITION0.www + t5.xyz;
    //Instruction 5201
    //ADD
    t10_4.xyz = _WavingTint.xyz + vec3(-0.500000, -0.500000, -0.500000);
    //Instruction 5202
    //MAD
    t10_4.xyz = t0.xxx * t10_4.xyz + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 5203
    //MUL
    t10_4.xyz = t10_4.xyz * in_COLOR0.xyz;
    //Instruction 5204
    //MUL
    vs_COLOR0.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 5205
    //MOV
    t1.y = in_POSITION0.y;
    //Instruction 5206
    //ADD
    t0.xyz = t1.xyz + (-_CameraPosition.xyz);
    //Instruction 5207
    //DP3
    t0.x = dot(t0.xyz, t0.xyz);
    //Instruction 5208
    //ADD
    t0.x = (-t0.x) + _WaveAndDistance.w;
    //Instruction 5209
    //DP2
    t0.x = dot(_CameraPosition.ww, t0.xx);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 5210
    //MOV
    vs_COLOR0.w = t0.x;
    //Instruction 5211
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in lowp vec4 vs_COLOR0;
layout(location = 0) out lowp vec4 SV_Target0;
lowp float t10_0;
bool tb0;
lowp float t10_1;
void main()
{
    //Instruction 5148
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    //Instruction 5149
    //MAD
    t10_1 = t10_0 * vs_COLOR0.w + (-_Cutoff);
    //Instruction 5150
    //LT
    tb0 = t10_1<0.0;
    //Instruction 5151
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 5152
    //MAD
    SV_Target0.xyz = vs_TEXCOORD1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 5153
    //MOV
    SV_Target0.w = 0.0;
    //Instruction 5154
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "QUEUE"="Geometry+200" "IGNOREPROJECTOR"="true" "DisableBatching"="true" "RenderType"="Grass" }
  ZWrite Off
  Cull Off
  GpuProgramID 204752
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 s_8;
  highp vec4 waves_9;
  waves_9 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_9 = (waves_9 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_9 = (waves_9 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_10;
  tmpvar_10 = fract(waves_9);
  waves_9 = tmpvar_10;
  highp vec4 val_11;
  highp vec4 s_12;
  val_11 = ((tmpvar_10 * 6.408849) - 3.141593);
  highp vec4 tmpvar_13;
  tmpvar_13 = (val_11 * val_11);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * val_11);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * tmpvar_13);
  s_12 = (((val_11 + 
    (tmpvar_14 * -0.1616162)
  ) + (tmpvar_15 * 0.0083333)) + ((tmpvar_15 * tmpvar_13) * -0.00019841));
  s_8 = (s_12 * s_12);
  s_8 = (s_8 * s_8);
  highp float tmpvar_16;
  tmpvar_16 = (dot (s_8, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_8 = (s_8 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (s_8, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (s_8, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_16));
  waveColor_6 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_19;
  tmpvar_19 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_18, tmpvar_18))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_20.w = color_5.w;
  tmpvar_1 = (glstate_matrix_mvp * vertex_4);
  highp vec4 o_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = (tmpvar_22.y * _ProjectionParams.x);
  o_21.xy = (tmpvar_23 + tmpvar_22.w);
  o_21.zw = tmpvar_1.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = vec2(0.0, 0.0);
  highp vec4 v_24;
  v_24.x = _World2Object[0].x;
  v_24.y = _World2Object[1].x;
  v_24.z = _World2Object[2].x;
  v_24.w = _World2Object[3].x;
  highp vec4 v_25;
  v_25.x = _World2Object[0].y;
  v_25.y = _World2Object[1].y;
  v_25.z = _World2Object[2].y;
  v_25.w = _World2Object[3].y;
  highp vec4 v_26;
  v_26.x = _World2Object[0].z;
  v_26.y = _World2Object[1].z;
  v_26.z = _World2Object[2].z;
  v_26.w = _World2Object[3].z;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalize(((
    (v_24.xyz * _glesNormal.x)
   + 
    (v_25.xyz * _glesNormal.y)
  ) + (v_26.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_28;
  mediump vec4 normal_29;
  normal_29 = tmpvar_27;
  mediump vec3 x2_30;
  mediump vec3 x1_31;
  x1_31.x = dot (unity_SHAr, normal_29);
  x1_31.y = dot (unity_SHAg, normal_29);
  x1_31.z = dot (unity_SHAb, normal_29);
  mediump vec4 tmpvar_32;
  tmpvar_32 = (normal_29.xyzz * normal_29.yzzx);
  x2_30.x = dot (unity_SHBr, tmpvar_32);
  x2_30.y = dot (unity_SHBg, tmpvar_32);
  x2_30.z = dot (unity_SHBb, tmpvar_32);
  tmpvar_28 = ((x2_30 + (unity_SHC.xyz * 
    ((normal_29.x * normal_29.x) - (normal_29.y * normal_29.y))
  )) + x1_31);
  tmpvar_3 = tmpvar_28;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * vertex_4).xyz;
  xlv_COLOR0 = tmpvar_20;
  xlv_TEXCOORD2 = o_21;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_5;
  x_5 = (tmpvar_4.w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_6;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_7;
  c_7.xyz = (tmpvar_4.xyz * light_3.xyz);
  c_7.w = (tmpvar_4.w * xlv_COLOR0.w);
  c_2.xyz = c_7.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out lowp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp vec3 t6;
highp float t18;
void main()
{
    //Instruction 5226
    //MUL
    t0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
    //Instruction 5227
    //MUL
    t1 = t0.yyyy * vec4(0.006000, 0.020000, 0.020000, 0.050000);
    //Instruction 5228
    //MAD
    t0 = t0.xxxx * vec4(0.012000, 0.020000, 0.060000, 0.024000) + t1;
    //Instruction 5229
    //MAD
    t0 = _WaveAndDistance.xxxx * vec4(1.200000, 2.000000, 1.600000, 4.800000) + t0;
    //Instruction 5230
    //FRC
    t0 = fract(t0);
    //Instruction 5231
    //MAD
    t0 = t0 * vec4(6.408849, 6.408849, 6.408849, 6.408849) + vec4(-3.141593, -3.141593, -3.141593, -3.141593);
    //Instruction 5232
    //MUL
    t1 = t0 * t0;
    //Instruction 5233
    //MUL
    t2 = t0 * t1;
    //Instruction 5234
    //MAD
    t0 = t2 * vec4(-0.161616, -0.161616, -0.161616, -0.161616) + t0;
    //Instruction 5235
    //MUL
    t2 = t1 * t2;
    //Instruction 5236
    //MUL
    t1 = t1 * t2;
    //Instruction 5237
    //MAD
    t0 = t2 * vec4(0.008333, 0.008333, 0.008333, 0.008333) + t0;
    //Instruction 5238
    //MAD
    t0 = t1 * vec4(-0.000198, -0.000198, -0.000198, -0.000198) + t0;
    //Instruction 5239
    //MUL
    t0 = t0 * t0;
    //Instruction 5240
    //MUL
    t0 = t0 * t0;
    //Instruction 5241
    //MUL
    t1.x = in_COLOR0.w * _WaveAndDistance.z;
    //Instruction 5242
    //MUL
    t1 = t0 * t1.xxxx;
    //Instruction 5243
    //DP4
    t0.x = dot(t0, vec4(0.674200, 0.674200, 0.269680, 0.134840));
    //Instruction 5244
    //MUL
    t0.x = t0.x * 0.700000;
    //Instruction 5245
    //DP4
    t2.x = dot(t1, vec4(0.024000, 0.040000, -0.120000, 0.096000));
    //Instruction 5246
    //DP4
    t2.z = dot(t1, vec4(0.006000, 0.020000, -0.020000, 0.100000));
    //Instruction 5247
    //MAD
    t1.xz = (-t2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    //Instruction 5248
    //MUL
    t2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5249
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 5250
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 5251
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 5252
    //MOV
    gl_Position = t2;
    //Instruction 5253
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5254
    //MUL
    t6.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5255
    //MAD
    t6.xyz = _Object2World[0].xyz * t1.xxx + t6.xyz;
    //Instruction 5256
    //MAD
    t6.xyz = _Object2World[2].xyz * t1.zzz + t6.xyz;
    //Instruction 5257
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t6.xyz;
    //Instruction 5258
    //ADD
    t10_3.xyz = _WavingTint.xyz + vec3(-0.500000, -0.500000, -0.500000);
    //Instruction 5259
    //MAD
    t10_3.xyz = t0.xxx * t10_3.xyz + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 5260
    //MUL
    t10_3.xyz = t10_3.xyz * in_COLOR0.xyz;
    //Instruction 5261
    //MUL
    vs_COLOR0.xyz = t10_3.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 5262
    //MOV
    t1.y = in_POSITION0.y;
    //Instruction 5263
    //ADD
    t0.xyz = t1.xyz + (-_CameraPosition.xyz);
    //Instruction 5264
    //DP3
    t0.x = dot(t0.xyz, t0.xyz);
    //Instruction 5265
    //ADD
    t0.x = (-t0.x) + _WaveAndDistance.w;
    //Instruction 5266
    //DP2
    t0.x = dot(_CameraPosition.ww, t0.xx);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 5267
    //MOV
    vs_COLOR0.w = t0.x;
    //Instruction 5268
    //MUL
    t0.x = t2.y * _ProjectionParams.x;
    //Instruction 5269
    //MUL
    t0.w = t0.x * 0.500000;
    //Instruction 5270
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 5271
    //MOV
    vs_TEXCOORD2.zw = t2.zw;
    //Instruction 5272
    //ADD
    vs_TEXCOORD2.xy = t0.zz + t0.xw;
    //Instruction 5273
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5274
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5275
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5276
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5277
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5278
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5279
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5280
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 5281
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5282
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5283
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5284
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 5285
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 5286
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 5287
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 5288
    //MUL
    t16_4.x = t0.y * t0.y;
    //Instruction 5289
    //MAD
    t16_4.x = t0.x * t0.x + (-t16_4.x);
    //Instruction 5290
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 5291
    //DP4
    t16_5.x = dot(unity_SHBr, t16_1);
    //Instruction 5292
    //DP4
    t16_5.y = dot(unity_SHBg, t16_1);
    //Instruction 5293
    //DP4
    t16_5.z = dot(unity_SHBb, t16_1);
    //Instruction 5294
    //MAD
    t16_4.xyz = unity_SHC.xyz * t16_4.xxx + t16_5.xyz;
    //Instruction 5295
    //MOV
    t0.w = 1.0;
    //Instruction 5296
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 5297
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 5298
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 5299
    //ADD
    t16_4.xyz = t16_4.xyz + t16_5.xyz;
    //Instruction 5300
    //MOV
    vs_TEXCOORD4.xyz = t16_4.xyz;
    //Instruction 5301
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in lowp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
highp vec3 t2;
lowp vec3 t10_2;
mediump vec3 t16_3;
bool tb12;
void main()
{
    //Instruction 5212
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 5213
    //MAD
    t10_1 = t10_0.w * vs_COLOR0.w + (-_Cutoff);
    //Instruction 5214
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 5215
    //LT
    tb12 = t10_1<0.0;
    //Instruction 5216
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 5217
    //DIV
    t2.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    //Instruction 5218
    //SAMPLE
    t10_2.xyz = texture(_LightBuffer, t2.xy).xyz;
    //Instruction 5219
    //MAX
    t16_3.xyz = max(t10_2.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 5220
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 5221
    //ADD
    t2.xyz = (-t16_3.xyz) + vs_TEXCOORD4.xyz;
    //Instruction 5222
    //MUL
    t16_3.xyz = t16_0.xyz * t2.xyz;
    //Instruction 5223
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 5224
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5225
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_DynamicLightmapST;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 s_8;
  highp vec4 waves_9;
  waves_9 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_9 = (waves_9 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_9 = (waves_9 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_10;
  tmpvar_10 = fract(waves_9);
  waves_9 = tmpvar_10;
  highp vec4 val_11;
  highp vec4 s_12;
  val_11 = ((tmpvar_10 * 6.408849) - 3.141593);
  highp vec4 tmpvar_13;
  tmpvar_13 = (val_11 * val_11);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * val_11);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * tmpvar_13);
  s_12 = (((val_11 + 
    (tmpvar_14 * -0.1616162)
  ) + (tmpvar_15 * 0.0083333)) + ((tmpvar_15 * tmpvar_13) * -0.00019841));
  s_8 = (s_12 * s_12);
  s_8 = (s_8 * s_8);
  highp float tmpvar_16;
  tmpvar_16 = (dot (s_8, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_8 = (s_8 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (s_8, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (s_8, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_16));
  waveColor_6 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_19;
  tmpvar_19 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_18, tmpvar_18))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_20.w = color_5.w;
  tmpvar_1 = (glstate_matrix_mvp * vertex_4);
  highp vec4 o_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = (tmpvar_22.y * _ProjectionParams.x);
  o_21.xy = (tmpvar_23 + tmpvar_22.w);
  o_21.zw = tmpvar_1.zw;
  tmpvar_2.zw = ((_glesMultiTexCoord2.xy * unity_DynamicLightmapST.xy) + unity_DynamicLightmapST.zw);
  tmpvar_2.xy = vec2(0.0, 0.0);
  highp vec4 v_24;
  v_24.x = _World2Object[0].x;
  v_24.y = _World2Object[1].x;
  v_24.z = _World2Object[2].x;
  v_24.w = _World2Object[3].x;
  highp vec4 v_25;
  v_25.x = _World2Object[0].y;
  v_25.y = _World2Object[1].y;
  v_25.z = _World2Object[2].y;
  v_25.w = _World2Object[3].y;
  highp vec4 v_26;
  v_26.x = _World2Object[0].z;
  v_26.y = _World2Object[1].z;
  v_26.z = _World2Object[2].z;
  v_26.w = _World2Object[3].z;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalize(((
    (v_24.xyz * _glesNormal.x)
   + 
    (v_25.xyz * _glesNormal.y)
  ) + (v_26.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_28;
  mediump vec4 normal_29;
  normal_29 = tmpvar_27;
  mediump vec3 x2_30;
  mediump vec3 x1_31;
  x1_31.x = dot (unity_SHAr, normal_29);
  x1_31.y = dot (unity_SHAg, normal_29);
  x1_31.z = dot (unity_SHAb, normal_29);
  mediump vec4 tmpvar_32;
  tmpvar_32 = (normal_29.xyzz * normal_29.yzzx);
  x2_30.x = dot (unity_SHBr, tmpvar_32);
  x2_30.y = dot (unity_SHBg, tmpvar_32);
  x2_30.z = dot (unity_SHBb, tmpvar_32);
  tmpvar_28 = ((x2_30 + (unity_SHC.xyz * 
    ((normal_29.x * normal_29.x) - (normal_29.y * normal_29.y))
  )) + x1_31);
  tmpvar_3 = tmpvar_28;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * vertex_4).xyz;
  xlv_COLOR0 = tmpvar_20;
  xlv_TEXCOORD2 = o_21;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform sampler2D unity_DynamicLightmap;
uniform mediump vec4 unity_DynamicLightmap_HDR;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_5;
  x_5 = (tmpvar_4.w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_6;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (unity_DynamicLightmap, xlv_TEXCOORD3.zw);
  light_3.xyz = (light_3.xyz + pow ((
    (unity_DynamicLightmap_HDR.x * tmpvar_7.w)
   * tmpvar_7.xyz), unity_DynamicLightmap_HDR.yyy));
  lowp vec4 c_8;
  c_8.xyz = (tmpvar_4.xyz * light_3.xyz);
  c_8.w = (tmpvar_4.w * xlv_COLOR0.w);
  c_2.xyz = c_8.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in lowp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out lowp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp vec3 t6;
highp float t18;
void main()
{
    //Instruction 5323
    //MUL
    t0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
    //Instruction 5324
    //MUL
    t1 = t0.yyyy * vec4(0.006000, 0.020000, 0.020000, 0.050000);
    //Instruction 5325
    //MAD
    t0 = t0.xxxx * vec4(0.012000, 0.020000, 0.060000, 0.024000) + t1;
    //Instruction 5326
    //MAD
    t0 = _WaveAndDistance.xxxx * vec4(1.200000, 2.000000, 1.600000, 4.800000) + t0;
    //Instruction 5327
    //FRC
    t0 = fract(t0);
    //Instruction 5328
    //MAD
    t0 = t0 * vec4(6.408849, 6.408849, 6.408849, 6.408849) + vec4(-3.141593, -3.141593, -3.141593, -3.141593);
    //Instruction 5329
    //MUL
    t1 = t0 * t0;
    //Instruction 5330
    //MUL
    t2 = t0 * t1;
    //Instruction 5331
    //MAD
    t0 = t2 * vec4(-0.161616, -0.161616, -0.161616, -0.161616) + t0;
    //Instruction 5332
    //MUL
    t2 = t1 * t2;
    //Instruction 5333
    //MUL
    t1 = t1 * t2;
    //Instruction 5334
    //MAD
    t0 = t2 * vec4(0.008333, 0.008333, 0.008333, 0.008333) + t0;
    //Instruction 5335
    //MAD
    t0 = t1 * vec4(-0.000198, -0.000198, -0.000198, -0.000198) + t0;
    //Instruction 5336
    //MUL
    t0 = t0 * t0;
    //Instruction 5337
    //MUL
    t0 = t0 * t0;
    //Instruction 5338
    //MUL
    t1.x = in_COLOR0.w * _WaveAndDistance.z;
    //Instruction 5339
    //MUL
    t1 = t0 * t1.xxxx;
    //Instruction 5340
    //DP4
    t0.x = dot(t0, vec4(0.674200, 0.674200, 0.269680, 0.134840));
    //Instruction 5341
    //MUL
    t0.x = t0.x * 0.700000;
    //Instruction 5342
    //DP4
    t2.x = dot(t1, vec4(0.024000, 0.040000, -0.120000, 0.096000));
    //Instruction 5343
    //DP4
    t2.z = dot(t1, vec4(0.006000, 0.020000, -0.020000, 0.100000));
    //Instruction 5344
    //MAD
    t1.xz = (-t2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    //Instruction 5345
    //MUL
    t2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5346
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 5347
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 5348
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 5349
    //MOV
    gl_Position = t2;
    //Instruction 5350
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 5351
    //MUL
    t6.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 5352
    //MAD
    t6.xyz = _Object2World[0].xyz * t1.xxx + t6.xyz;
    //Instruction 5353
    //MAD
    t6.xyz = _Object2World[2].xyz * t1.zzz + t6.xyz;
    //Instruction 5354
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t6.xyz;
    //Instruction 5355
    //ADD
    t10_3.xyz = _WavingTint.xyz + vec3(-0.500000, -0.500000, -0.500000);
    //Instruction 5356
    //MAD
    t10_3.xyz = t0.xxx * t10_3.xyz + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 5357
    //MUL
    t10_3.xyz = t10_3.xyz * in_COLOR0.xyz;
    //Instruction 5358
    //MUL
    vs_COLOR0.xyz = t10_3.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 5359
    //MOV
    t1.y = in_POSITION0.y;
    //Instruction 5360
    //ADD
    t0.xyz = t1.xyz + (-_CameraPosition.xyz);
    //Instruction 5361
    //DP3
    t0.x = dot(t0.xyz, t0.xyz);
    //Instruction 5362
    //ADD
    t0.x = (-t0.x) + _WaveAndDistance.w;
    //Instruction 5363
    //DP2
    t0.x = dot(_CameraPosition.ww, t0.xx);
    t0.x = clamp(t0.x, 0.0, 1.0);
    //Instruction 5364
    //MOV
    vs_COLOR0.w = t0.x;
    //Instruction 5365
    //MUL
    t0.x = t2.y * _ProjectionParams.x;
    //Instruction 5366
    //MUL
    t0.w = t0.x * 0.500000;
    //Instruction 5367
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 5368
    //MOV
    vs_TEXCOORD2.zw = t2.zw;
    //Instruction 5369
    //ADD
    vs_TEXCOORD2.xy = t0.zz + t0.xw;
    //Instruction 5370
    //MAD
    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
    //Instruction 5371
    //MOV
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    //Instruction 5372
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 5373
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 5374
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 5375
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 5376
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 5377
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 5378
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 5379
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 5380
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 5381
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 5382
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 5383
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 5384
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 5385
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 5386
    //MUL
    t16_4.x = t0.y * t0.y;
    //Instruction 5387
    //MAD
    t16_4.x = t0.x * t0.x + (-t16_4.x);
    //Instruction 5388
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 5389
    //DP4
    t16_5.x = dot(unity_SHBr, t16_1);
    //Instruction 5390
    //DP4
    t16_5.y = dot(unity_SHBg, t16_1);
    //Instruction 5391
    //DP4
    t16_5.z = dot(unity_SHBb, t16_1);
    //Instruction 5392
    //MAD
    t16_4.xyz = unity_SHC.xyz * t16_4.xxx + t16_5.xyz;
    //Instruction 5393
    //MOV
    t0.w = 1.0;
    //Instruction 5394
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 5395
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 5396
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 5397
    //ADD
    t16_4.xyz = t16_4.xyz + t16_5.xyz;
    //Instruction 5398
    //MOV
    vs_TEXCOORD4.xyz = t16_4.xyz;
    //Instruction 5399
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _WavingTint;
uniform 	vec4 _WaveAndDistance;
uniform 	vec4 _CameraPosition;
uniform 	vec3 _CameraRight;
uniform 	vec3 _CameraUp;
uniform 	lowp vec4 _TreeInstanceColor;
uniform 	vec4 _TreeInstanceScale;
uniform 	mat4 _TerrainEngineBendTree;
uniform 	vec4 _SquashPlaneNormal;
uniform 	float _SquashAmount;
uniform 	vec3 _TreeBillboardCameraRight;
uniform 	vec4 _TreeBillboardCameraUp;
uniform 	vec4 _TreeBillboardCameraFront;
uniform 	vec4 _TreeBillboardCameraPos;
uniform 	vec4 _TreeBillboardDistances;
uniform 	vec4 _Wind;
uniform 	lowp float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
uniform lowp sampler2D unity_DynamicLightmap;
in highp vec2 vs_TEXCOORD0;
in lowp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
lowp vec4 t10_1;
mediump vec3 t16_2;
highp vec3 t3;
lowp vec3 t10_3;
mediump vec3 t16_4;
bool tb15;
void main()
{
    //Instruction 5302
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 5303
    //MAD
    t10_1.x = t10_0.w * vs_COLOR0.w + (-_Cutoff);
    //Instruction 5304
    //MUL
    t16_0.xyz = t10_0.xyz * vs_COLOR0.xyz;
    //Instruction 5305
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 5306
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 5307
    //SAMPLE
    t10_1 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
    //Instruction 5308
    //MUL
    t16_2.x = t10_1.w * unity_DynamicLightmap_HDR.x;
    //Instruction 5309
    //MUL
    t16_2.xyz = t10_1.xyz * t16_2.xxx;
    //Instruction 5310
    //LOG
    t16_2.xyz = log2(t16_2.xyz);
    //Instruction 5311
    //MUL
    t16_2.xyz = t16_2.xyz * unity_DynamicLightmap_HDR.yyy;
    //Instruction 5312
    //EXP
    t16_2.xyz = exp2(t16_2.xyz);
    //Instruction 5313
    //DIV
    t3.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    //Instruction 5314
    //SAMPLE
    t10_3.xyz = texture(_LightBuffer, t3.xy).xyz;
    //Instruction 5315
    //MAX
    t16_4.xyz = max(t10_3.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 5316
    //LOG
    t16_4.xyz = log2(t16_4.xyz);
    //Instruction 5317
    //ADD
    t3.xyz = (-t16_4.xyz) + vs_TEXCOORD4.xyz;
    //Instruction 5318
    //ADD
    t16_2.xyz = t16_2.xyz + t3.xyz;
    //Instruction 5319
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 5320
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 5321
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5322
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 vertex_4;
  vertex_4.yw = _glesVertex.yw;
  lowp vec4 color_5;
  color_5.xyz = _glesColor.xyz;
  lowp vec3 waveColor_6;
  highp vec3 waveMove_7;
  highp vec4 s_8;
  highp vec4 waves_9;
  waves_9 = (_glesVertex.x * (vec4(0.012, 0.02, 0.06, 0.024) * _WaveAndDistance.y));
  waves_9 = (waves_9 + (_glesVertex.z * (vec4(0.006, 0.02, 0.02, 0.05) * _WaveAndDistance.y)));
  waves_9 = (waves_9 + (_WaveAndDistance.x * vec4(1.2, 2.0, 1.6, 4.8)));
  highp vec4 tmpvar_10;
  tmpvar_10 = fract(waves_9);
  waves_9 = tmpvar_10;
  highp vec4 val_11;
  highp vec4 s_12;
  val_11 = ((tmpvar_10 * 6.408849) - 3.141593);
  highp vec4 tmpvar_13;
  tmpvar_13 = (val_11 * val_11);
  highp vec4 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * val_11);
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_14 * tmpvar_13);
  s_12 = (((val_11 + 
    (tmpvar_14 * -0.1616162)
  ) + (tmpvar_15 * 0.0083333)) + ((tmpvar_15 * tmpvar_13) * -0.00019841));
  s_8 = (s_12 * s_12);
  s_8 = (s_8 * s_8);
  highp float tmpvar_16;
  tmpvar_16 = (dot (s_8, vec4(0.6741998, 0.6741998, 0.2696799, 0.13484)) * 0.7);
  s_8 = (s_8 * (_glesColor.w * _WaveAndDistance.z));
  waveMove_7.y = 0.0;
  waveMove_7.x = dot (s_8, vec4(0.024, 0.04, -0.12, 0.096));
  waveMove_7.z = dot (s_8, vec4(0.006, 0.02, -0.02, 0.1));
  vertex_4.xz = (_glesVertex.xz - (waveMove_7.xz * _WaveAndDistance.z));
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (vec3(0.5, 0.5, 0.5), _WavingTint.xyz, vec3(tmpvar_16));
  waveColor_6 = tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = (vertex_4.xyz - _CameraPosition.xyz);
  highp float tmpvar_19;
  tmpvar_19 = clamp (((2.0 * 
    (_WaveAndDistance.w - dot (tmpvar_18, tmpvar_18))
  ) * _CameraPosition.w), 0.0, 1.0);
  color_5.w = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.xyz = ((2.0 * waveColor_6) * _glesColor.xyz);
  tmpvar_20.w = color_5.w;
  tmpvar_1 = (glstate_matrix_mvp * vertex_4);
  highp vec4 o_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = (tmpvar_22.y * _ProjectionParams.x);
  o_21.xy = (tmpvar_23 + tmpvar_22.w);
  o_21.zw = tmpvar_1.zw;
  tmpvar_2.zw = vec2(0.0, 0.0);
  tmpvar_2.xy = vec2(0.0, 0.0);
  highp vec4 v_24;
  v_24.x = _World2Object[0].x;
  v_24.y = _World2Object[1].x;
  v_24.z = _World2Object[2].x;
  v_24.w = _World2Object[3].x;
  highp vec4 v_25;
  v_25.x = _World2Object[0].y;
  v_25.y = _World2Object[1].y;
  v_25.z = _World2Object[2].y;
  v_25.w = _World2Object[3].y;
  highp vec4 v_26;
  v_26.x = _World2Object[0].z;
  v_26.y = _World2Object[1].z;
  v_26.z = _World2Object[2].z;
  v_26.w = _World2Object[3].z;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalize(((
    (v_24.xyz * _glesNormal.x)
   + 
    (v_25.xyz * _glesNormal.y)
  ) + (v_26.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_28;
  mediump vec4 normal_29;
  normal_29 = tmpvar_27;
  mediump vec3 x2_30;
  mediump vec3 x1_31;
  x1_31.x = dot (unity_SHAr, normal_29);
  x1_31.y = dot (unity_SHAg, normal_29);
  x1_31.z = dot (unity_SHAb, normal_29);
  mediump vec4 tmpvar_32;
  tmpvar_32 = (normal_29.xyzz * normal_29.yzzx);
  x2_30.x = dot (unity_SHBr, tmpvar_32);
  x2_30.y = dot (unity_SHBg, tmpvar_32);
  x2_30.z = dot (unity_SHBb, tmpvar_32);
  tmpvar_28 = ((x2_30 + (unity_SHC.xyz * 
    ((normal_29.x * normal_29.x) - (normal_29.y * normal_29.y))
  )) + x1_31);
  tmpvar_3 = tmpvar_28;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * vertex_4).xyz;
  xlv_COLOR0 = tmpvar_20;
  xlv_TEXCOORD2 = o_21;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR0);
  lowp float x_5;
  x_5 = (tmpvar_4.w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_7.w;
  light_3.xyz = (tmpvar_7.xyz + xlv_TEXCOORD4);
  lowp vec4 c_8;
  c_8.xyz = (tmpvar_4.xyz * light_3.xyz);
  c_8.w = (tmpvar_4.w * xlv_COLOR0.w);
  c_2.xyz = c_8.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matr